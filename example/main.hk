< Main.(Automobile)

/* Sample of a basic Hawk program.
   Hawk is similar in syntax to Haskell,
   but technically closer to C.
*/

=> Core.IO.(printLn readLn Stdout Stdin) @ I

> Core.Math.(sin cos tan)
< I.(\Stdout Stdin)

id
  ? a -> a
  = \ x -> x

// Creating variables
<- a b c
a ? I32 = 4
b = 2
c = 1 ? I32

< SizeT SizedArr

SizeT - I32

Color :-
  Red I32
  Green I32
  Blue I32


// Also note that tagged unions and arrays
// can be polymorphic with the use of type variables.
SizedArr v :-
  arr ? [v]
  size ? Int

// Type operator's can only be constructed through a type def
_!->!_ 4L 
  a b
  - a -> IO b

/*

// Hawk has support for tagged unions
// Tagged unions consist of a name and a block of constructor definitions
// This is the basic tagged union syntax
// Each constructor entry begins with a capital letter and the rest of the
// line fold consists of a space seperated list of types.
Color :-
  Red I32
  Green I32
  Blue I32

// Tagged union constructors can also be defined with a record syntax
Color :-
  Red:
      alpha ? I32
  Green:
      alpha ? I32
  Blue:
      alpha ? I32
      
// Algebraic syntax
Color :-
  Red ? I32 -> Color
  Green ? I32 -> Color
  Blue ? I32 -> Color


// Plain old records can be defined as well
Car :-
  gas       ? I32
  max_speed ? I32

// However, records are stored as single-constructor, tagged unions.
// So, hkc will autogenerate a constructor and the result would be this.
Car :-
  Car:
    gas       ? I32
    max_speed ? I32
  

// Type class (aka interface)
Automobile a :~
  drive ? a -> IO ()
  paint ? a -> Color -> IO ()

// Instancing a typeclass
Automobile Car :~
  drive car = do
    let out = toString max_speed
    Core.print out

  paint car color =
    Core.print
      $ "Car painted " +
        $ case color of
            Red x -> x + "% Red"
            Green x -> x + "% Green"
            Blue x -> x + "% Blue"


// Main function and default entry point of all programs.
// An executable cannot compile without a main function.
main foo 
  ? IO ()
  :=
  // Create some cars
  let car_a ? Car = Car 12 124
      car_b ? Car = Car 19 103

  // Drive some cars
  drive car_a
  drive car_b // If drive mutated car_b, and error should be thrown.
  


<- if_then_else_ while_:_

if_then_else_ 6R
  p a b
  ? Bool -> [Expr a] -> [Expr a0] -> Q (Expr a)
  = undefined
      
while_:_ 6R
  ? Bool -> [Expr a] -> Q (Expr a)
  = undefined
  
*/