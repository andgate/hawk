-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Parse.y
-----------------------------------------------------------------------------

state 101 contains 9 shift/reduce conflicts.
state 112 contains 1 shift/reduce conflicts.
state 125 contains 1 shift/reduce conflicts.
state 145 contains 9 shift/reduce conflicts.
state 146 contains 1 shift/reduce conflicts.
state 154 contains 2 shift/reduce conflicts.
state 288 contains 1 shift/reduce conflicts.
state 289 contains 1 shift/reduce conflicts.
state 305 contains 4 shift/reduce conflicts.

rule 4 is unused
rule 5 is unused
rule 6 is unused
rule 7 is unused
rule 36 is unused
rule 37 is unused
rule 38 is unused
rule 155 is unused
rule 156 is unused
rule 164 is unused
rule 165 is unused

terminal '::' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseTopLevel -> top_level                  (0)
	name -> var_name                                   (1)
	name -> con_name                                   (2)
	name -> '(' op_name ')'                            (3)
	qname -> qvar_name                                 (4)
	qname -> qcon_name                                 (5)
	qvar_name -> mod_path '::' var_id                  (6)
	qcon_name -> mod_path '::' con_id                  (7)
	var_name -> var_id                                 (8)
	con_name -> con_id                                 (9)
	op_name -> op_id                                   (10)
	op_name_ext -> op_id_ext                           (11)
	mod_name -> con_name                               (12)
	var_id -> varId                                    (13)
	con_id -> conId                                    (14)
	op_id -> opId                                      (15)
	op_id_ext -> op_id                                 (16)
	op_id_ext -> backslash                             (17)
	op_id_ext -> '='                                   (18)
	op_id_ext -> '~'                                   (19)
	op_id_ext -> '*'                                   (20)
	op_id_ext -> '&'                                   (21)
	op_id_ext -> '&&'                                  (22)
	op_id_ext -> '<'                                   (23)
	op_id_ext -> '>'                                   (24)
	prim_id -> primId                                  (25)
	value -> Null                                      (26)
	value -> boolean                                   (27)
	value -> integer                                   (28)
	value -> double                                    (29)
	value -> char                                      (30)
	value -> '[]'                                      (31)
	value -> '<.>'                                     (32)
	value -> '[' exp_args0 ']'                         (33)
	value -> '<.' exp_args0 '>'                        (34)
	value -> string                                    (35)
	var_name_list -> var_name_list_r                   (36)
	var_name_list_r -> var_name                        (37)
	var_name_list_r -> var_name_list_r var_name        (38)
	top_level -> top_level_stmts0 eof                  (39)
	top_level_stmts0 ->                                (40)
	top_level_stmts0 -> top_level_stmts                (41)
	top_level_stmts -> top_level_stmts_r               (42)
	top_level_stmts_r -> top_level_stmt                (43)
	top_level_stmts_r -> top_level_stmts_r top_level_stmt   (44)
	top_level_stmt -> module_defn                      (45)
	top_level_stmt -> import_stmt                      (46)
	top_level_stmt -> declaration                      (47)
	top_level_stmt -> function_defn                    (48)
	top_level_stmt -> function_extern                  (49)
	top_level_stmt -> constructor_defn                 (50)
	top_level_stmt -> destructor_defn                  (51)
	top_level_stmt -> type_defn                        (52)
	top_level_stmt -> alias_defn                       (53)
	top_level_stmt -> class_defn                       (54)
	top_level_stmt -> instance_defn                    (55)
	top_level_stmt -> operator_decl                    (56)
	module_defn -> Module mod_path module_block        (57)
	module_block -> '{' top_level_stmts0 '}'           (58)
	mod_path -> mod_path_r                             (59)
	mod_path_r -> mod_name                             (60)
	mod_path_r -> mod_path_r '.' mod_name              (61)
	import_stmt -> Import mod_path ';'                 (62)
	declaration -> decl_head maybe_type_sig ';'        (63)
	declaration -> decl_head maybe_type_sig '=' exp ';'   (64)
	declaration -> decl_head '(' exp_args0 ')' maybe_type_sig ';'   (65)
	decl_head -> Let name                              (66)
	maybe_type_sig ->                                  (67)
	maybe_type_sig -> type_sig                         (68)
	type_sig -> ':' type                               (69)
	function_defn -> function_decl block               (70)
	function_decl -> maybe_func_specs var_name maybe_scheme '(' parameters0 ')' maybe_type_sig   (71)
	function_extern -> Extern var_name '(' parameters0 ')' type_sig ';'   (72)
	maybe_func_specs ->                                (73)
	maybe_func_specs -> func_specs                     (74)
	func_specs -> func_specs_list                      (75)
	func_specs_list -> func_specs_list_r               (76)
	func_specs_list_r -> func_spec                     (77)
	func_specs_list_r -> func_specs_list_r func_spec   (78)
	func_spec -> Inline                                (79)
	func_spec -> Recursive                             (80)
	parameters0 ->                                     (81)
	parameters0 -> parameters                          (82)
	parameters -> parameters_list_r                    (83)
	parameters_list_r -> parameter                     (84)
	parameters_list_r -> parameters_list_r ',' parameter   (85)
	parameter -> var_name maybe_type_sig               (86)
	constructor_defn -> constructor_decl block         (87)
	constructor_decl -> con_name '(' parameters0 ')' maybe_init_list   (88)
	destructor_defn -> destructor_decl block           (89)
	destructor_decl -> '~' con_name '(' parameters0 ')'   (90)
	maybe_init_list ->                                 (91)
	maybe_init_list -> inits                           (92)
	inits -> ':' init_list                             (93)
	init_list -> init_list_r                           (94)
	init_list_r -> initializer                         (95)
	init_list_r -> init_list_r ',' initializer         (96)
	initializer -> name '(' exp_args0 ')'              (97)
	stmt -> stmt_nop                                   (98)
	stmt -> stmt_exp                                   (99)
	stmt -> stmt_decl                                  (100)
	stmt -> stmt_block                                 (101)
	stmt -> stmt_with                                  (102)
	stmt -> stmt_break                                 (103)
	stmt -> stmt_continue                              (104)
	stmt -> stmt_return                                (105)
	stmt -> stmt_throw                                 (106)
	stmt -> stmt_if                                    (107)
	stmt -> stmt_while                                 (108)
	stmt -> stmt_do_while                              (109)
	stmt -> stmt_for                                   (110)
	stmt -> stmt_case                                  (111)
	stmt -> stmt_try_catch                             (112)
	block -> '{' '}'                                   (113)
	block -> '{' stmts '}'                             (114)
	stmts -> stmts_r                                   (115)
	stmts_r -> stmt                                    (116)
	stmts_r -> stmts_r stmt                            (117)
	stmt_nop -> ';'                                    (118)
	stmt_exp -> exp ';'                                (119)
	stmt_decl -> maybe_stmt_decl_specs declaration     (120)
	maybe_stmt_decl_specs ->                           (121)
	maybe_stmt_decl_specs -> stmt_decl_specs           (122)
	stmt_decl_specs -> stmt_decl_specs_list            (123)
	stmt_decl_specs_list -> stmt_decl_specs_list_r     (124)
	stmt_decl_specs_list_r -> stmt_decl_spec           (125)
	stmt_decl_specs_list_r -> stmt_decl_specs_list_r stmt_decl_spec   (126)
	stmt_decl_spec -> Static                           (127)
	stmt_block -> block                                (128)
	stmt_with -> With '(' exp ')' stmt                 (129)
	stmt_break -> Break ';'                            (130)
	stmt_continue -> Continue ';'                      (131)
	stmt_return -> Return may_exp ';'                  (132)
	stmt_throw -> Throw exp ';'                        (133)
	stmt_if -> If '(' exp ')' stmt                     (134)
	stmt_if -> If '(' exp ')' stmt stmt_elif           (135)
	stmt_if -> If '(' exp ')' stmt stmt_else           (136)
	stmt_elif -> Elif '(' exp ')' stmt                 (137)
	stmt_elif -> Elif '(' exp ')' stmt stmt_elif       (138)
	stmt_elif -> Elif '(' exp ')' stmt stmt_else       (139)
	stmt_else -> Else stmt                             (140)
	stmt_while -> While '(' exp ')' stmt               (141)
	stmt_do_while -> Do stmt While '(' exp ')' ';'     (142)
	stmt_for -> For '(' for_init may_exp ';' may_exp ')' stmt   (143)
	for_init -> may_exp ';'                            (144)
	for_init -> declaration                            (145)
	stmt_case -> Case '(' exp ')' case_alts            (146)
	case_alts -> '{' case_alt_list '}'                 (147)
	case_alt_list -> case_alt_list_r                   (148)
	case_alt_list_r -> case_alt                        (149)
	case_alt_list_r -> case_alt_list_r case_alt        (150)
	case_alt -> pat stmt                               (151)
	stmt_try_catch -> stmt_try stmt_catch_list may_stmt_finally   (152)
	stmt_try -> Try stmt                               (153)
	stmt_catch -> Catch '(' exp ')' stmt               (154)
	stmt_catch_list0 ->                                (155)
	stmt_catch_list0 -> stmt_catch_list                (156)
	stmt_catch_list -> stmt_catch_list_r               (157)
	stmt_catch_list_r -> stmt_catch                    (158)
	stmt_catch_list_r -> stmt_catch_list_r stmt_catch   (159)
	stmt_finally -> Finally stmt                       (160)
	may_stmt_finally ->                                (161)
	may_stmt_finally -> stmt_finally                   (162)
	pat -> bpat                                        (163)
	cpat -> pat type_sig                               (164)
	cpat -> bpat                                       (165)
	bpat -> var_name '@' bpat                          (166)
	bpat -> con_name '(' pat_list0 ')'                 (167)
	bpat -> con_name '{' pat_rec_field_list0 '}'       (168)
	bpat -> apat                                       (169)
	apat -> pat_var                                    (170)
	apat -> '(' pat ')'                                (171)
	apat -> '_'                                        (172)
	pat_var -> var_name                                (173)
	pat_rec_field -> var_name '=' pat                  (174)
	pat_rec_field_list0 ->                             (175)
	pat_rec_field_list0 -> pat_rec_field_list          (176)
	pat_rec_field_list -> pat_rec_field_list_r         (177)
	pat_rec_field_list_r -> pat_rec_field              (178)
	pat_rec_field_list_r -> pat_rec_field_list_r ',' pat_rec_field   (179)
	pat_list0 ->                                       (180)
	pat_list0 -> pat_list                              (181)
	pat_list -> pat_list_r                             (182)
	pat_list_r -> pat                                  (183)
	pat_list_r -> pat_list_r ',' pat                   (184)
	exp -> dexp                                        (185)
	dexp -> cexp type_sig                              (186)
	dexp -> cexp As type                               (187)
	dexp -> cexp                                       (188)
	cexp -> exp_op(bexp)                               (189)
	bexp -> bexp arguments                             (190)
	bexp -> bexp '.' var_name                          (191)
	bexp -> bexp '->' var_name                         (192)
	bexp -> bexp '[' exp ']'                           (193)
	bexp -> bexp '<.' exp '>'                          (194)
	bexp -> New aexp                                   (195)
	bexp -> Renew aexp                                 (196)
	bexp -> Delete aexp                                (197)
	bexp -> aexp                                       (198)
	aexp -> exp_var                                    (199)
	aexp -> exp_con                                    (200)
	aexp -> exp_value                                  (201)
	aexp -> exp_instr                                  (202)
	aexp -> exp_parens                                 (203)
	exp_var -> var_name                                (204)
	exp_con -> con_name                                (205)
	exp_value -> value                                 (206)
	exp_parens -> '(' exp ')'                          (207)
	may_exp ->                                         (208)
	may_exp -> exp                                     (209)
	arguments -> '(' exp_args0 ')'                     (210)
	exp_args0 ->                                       (211)
	exp_args0 -> exp_args                              (212)
	exp_args -> exp_args_r                             (213)
	exp_args_r -> exp                                  (214)
	exp_args_r -> exp_args_r ',' exp                   (215)
	exp_instr -> prim_id '(' exp ',' exp ')'           (216)
	type -> etype                                      (217)
	etype -> ctype                                     (218)
	etype -> ctype kind_sig                            (219)
	ctype -> ctype '->' type_op(btype)                 (220)
	ctype -> type_op(btype)                            (221)
	btype -> type_con_const(btype)                     (222)
	btype -> type_con_array(btype)                     (223)
	btype -> type_con_vector(btype)                    (224)
	btype -> atype maybe_scheme type_arguments         (225)
	btype -> atype                                     (226)
	atype -> var_name                                  (227)
	atype -> con_name                                  (228)
	atype -> type_con_void                             (229)
	atype -> type_con_int                              (230)
	atype -> type_con_fp                               (231)
	atype -> '(' type ')'                              (232)
	type_arguments -> '(' type_list0 ')'               (233)
	type_list0 ->                                      (234)
	type_list0 -> type_list                            (235)
	type_list -> type_list_r                           (236)
	type_list_r -> type                                (237)
	type_list_r -> type_list_r ',' type                (238)
	type_parameter -> var_name maybe_kind_sig          (239)
	type_parameters -> '(' type_parameter_list0 ')'    (240)
	type_parameter_list0 ->                            (241)
	type_parameter_list0 -> type_parameter_list        (242)
	type_parameter_list -> type_parameter_list_r       (243)
	type_parameter_list_r -> type_parameter            (244)
	type_parameter_list_r -> type_parameter_list_r ',' type_parameter   (245)
	type_con_void -> VOID                              (246)
	type_con_int -> I1                                 (247)
	type_con_int -> I8                                 (248)
	type_con_int -> I16                                (249)
	type_con_int -> I32                                (250)
	type_con_int -> I64                                (251)
	type_con_int -> I128                               (252)
	type_con_fp -> Fp16                                (253)
	type_con_fp -> Fp32                                (254)
	type_con_fp -> Fp64                                (255)
	type_con_fp -> Fp128                               (256)
	kind -> akind                                      (257)
	kind -> kind '->' akind                            (258)
	akind -> TYPE                                      (259)
	kind_sig -> ':' kind                               (260)
	maybe_kind_sig ->                                  (261)
	maybe_kind_sig -> kind_sig                         (262)
	scheme -> '<' pred_list0 '>'                       (263)
	maybe_scheme ->                                    (264)
	maybe_scheme -> scheme                             (265)
	pred -> pred_forall                                (266)
	pred -> pred_isIn                                  (267)
	pred_forall -> var_name                            (268)
	pred_isIn -> con_name '(' type_list ')'            (269)
	pred_list0 ->                                      (270)
	pred_list0 -> pred_list                            (271)
	pred_list -> pred_list_r                           (272)
	pred_list_r -> pred                                (273)
	pred_list_r -> pred_list_r ',' pred                (274)
	type_defn -> type_decl type_defn_body              (275)
	type_decl -> Type con_name maybe_scheme type_parameters   (276)
	type_defn_body -> '{' data_defn_list0 '}'          (277)
	type_defn_body -> ';'                              (278)
	data_defn -> con_name data_fields ';'              (279)
	data_defn -> con_name object_fields                (280)
	data_defn_list0 ->                                 (281)
	data_defn_list0 -> data_defn_list                  (282)
	data_defn_list -> data_defn_list_r                 (283)
	data_defn_list_r -> data_defn                      (284)
	data_defn_list_r -> data_defn_list_r data_defn     (285)
	data_fields -> '(' data_field_list0 ')'            (286)
	data_field_list0 ->                                (287)
	data_field_list0 -> data_field_list                (288)
	data_field_list -> data_field_list_r               (289)
	data_field_list_r -> data_field                    (290)
	data_field_list_r -> data_field_list_r ',' data_field   (291)
	data_field -> type maybe_data_field_default        (292)
	data_field_default -> '=' exp                      (293)
	maybe_data_field_default ->                        (294)
	maybe_data_field_default -> data_field_default     (295)
	object_fields -> '{' object_field_list0 '}'        (296)
	object_field_list0 ->                              (297)
	object_field_list0 -> object_field_list            (298)
	object_field_list -> object_field_list_r           (299)
	object_field_list_r -> object_field                (300)
	object_field_list_r -> object_field_list_r ',' object_field   (301)
	object_field -> var_name type_sig maybe_data_field_default   (302)
	alias_defn -> alias_decl '=' type ';'              (303)
	alias_decl -> Alias con_name maybe_scheme type_parameters   (304)
	class_defn -> class_decl class_body                (305)
	class_decl -> Class con_name maybe_scheme type_parameters   (306)
	class_body -> '{' class_method_list0 '}'           (307)
	class_method -> function_decl ';'                  (308)
	class_method -> function_decl block                (309)
	class_method_list0 ->                              (310)
	class_method_list0 -> class_method_list            (311)
	class_method_list -> class_method_list_r           (312)
	class_method_list_r -> class_method                (313)
	class_method_list_r -> class_method_list_r class_method   (314)
	instance_defn -> instance_decl instance_body       (315)
	instance_decl -> Inst con_name maybe_scheme type_arguments   (316)
	instance_body -> '{' instance_method_list0 '}'     (317)
	instance_method -> function_defn                   (318)
	instance_method_list0 ->                           (319)
	instance_method_list0 -> instance_method_list      (320)
	instance_method_list -> instance_method_list_r     (321)
	instance_method_list_r -> instance_method          (322)
	instance_method_list_r -> instance_method_list_r instance_method   (323)
	operator_decl -> Operator '(' fixity ',' integer ',' op_name_list ')' ';'   (324)
	fixity -> Infix                                    (325)
	fixity -> Infixr                                   (326)
	fixity -> Infixl                                   (327)
	fixity -> Prefix                                   (328)
	fixity -> Postfix                                  (329)
	op_name_list -> op_name_list_r                     (330)
	op_name_list_r -> op_name                          (331)
	op_name_list_r -> op_name_list_r ',' op_name       (332)
	exp_op(bexp) -> cexpop(bexp)                       (333)
	type_con_array(btype) -> btype '[]'                (334)
	type_con_array(btype) -> btype '[' exp ']'         (335)
	type_con_const(btype) -> Const btype               (336)
	type_con_vector(btype) -> btype '<.>'              (337)
	type_con_vector(btype) -> btype '<.' exp '>'       (338)
	type_op(btype) -> ctyop(btype)                     (339)
	cexpop(bexp) -> bexpop(bexp)                       (340)
	cexpop(bexp) -> cexpop(bexp) op_name_ext bexpop(bexp)   (341)
	ctyop(btype) -> btyop(btype)                       (342)
	ctyop(btype) -> ctyop(btype) op_name_ext btyop(btype)   (343)
	bexpop(bexp) -> op_name_ext aexpop(bexp)           (344)
	bexpop(bexp) -> aexpop(bexp)                       (345)
	btyop(btype) -> op_name_ext atyop(btype)           (346)
	btyop(btype) -> atyop(btype)                       (347)
	aexpop(bexp) -> bexp op_name_ext                   (348)
	aexpop(bexp) -> bexp                               (349)
	atyop(btype) -> btype op_name_ext                  (350)
	atyop(btype) -> btype                              (351)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	backslash      { Token (TokenRsvp "\\") _ $$ }
	'->'           { Token (TokenRsvp "->") _ $$ }
	':'            { Token (TokenRsvp ":") _ $$ }
	'::'           { Token (TokenRsvp "::") _ $$ }
	';'            { Token (TokenRsvp ";") _ $$ }
	','            { Token (TokenRsvp ",") _ $$ }
	'.'            { Token (TokenRsvp ".") _ $$ }
	'='            { Token (TokenRsvp "=") _ $$ }
	'_'            { Token (TokenRsvp "_") _ $$ }
	'~'            { Token (TokenRsvp "~") _ $$ }
	'*'            { Token (TokenRsvp "*") _ $$ }
	'&'            { Token (TokenRsvp "&") _ $$ }
	'&&'           { Token (TokenRsvp "&&") _ $$ }
	'@'            { Token (TokenRsvp "@") _ $$ }
	'('            { Token (TokenRsvp "(") _ $$ }
	')'            { Token (TokenRsvp ")") _ $$ }
	'[]'           { Token (TokenRsvp "[]") _ _ }
	'['            { Token (TokenRsvp "[") _ $$ }
	']'            { Token (TokenRsvp "]") _ $$ }
	'{'            { Token (TokenRsvp "{") _ $$ }
	'}'            { Token (TokenRsvp "}") _ $$ }
	'<.>'          { Token (TokenRsvp "<.>") _ _ }
	'<.'           { Token (TokenRsvp "<.>") _ _ }
	'<'            { Token (TokenRsvp "<") _ _ }
	'>'            { Token (TokenRsvp ">") _ _ }
	TYPE           { Token (TokenConId "Type") _ $$ }
	VOID           { Token (TokenConId "Void") _ $$ }
	I1             { Token (TokenConId "I1" ) _ $$ }
	I8             { Token (TokenConId "I8" ) _ $$ }
	I16            { Token (TokenConId "I16" ) _ $$ }
	I32            { Token (TokenConId "I32" ) _ $$ }
	I64            { Token (TokenConId "I64" ) _ $$ }
	I128           { Token (TokenConId "I128" ) _ $$ }
	Fp16           { Token (TokenConId "Fp16" ) _ $$ }
	Fp32           { Token (TokenConId "Fp32" ) _ $$ }
	Fp64           { Token (TokenConId "Fp64" ) _ $$ }
	Fp128          { Token (TokenConId "Fp128" ) _ $$ }
	Operator       { Token (TokenRsvp "operator") _ $$ }
	Prefix         { Token (TokenRsvp "prefix") _ $$ }
	Infix          { Token (TokenRsvp "infix") _ $$ }
	Infixl         { Token (TokenRsvp "infixl") _ $$ }
	Infixr         { Token (TokenRsvp "infixr") _ $$ }
	Postfix        { Token (TokenRsvp "postfix") _ $$ }
	Static         { Token (TokenRsvp "static") _ $$ }
	Inline         { Token (TokenRsvp "inline") _ $$ }
	Recursive      { Token (TokenRsvp "rec") _ $$ }
	Extern         { Token (TokenRsvp "extern") _ $$ }
	New            { Token (TokenRsvp "new"  ) _ $$ }
	Renew          { Token (TokenRsvp "renew"  ) _ $$ }
	Delete         { Token (TokenRsvp "delete") _ $$ }
	Module         { Token (TokenRsvp "module") _ $$ }
	Import         { Token (TokenRsvp "import") _ $$ }
	Type           { Token (TokenRsvp "type" ) _ $$ }
	Alias          { Token (TokenRsvp "alias") _ $$ }
	Class          { Token (TokenRsvp "class") _ $$ }
	Inst           { Token (TokenRsvp "inst" ) _ $$ }
	Let            { Token (TokenRsvp "let"   ) _ $$ }
	As             { Token (TokenRsvp "as"    ) _ $$ }
	Const          { Token (TokenRsvp "const" ) _ $$ }
	If             { Token (TokenRsvp "if"  ) _ $$ }
	Else           { Token (TokenRsvp "else") _ $$ }
	Elif           { Token (TokenRsvp "elif") _ $$ }
	Case           { Token (TokenRsvp "case") _ $$ }
	Try            { Token (TokenRsvp "try"    ) _ $$ }
	Catch          { Token (TokenRsvp "catch"  ) _ $$ }
	Finally        { Token (TokenRsvp "finally") _ $$ }
	Throw          { Token (TokenRsvp "throw"  ) _ $$ }
	Return         { Token (TokenRsvp "return") _ $$ }
	Break          { Token (TokenRsvp "break" ) _ $$ }
	Continue       { Token (TokenRsvp "continue") _ $$ }
	With           { Token (TokenRsvp  "with") _ $$ }
	Do             { Token (TokenRsvp    "do") _ $$ }
	While          { Token (TokenRsvp "while") _ $$ }
	For            { Token (TokenRsvp   "for") _ $$ }
	Null           { Token (TokenRsvp "null") _ $$ }
	varId          { Token (TokenVarId  _) _ _ }
	conId          { Token (TokenConId  _) _ _ }
	opId           { Token (TokenOpId   _) _ _ }
	primId         { Token (TokenPrimId _) _ _ }
	integer        { Token (TokenInteger _) _ _ }
	double         { Token (TokenDouble  _) _ _ }
	char           { Token (TokenChar    _) _ _ }
	string         { Token (TokenString  _) _ _ }
	boolean        { Token (TokenBool    _) _ _ }
	eof            { Token TokenEof _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseTopLevel rule  0
	name            rules 1, 2, 3
	qname           rules 4, 5
	qvar_name       rule  6
	qcon_name       rule  7
	var_name        rule  8
	con_name        rule  9
	op_name         rule  10
	op_name_ext     rule  11
	mod_name        rule  12
	var_id          rule  13
	con_id          rule  14
	op_id           rule  15
	op_id_ext       rules 16, 17, 18, 19, 20, 21, 22, 23, 24
	prim_id         rule  25
	value           rules 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	var_name_list   rule  36
	var_name_list_r rules 37, 38
	top_level       rule  39
	top_level_stmts0 rules 40, 41
	top_level_stmts rule  42
	top_level_stmts_r rules 43, 44
	top_level_stmt  rules 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56
	module_defn     rule  57
	module_block    rule  58
	mod_path        rule  59
	mod_path_r      rules 60, 61
	import_stmt     rule  62
	declaration     rules 63, 64, 65
	decl_head       rule  66
	maybe_type_sig  rules 67, 68
	type_sig        rule  69
	function_defn   rule  70
	function_decl   rule  71
	function_extern rule  72
	maybe_func_specs rules 73, 74
	func_specs      rule  75
	func_specs_list rule  76
	func_specs_list_r rules 77, 78
	func_spec       rules 79, 80
	parameters0     rules 81, 82
	parameters      rule  83
	parameters_list_r rules 84, 85
	parameter       rule  86
	constructor_defn rule  87
	constructor_decl rule  88
	destructor_defn rule  89
	destructor_decl rule  90
	maybe_init_list rules 91, 92
	inits           rule  93
	init_list       rule  94
	init_list_r     rules 95, 96
	initializer     rule  97
	stmt            rules 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112
	block           rules 113, 114
	stmts           rule  115
	stmts_r         rules 116, 117
	stmt_nop        rule  118
	stmt_exp        rule  119
	stmt_decl       rule  120
	maybe_stmt_decl_specs rules 121, 122
	stmt_decl_specs rule  123
	stmt_decl_specs_list rule  124
	stmt_decl_specs_list_r rules 125, 126
	stmt_decl_spec  rule  127
	stmt_block      rule  128
	stmt_with       rule  129
	stmt_break      rule  130
	stmt_continue   rule  131
	stmt_return     rule  132
	stmt_throw      rule  133
	stmt_if         rules 134, 135, 136
	stmt_elif       rules 137, 138, 139
	stmt_else       rule  140
	stmt_while      rule  141
	stmt_do_while   rule  142
	stmt_for        rule  143
	for_init        rules 144, 145
	stmt_case       rule  146
	case_alts       rule  147
	case_alt_list   rule  148
	case_alt_list_r rules 149, 150
	case_alt        rule  151
	stmt_try_catch  rule  152
	stmt_try        rule  153
	stmt_catch      rule  154
	stmt_catch_list0 rules 155, 156
	stmt_catch_list rule  157
	stmt_catch_list_r rules 158, 159
	stmt_finally    rule  160
	may_stmt_finally rules 161, 162
	pat             rule  163
	cpat            rules 164, 165
	bpat            rules 166, 167, 168, 169
	apat            rules 170, 171, 172
	pat_var         rule  173
	pat_rec_field   rule  174
	pat_rec_field_list0 rules 175, 176
	pat_rec_field_list rule  177
	pat_rec_field_list_r rules 178, 179
	pat_list0       rules 180, 181
	pat_list        rule  182
	pat_list_r      rules 183, 184
	exp             rule  185
	dexp            rules 186, 187, 188
	cexp            rule  189
	bexp            rules 190, 191, 192, 193, 194, 195, 196, 197, 198
	aexp            rules 199, 200, 201, 202, 203
	exp_var         rule  204
	exp_con         rule  205
	exp_value       rule  206
	exp_parens      rule  207
	may_exp         rules 208, 209
	arguments       rule  210
	exp_args0       rules 211, 212
	exp_args        rule  213
	exp_args_r      rules 214, 215
	exp_instr       rule  216
	type            rule  217
	etype           rules 218, 219
	ctype           rules 220, 221
	btype           rules 222, 223, 224, 225, 226
	atype           rules 227, 228, 229, 230, 231, 232
	type_arguments  rule  233
	type_list0      rules 234, 235
	type_list       rule  236
	type_list_r     rules 237, 238
	type_parameter  rule  239
	type_parameters rule  240
	type_parameter_list0 rules 241, 242
	type_parameter_list rule  243
	type_parameter_list_r rules 244, 245
	type_con_void   rule  246
	type_con_int    rules 247, 248, 249, 250, 251, 252
	type_con_fp     rules 253, 254, 255, 256
	kind            rules 257, 258
	akind           rule  259
	kind_sig        rule  260
	maybe_kind_sig  rules 261, 262
	scheme          rule  263
	maybe_scheme    rules 264, 265
	pred            rules 266, 267
	pred_forall     rule  268
	pred_isIn       rule  269
	pred_list0      rules 270, 271
	pred_list       rule  272
	pred_list_r     rules 273, 274
	type_defn       rule  275
	type_decl       rule  276
	type_defn_body  rules 277, 278
	data_defn       rules 279, 280
	data_defn_list0 rules 281, 282
	data_defn_list  rule  283
	data_defn_list_r rules 284, 285
	data_fields     rule  286
	data_field_list0 rules 287, 288
	data_field_list rule  289
	data_field_list_r rules 290, 291
	data_field      rule  292
	data_field_default rule  293
	maybe_data_field_default rules 294, 295
	object_fields   rule  296
	object_field_list0 rules 297, 298
	object_field_list rule  299
	object_field_list_r rules 300, 301
	object_field    rule  302
	alias_defn      rule  303
	alias_decl      rule  304
	class_defn      rule  305
	class_decl      rule  306
	class_body      rule  307
	class_method    rules 308, 309
	class_method_list0 rules 310, 311
	class_method_list rule  312
	class_method_list_r rules 313, 314
	instance_defn   rule  315
	instance_decl   rule  316
	instance_body   rule  317
	instance_method rule  318
	instance_method_list0 rules 319, 320
	instance_method_list rule  321
	instance_method_list_r rules 322, 323
	operator_decl   rule  324
	fixity          rules 325, 326, 327, 328, 329
	op_name_list    rule  330
	op_name_list_r  rules 331, 332
	exp_op(bexp)    rule  333
	type_con_array(btype) rules 334, 335
	type_con_const(btype) rule  336
	type_con_vector(btype) rules 337, 338
	type_op(btype)  rule  339
	cexpop(bexp)    rules 340, 341
	ctyop(btype)    rules 342, 343
	bexpop(bexp)    rules 344, 345
	btyop(btype)    rules 346, 347
	aexpop(bexp)    rules 348, 349
	atyop(btype)    rules 350, 351

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'~'            shift, and enter state 37
	Operator       shift, and enter state 38
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	Extern         shift, and enter state 41
	Module         shift, and enter state 42
	Import         shift, and enter state 43
	Type           shift, and enter state 44
	Alias          shift, and enter state 45
	Class          shift, and enter state 46
	Inst           shift, and enter state 47
	Let            shift, and enter state 48
	varId          reduce using rule 73
	conId          shift, and enter state 49
	eof            reduce using rule 40

	con_name       goto state 5
	con_id         goto state 6
	top_level      goto state 7
	top_level_stmts0goto state 8
	top_level_stmtsgoto state 9
	top_level_stmts_rgoto state 10
	top_level_stmt goto state 11
	module_defn    goto state 12
	import_stmt    goto state 13
	declaration    goto state 14
	decl_head      goto state 15
	function_defn  goto state 16
	function_decl  goto state 17
	function_externgoto state 18
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	constructor_defngoto state 24
	constructor_declgoto state 25
	destructor_defngoto state 26
	destructor_declgoto state 27
	type_defn      goto state 28
	type_decl      goto state 29
	alias_defn     goto state 30
	alias_decl     goto state 31
	class_defn     goto state 32
	class_decl     goto state 33
	instance_defn  goto state 34
	instance_decl  goto state 35
	operator_decl  goto state 36

State 1


	varId          shift, and enter state 4

	var_name       goto state 2
	var_id         goto state 3

State 2

	name -> var_name .                                  (rule 1)

	':'            reduce using rule 1
	';'            reduce using rule 1
	'='            reduce using rule 1
	'('            reduce using rule 1


State 3

	var_name -> var_id .                                (rule 8)

	backslash      reduce using rule 8
	'->'           reduce using rule 8
	':'            reduce using rule 8
	';'            reduce using rule 8
	','            reduce using rule 8
	'.'            reduce using rule 8
	'='            reduce using rule 8
	'~'            reduce using rule 8
	'*'            reduce using rule 8
	'&'            reduce using rule 8
	'&&'           reduce using rule 8
	'@'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'[]'           reduce using rule 8
	'['            reduce using rule 8
	']'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	'<.>'          reduce using rule 8
	'<.'           reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	Static         reduce using rule 8
	New            reduce using rule 8
	Renew          reduce using rule 8
	Delete         reduce using rule 8
	Let            reduce using rule 8
	As             reduce using rule 8
	If             reduce using rule 8
	Case           reduce using rule 8
	Try            reduce using rule 8
	Throw          reduce using rule 8
	Return         reduce using rule 8
	Break          reduce using rule 8
	Continue       reduce using rule 8
	With           reduce using rule 8
	Do             reduce using rule 8
	While          reduce using rule 8
	For            reduce using rule 8
	Null           reduce using rule 8
	varId          reduce using rule 8
	conId          reduce using rule 8
	opId           reduce using rule 8
	primId         reduce using rule 8
	integer        reduce using rule 8
	double         reduce using rule 8
	char           reduce using rule 8
	string         reduce using rule 8
	boolean        reduce using rule 8


State 4

	var_id -> varId .                                   (rule 13)

	backslash      reduce using rule 13
	'->'           reduce using rule 13
	':'            reduce using rule 13
	';'            reduce using rule 13
	','            reduce using rule 13
	'.'            reduce using rule 13
	'='            reduce using rule 13
	'~'            reduce using rule 13
	'*'            reduce using rule 13
	'&'            reduce using rule 13
	'&&'           reduce using rule 13
	'@'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'[]'           reduce using rule 13
	'['            reduce using rule 13
	']'            reduce using rule 13
	'{'            reduce using rule 13
	'}'            reduce using rule 13
	'<.>'          reduce using rule 13
	'<.'           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	Static         reduce using rule 13
	New            reduce using rule 13
	Renew          reduce using rule 13
	Delete         reduce using rule 13
	Let            reduce using rule 13
	As             reduce using rule 13
	If             reduce using rule 13
	Case           reduce using rule 13
	Try            reduce using rule 13
	Throw          reduce using rule 13
	Return         reduce using rule 13
	Break          reduce using rule 13
	Continue       reduce using rule 13
	With           reduce using rule 13
	Do             reduce using rule 13
	While          reduce using rule 13
	For            reduce using rule 13
	Null           reduce using rule 13
	varId          reduce using rule 13
	conId          reduce using rule 13
	opId           reduce using rule 13
	primId         reduce using rule 13
	integer        reduce using rule 13
	double         reduce using rule 13
	char           reduce using rule 13
	string         reduce using rule 13
	boolean        reduce using rule 13


State 5

	constructor_decl -> con_name . '(' parameters0 ')' maybe_init_list    (rule 88)

	'('            shift, and enter state 85


State 6

	con_name -> con_id .                                (rule 9)

	backslash      reduce using rule 9
	'->'           reduce using rule 9
	':'            reduce using rule 9
	';'            reduce using rule 9
	','            reduce using rule 9
	'.'            reduce using rule 9
	'='            reduce using rule 9
	'~'            reduce using rule 9
	'*'            reduce using rule 9
	'&'            reduce using rule 9
	'&&'           reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'[]'           reduce using rule 9
	'['            reduce using rule 9
	']'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	'<.>'          reduce using rule 9
	'<.'           reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	As             reduce using rule 9
	opId           reduce using rule 9


State 7

	%start_parseTopLevel -> top_level .                 (rule 0)

	%eof           accept


State 8

	top_level -> top_level_stmts0 . eof                 (rule 39)

	eof            shift, and enter state 84


State 9

	top_level_stmts0 -> top_level_stmts .               (rule 41)

	'}'            reduce using rule 41
	eof            reduce using rule 41


State 10

	top_level_stmts -> top_level_stmts_r .              (rule 42)
	top_level_stmts_r -> top_level_stmts_r . top_level_stmt    (rule 44)

	'~'            shift, and enter state 37
	'}'            reduce using rule 42
	Operator       shift, and enter state 38
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	Extern         shift, and enter state 41
	Module         shift, and enter state 42
	Import         shift, and enter state 43
	Type           shift, and enter state 44
	Alias          shift, and enter state 45
	Class          shift, and enter state 46
	Inst           shift, and enter state 47
	Let            shift, and enter state 48
	varId          reduce using rule 73
	conId          shift, and enter state 49
	eof            reduce using rule 42

	con_name       goto state 5
	con_id         goto state 6
	top_level_stmt goto state 83
	module_defn    goto state 12
	import_stmt    goto state 13
	declaration    goto state 14
	decl_head      goto state 15
	function_defn  goto state 16
	function_decl  goto state 17
	function_externgoto state 18
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	constructor_defngoto state 24
	constructor_declgoto state 25
	destructor_defngoto state 26
	destructor_declgoto state 27
	type_defn      goto state 28
	type_decl      goto state 29
	alias_defn     goto state 30
	alias_decl     goto state 31
	class_defn     goto state 32
	class_decl     goto state 33
	instance_defn  goto state 34
	instance_decl  goto state 35
	operator_decl  goto state 36

State 11

	top_level_stmts_r -> top_level_stmt .               (rule 43)

	'~'            reduce using rule 43
	'}'            reduce using rule 43
	Operator       reduce using rule 43
	Inline         reduce using rule 43
	Recursive      reduce using rule 43
	Extern         reduce using rule 43
	Module         reduce using rule 43
	Import         reduce using rule 43
	Type           reduce using rule 43
	Alias          reduce using rule 43
	Class          reduce using rule 43
	Inst           reduce using rule 43
	Let            reduce using rule 43
	varId          reduce using rule 43
	conId          reduce using rule 43
	eof            reduce using rule 43


State 12

	top_level_stmt -> module_defn .                     (rule 45)

	'~'            reduce using rule 45
	'}'            reduce using rule 45
	Operator       reduce using rule 45
	Inline         reduce using rule 45
	Recursive      reduce using rule 45
	Extern         reduce using rule 45
	Module         reduce using rule 45
	Import         reduce using rule 45
	Type           reduce using rule 45
	Alias          reduce using rule 45
	Class          reduce using rule 45
	Inst           reduce using rule 45
	Let            reduce using rule 45
	varId          reduce using rule 45
	conId          reduce using rule 45
	eof            reduce using rule 45


State 13

	top_level_stmt -> import_stmt .                     (rule 46)

	'~'            reduce using rule 46
	'}'            reduce using rule 46
	Operator       reduce using rule 46
	Inline         reduce using rule 46
	Recursive      reduce using rule 46
	Extern         reduce using rule 46
	Module         reduce using rule 46
	Import         reduce using rule 46
	Type           reduce using rule 46
	Alias          reduce using rule 46
	Class          reduce using rule 46
	Inst           reduce using rule 46
	Let            reduce using rule 46
	varId          reduce using rule 46
	conId          reduce using rule 46
	eof            reduce using rule 46


State 14

	top_level_stmt -> declaration .                     (rule 47)

	'~'            reduce using rule 47
	'}'            reduce using rule 47
	Operator       reduce using rule 47
	Inline         reduce using rule 47
	Recursive      reduce using rule 47
	Extern         reduce using rule 47
	Module         reduce using rule 47
	Import         reduce using rule 47
	Type           reduce using rule 47
	Alias          reduce using rule 47
	Class          reduce using rule 47
	Inst           reduce using rule 47
	Let            reduce using rule 47
	varId          reduce using rule 47
	conId          reduce using rule 47
	eof            reduce using rule 47


State 15

	declaration -> decl_head . maybe_type_sig ';'       (rule 63)
	declaration -> decl_head . maybe_type_sig '=' exp ';'    (rule 64)
	declaration -> decl_head . '(' exp_args0 ')' maybe_type_sig ';'    (rule 65)

	':'            shift, and enter state 81
	';'            reduce using rule 67
	'='            reduce using rule 67
	'('            shift, and enter state 82

	maybe_type_sig goto state 79
	type_sig       goto state 80

State 16

	top_level_stmt -> function_defn .                   (rule 48)

	'~'            reduce using rule 48
	'}'            reduce using rule 48
	Operator       reduce using rule 48
	Inline         reduce using rule 48
	Recursive      reduce using rule 48
	Extern         reduce using rule 48
	Module         reduce using rule 48
	Import         reduce using rule 48
	Type           reduce using rule 48
	Alias          reduce using rule 48
	Class          reduce using rule 48
	Inst           reduce using rule 48
	Let            reduce using rule 48
	varId          reduce using rule 48
	conId          reduce using rule 48
	eof            reduce using rule 48


State 17

	function_defn -> function_decl . block              (rule 70)

	'{'            shift, and enter state 74

	block          goto state 78

State 18

	top_level_stmt -> function_extern .                 (rule 49)

	'~'            reduce using rule 49
	'}'            reduce using rule 49
	Operator       reduce using rule 49
	Inline         reduce using rule 49
	Recursive      reduce using rule 49
	Extern         reduce using rule 49
	Module         reduce using rule 49
	Import         reduce using rule 49
	Type           reduce using rule 49
	Alias          reduce using rule 49
	Class          reduce using rule 49
	Inst           reduce using rule 49
	Let            reduce using rule 49
	varId          reduce using rule 49
	conId          reduce using rule 49
	eof            reduce using rule 49


State 19

	function_decl -> maybe_func_specs . var_name maybe_scheme '(' parameters0 ')' maybe_type_sig    (rule 71)

	varId          shift, and enter state 4

	var_name       goto state 77
	var_id         goto state 3

State 20

	maybe_func_specs -> func_specs .                    (rule 74)

	varId          reduce using rule 74


State 21

	func_specs -> func_specs_list .                     (rule 75)

	varId          reduce using rule 75


State 22

	func_specs_list -> func_specs_list_r .              (rule 76)
	func_specs_list_r -> func_specs_list_r . func_spec    (rule 78)

	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	varId          reduce using rule 76

	func_spec      goto state 76

State 23

	func_specs_list_r -> func_spec .                    (rule 77)

	Inline         reduce using rule 77
	Recursive      reduce using rule 77
	varId          reduce using rule 77


State 24

	top_level_stmt -> constructor_defn .                (rule 50)

	'~'            reduce using rule 50
	'}'            reduce using rule 50
	Operator       reduce using rule 50
	Inline         reduce using rule 50
	Recursive      reduce using rule 50
	Extern         reduce using rule 50
	Module         reduce using rule 50
	Import         reduce using rule 50
	Type           reduce using rule 50
	Alias          reduce using rule 50
	Class          reduce using rule 50
	Inst           reduce using rule 50
	Let            reduce using rule 50
	varId          reduce using rule 50
	conId          reduce using rule 50
	eof            reduce using rule 50


State 25

	constructor_defn -> constructor_decl . block        (rule 87)

	'{'            shift, and enter state 74

	block          goto state 75

State 26

	top_level_stmt -> destructor_defn .                 (rule 51)

	'~'            reduce using rule 51
	'}'            reduce using rule 51
	Operator       reduce using rule 51
	Inline         reduce using rule 51
	Recursive      reduce using rule 51
	Extern         reduce using rule 51
	Module         reduce using rule 51
	Import         reduce using rule 51
	Type           reduce using rule 51
	Alias          reduce using rule 51
	Class          reduce using rule 51
	Inst           reduce using rule 51
	Let            reduce using rule 51
	varId          reduce using rule 51
	conId          reduce using rule 51
	eof            reduce using rule 51


State 27

	destructor_defn -> destructor_decl . block          (rule 89)

	'{'            shift, and enter state 74

	block          goto state 73

State 28

	top_level_stmt -> type_defn .                       (rule 52)

	'~'            reduce using rule 52
	'}'            reduce using rule 52
	Operator       reduce using rule 52
	Inline         reduce using rule 52
	Recursive      reduce using rule 52
	Extern         reduce using rule 52
	Module         reduce using rule 52
	Import         reduce using rule 52
	Type           reduce using rule 52
	Alias          reduce using rule 52
	Class          reduce using rule 52
	Inst           reduce using rule 52
	Let            reduce using rule 52
	varId          reduce using rule 52
	conId          reduce using rule 52
	eof            reduce using rule 52


State 29

	type_defn -> type_decl . type_defn_body             (rule 275)

	';'            shift, and enter state 71
	'{'            shift, and enter state 72

	type_defn_body goto state 70

State 30

	top_level_stmt -> alias_defn .                      (rule 53)

	'~'            reduce using rule 53
	'}'            reduce using rule 53
	Operator       reduce using rule 53
	Inline         reduce using rule 53
	Recursive      reduce using rule 53
	Extern         reduce using rule 53
	Module         reduce using rule 53
	Import         reduce using rule 53
	Type           reduce using rule 53
	Alias          reduce using rule 53
	Class          reduce using rule 53
	Inst           reduce using rule 53
	Let            reduce using rule 53
	varId          reduce using rule 53
	conId          reduce using rule 53
	eof            reduce using rule 53


State 31

	alias_defn -> alias_decl . '=' type ';'             (rule 303)

	'='            shift, and enter state 69


State 32

	top_level_stmt -> class_defn .                      (rule 54)

	'~'            reduce using rule 54
	'}'            reduce using rule 54
	Operator       reduce using rule 54
	Inline         reduce using rule 54
	Recursive      reduce using rule 54
	Extern         reduce using rule 54
	Module         reduce using rule 54
	Import         reduce using rule 54
	Type           reduce using rule 54
	Alias          reduce using rule 54
	Class          reduce using rule 54
	Inst           reduce using rule 54
	Let            reduce using rule 54
	varId          reduce using rule 54
	conId          reduce using rule 54
	eof            reduce using rule 54


State 33

	class_defn -> class_decl . class_body               (rule 305)

	'{'            shift, and enter state 68

	class_body     goto state 67

State 34

	top_level_stmt -> instance_defn .                   (rule 55)

	'~'            reduce using rule 55
	'}'            reduce using rule 55
	Operator       reduce using rule 55
	Inline         reduce using rule 55
	Recursive      reduce using rule 55
	Extern         reduce using rule 55
	Module         reduce using rule 55
	Import         reduce using rule 55
	Type           reduce using rule 55
	Alias          reduce using rule 55
	Class          reduce using rule 55
	Inst           reduce using rule 55
	Let            reduce using rule 55
	varId          reduce using rule 55
	conId          reduce using rule 55
	eof            reduce using rule 55


State 35

	instance_defn -> instance_decl . instance_body      (rule 315)

	'{'            shift, and enter state 66

	instance_body  goto state 65

State 36

	top_level_stmt -> operator_decl .                   (rule 56)

	'~'            reduce using rule 56
	'}'            reduce using rule 56
	Operator       reduce using rule 56
	Inline         reduce using rule 56
	Recursive      reduce using rule 56
	Extern         reduce using rule 56
	Module         reduce using rule 56
	Import         reduce using rule 56
	Type           reduce using rule 56
	Alias          reduce using rule 56
	Class          reduce using rule 56
	Inst           reduce using rule 56
	Let            reduce using rule 56
	varId          reduce using rule 56
	conId          reduce using rule 56
	eof            reduce using rule 56


State 37

	destructor_decl -> '~' . con_name '(' parameters0 ')'    (rule 90)

	conId          shift, and enter state 49

	con_name       goto state 64
	con_id         goto state 6

State 38

	operator_decl -> Operator . '(' fixity ',' integer ',' op_name_list ')' ';'    (rule 324)

	'('            shift, and enter state 63


State 39

	func_spec -> Inline .                               (rule 79)

	Inline         reduce using rule 79
	Recursive      reduce using rule 79
	varId          reduce using rule 79


State 40

	func_spec -> Recursive .                            (rule 80)

	Inline         reduce using rule 80
	Recursive      reduce using rule 80
	varId          reduce using rule 80


State 41

	function_extern -> Extern . var_name '(' parameters0 ')' type_sig ';'    (rule 72)

	varId          shift, and enter state 4

	var_name       goto state 62
	var_id         goto state 3

State 42

	module_defn -> Module . mod_path module_block       (rule 57)

	conId          shift, and enter state 49

	con_name       goto state 57
	mod_name       goto state 58
	con_id         goto state 6
	mod_path       goto state 61
	mod_path_r     goto state 60

State 43

	import_stmt -> Import . mod_path ';'                (rule 62)

	conId          shift, and enter state 49

	con_name       goto state 57
	mod_name       goto state 58
	con_id         goto state 6
	mod_path       goto state 59
	mod_path_r     goto state 60

State 44

	type_decl -> Type . con_name maybe_scheme type_parameters    (rule 276)

	conId          shift, and enter state 49

	con_name       goto state 56
	con_id         goto state 6

State 45

	alias_decl -> Alias . con_name maybe_scheme type_parameters    (rule 304)

	conId          shift, and enter state 49

	con_name       goto state 55
	con_id         goto state 6

State 46

	class_decl -> Class . con_name maybe_scheme type_parameters    (rule 306)

	conId          shift, and enter state 49

	con_name       goto state 54
	con_id         goto state 6

State 47

	instance_decl -> Inst . con_name maybe_scheme type_arguments    (rule 316)

	conId          shift, and enter state 49

	con_name       goto state 53
	con_id         goto state 6

State 48

	decl_head -> Let . name                             (rule 66)

	'('            shift, and enter state 52
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	name           goto state 50
	var_name       goto state 2
	con_name       goto state 51
	var_id         goto state 3
	con_id         goto state 6

State 49

	con_id -> conId .                                   (rule 14)

	backslash      reduce using rule 14
	'->'           reduce using rule 14
	':'            reduce using rule 14
	';'            reduce using rule 14
	','            reduce using rule 14
	'.'            reduce using rule 14
	'='            reduce using rule 14
	'~'            reduce using rule 14
	'*'            reduce using rule 14
	'&'            reduce using rule 14
	'&&'           reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'[]'           reduce using rule 14
	'['            reduce using rule 14
	']'            reduce using rule 14
	'{'            reduce using rule 14
	'}'            reduce using rule 14
	'<.>'          reduce using rule 14
	'<.'           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	As             reduce using rule 14
	opId           reduce using rule 14


State 50

	decl_head -> Let name .                             (rule 66)

	':'            reduce using rule 66
	';'            reduce using rule 66
	'='            reduce using rule 66
	'('            reduce using rule 66


State 51

	name -> con_name .                                  (rule 2)

	':'            reduce using rule 2
	';'            reduce using rule 2
	'='            reduce using rule 2
	'('            reduce using rule 2


State 52

	name -> '(' . op_name ')'                           (rule 3)

	opId           shift, and enter state 132

	op_name        goto state 247
	op_id          goto state 248

State 53

	instance_decl -> Inst con_name . maybe_scheme type_arguments    (rule 316)

	'('            reduce using rule 264
	'<'            shift, and enter state 174

	scheme         goto state 172
	maybe_scheme   goto state 246

State 54

	class_decl -> Class con_name . maybe_scheme type_parameters    (rule 306)

	'('            reduce using rule 264
	'<'            shift, and enter state 174

	scheme         goto state 172
	maybe_scheme   goto state 245

State 55

	alias_decl -> Alias con_name . maybe_scheme type_parameters    (rule 304)

	'('            reduce using rule 264
	'<'            shift, and enter state 174

	scheme         goto state 172
	maybe_scheme   goto state 244

State 56

	type_decl -> Type con_name . maybe_scheme type_parameters    (rule 276)

	'('            reduce using rule 264
	'<'            shift, and enter state 174

	scheme         goto state 172
	maybe_scheme   goto state 243

State 57

	mod_name -> con_name .                              (rule 12)

	';'            reduce using rule 12
	'.'            reduce using rule 12
	'{'            reduce using rule 12


State 58

	mod_path_r -> mod_name .                            (rule 60)

	';'            reduce using rule 60
	'.'            reduce using rule 60
	'{'            reduce using rule 60


State 59

	import_stmt -> Import mod_path . ';'                (rule 62)

	';'            shift, and enter state 242


State 60

	mod_path -> mod_path_r .                            (rule 59)
	mod_path_r -> mod_path_r . '.' mod_name             (rule 61)

	';'            reduce using rule 59
	'.'            shift, and enter state 241
	'{'            reduce using rule 59


State 61

	module_defn -> Module mod_path . module_block       (rule 57)

	'{'            shift, and enter state 240

	module_block   goto state 239

State 62

	function_extern -> Extern var_name . '(' parameters0 ')' type_sig ';'    (rule 72)

	'('            shift, and enter state 238


State 63

	operator_decl -> Operator '(' . fixity ',' integer ',' op_name_list ')' ';'    (rule 324)

	Prefix         shift, and enter state 233
	Infix          shift, and enter state 234
	Infixl         shift, and enter state 235
	Infixr         shift, and enter state 236
	Postfix        shift, and enter state 237

	fixity         goto state 232

State 64

	destructor_decl -> '~' con_name . '(' parameters0 ')'    (rule 90)

	'('            shift, and enter state 231


State 65

	instance_defn -> instance_decl instance_body .      (rule 315)

	'~'            reduce using rule 315
	'}'            reduce using rule 315
	Operator       reduce using rule 315
	Inline         reduce using rule 315
	Recursive      reduce using rule 315
	Extern         reduce using rule 315
	Module         reduce using rule 315
	Import         reduce using rule 315
	Type           reduce using rule 315
	Alias          reduce using rule 315
	Class          reduce using rule 315
	Inst           reduce using rule 315
	Let            reduce using rule 315
	varId          reduce using rule 315
	conId          reduce using rule 315
	eof            reduce using rule 315


State 66

	instance_body -> '{' . instance_method_list0 '}'    (rule 317)

	'}'            reduce using rule 319
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	varId          reduce using rule 73

	function_defn  goto state 226
	function_decl  goto state 17
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	instance_methodgoto state 227
	instance_method_list0goto state 228
	instance_method_listgoto state 229
	instance_method_list_rgoto state 230

State 67

	class_defn -> class_decl class_body .               (rule 305)

	'~'            reduce using rule 305
	'}'            reduce using rule 305
	Operator       reduce using rule 305
	Inline         reduce using rule 305
	Recursive      reduce using rule 305
	Extern         reduce using rule 305
	Module         reduce using rule 305
	Import         reduce using rule 305
	Type           reduce using rule 305
	Alias          reduce using rule 305
	Class          reduce using rule 305
	Inst           reduce using rule 305
	Let            reduce using rule 305
	varId          reduce using rule 305
	conId          reduce using rule 305
	eof            reduce using rule 305


State 68

	class_body -> '{' . class_method_list0 '}'          (rule 307)

	'}'            reduce using rule 310
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	varId          reduce using rule 73

	function_decl  goto state 221
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	class_method   goto state 222
	class_method_list0goto state 223
	class_method_listgoto state 224
	class_method_list_rgoto state 225

State 69

	alias_defn -> alias_decl '=' . type ';'             (rule 303)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 220
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 70

	type_defn -> type_decl type_defn_body .             (rule 275)

	'~'            reduce using rule 275
	'}'            reduce using rule 275
	Operator       reduce using rule 275
	Inline         reduce using rule 275
	Recursive      reduce using rule 275
	Extern         reduce using rule 275
	Module         reduce using rule 275
	Import         reduce using rule 275
	Type           reduce using rule 275
	Alias          reduce using rule 275
	Class          reduce using rule 275
	Inst           reduce using rule 275
	Let            reduce using rule 275
	varId          reduce using rule 275
	conId          reduce using rule 275
	eof            reduce using rule 275


State 71

	type_defn_body -> ';' .                             (rule 278)

	'~'            reduce using rule 278
	'}'            reduce using rule 278
	Operator       reduce using rule 278
	Inline         reduce using rule 278
	Recursive      reduce using rule 278
	Extern         reduce using rule 278
	Module         reduce using rule 278
	Import         reduce using rule 278
	Type           reduce using rule 278
	Alias          reduce using rule 278
	Class          reduce using rule 278
	Inst           reduce using rule 278
	Let            reduce using rule 278
	varId          reduce using rule 278
	conId          reduce using rule 278
	eof            reduce using rule 278


State 72

	type_defn_body -> '{' . data_defn_list0 '}'         (rule 277)

	'}'            reduce using rule 281
	conId          shift, and enter state 49

	con_name       goto state 215
	con_id         goto state 6
	data_defn      goto state 216
	data_defn_list0goto state 217
	data_defn_list goto state 218
	data_defn_list_rgoto state 219

State 73

	destructor_defn -> destructor_decl block .          (rule 89)

	'~'            reduce using rule 89
	'}'            reduce using rule 89
	Operator       reduce using rule 89
	Inline         reduce using rule 89
	Recursive      reduce using rule 89
	Extern         reduce using rule 89
	Module         reduce using rule 89
	Import         reduce using rule 89
	Type           reduce using rule 89
	Alias          reduce using rule 89
	Class          reduce using rule 89
	Inst           reduce using rule 89
	Let            reduce using rule 89
	varId          reduce using rule 89
	conId          reduce using rule 89
	eof            reduce using rule 89


State 74

	block -> '{' . '}'                                  (rule 113)
	block -> '{' . stmts '}'                            (rule 114)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'}'            shift, and enter state 202
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 175
	block          goto state 176
	stmts          goto state 177
	stmts_r        goto state 178
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 75

	constructor_defn -> constructor_decl block .        (rule 87)

	'~'            reduce using rule 87
	'}'            reduce using rule 87
	Operator       reduce using rule 87
	Inline         reduce using rule 87
	Recursive      reduce using rule 87
	Extern         reduce using rule 87
	Module         reduce using rule 87
	Import         reduce using rule 87
	Type           reduce using rule 87
	Alias          reduce using rule 87
	Class          reduce using rule 87
	Inst           reduce using rule 87
	Let            reduce using rule 87
	varId          reduce using rule 87
	conId          reduce using rule 87
	eof            reduce using rule 87


State 76

	func_specs_list_r -> func_specs_list_r func_spec .    (rule 78)

	Inline         reduce using rule 78
	Recursive      reduce using rule 78
	varId          reduce using rule 78


State 77

	function_decl -> maybe_func_specs var_name . maybe_scheme '(' parameters0 ')' maybe_type_sig    (rule 71)

	'('            reduce using rule 264
	'<'            shift, and enter state 174

	scheme         goto state 172
	maybe_scheme   goto state 173

State 78

	function_defn -> function_decl block .              (rule 70)

	'~'            reduce using rule 70
	'}'            reduce using rule 70
	Operator       reduce using rule 70
	Inline         reduce using rule 70
	Recursive      reduce using rule 70
	Extern         reduce using rule 70
	Module         reduce using rule 70
	Import         reduce using rule 70
	Type           reduce using rule 70
	Alias          reduce using rule 70
	Class          reduce using rule 70
	Inst           reduce using rule 70
	Let            reduce using rule 70
	varId          reduce using rule 70
	conId          reduce using rule 70
	eof            reduce using rule 70


State 79

	declaration -> decl_head maybe_type_sig . ';'       (rule 63)
	declaration -> decl_head maybe_type_sig . '=' exp ';'    (rule 64)

	';'            shift, and enter state 170
	'='            shift, and enter state 171


State 80

	maybe_type_sig -> type_sig .                        (rule 68)

	';'            reduce using rule 68
	','            reduce using rule 68
	'='            reduce using rule 68
	')'            reduce using rule 68
	'{'            reduce using rule 68


State 81

	type_sig -> ':' . type                              (rule 69)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 142
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 82

	declaration -> decl_head '(' . exp_args0 ')' maybe_type_sig ';'    (rule 65)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	')'            reduce using rule 211
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 98
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_args0      goto state 107
	exp_args       goto state 108
	exp_args_r     goto state 109
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 83

	top_level_stmts_r -> top_level_stmts_r top_level_stmt .    (rule 44)

	'~'            reduce using rule 44
	'}'            reduce using rule 44
	Operator       reduce using rule 44
	Inline         reduce using rule 44
	Recursive      reduce using rule 44
	Extern         reduce using rule 44
	Module         reduce using rule 44
	Import         reduce using rule 44
	Type           reduce using rule 44
	Alias          reduce using rule 44
	Class          reduce using rule 44
	Inst           reduce using rule 44
	Let            reduce using rule 44
	varId          reduce using rule 44
	conId          reduce using rule 44
	eof            reduce using rule 44


State 84

	top_level -> top_level_stmts0 eof .                 (rule 39)

	%eof           reduce using rule 39


State 85

	constructor_decl -> con_name '(' . parameters0 ')' maybe_init_list    (rule 88)

	')'            reduce using rule 81
	varId          shift, and enter state 4

	var_name       goto state 86
	var_id         goto state 3
	parameters0    goto state 87
	parameters     goto state 88
	parameters_list_rgoto state 89
	parameter      goto state 90

State 86

	parameter -> var_name . maybe_type_sig              (rule 86)

	':'            shift, and enter state 81
	','            reduce using rule 67
	')'            reduce using rule 67

	maybe_type_sig goto state 340
	type_sig       goto state 80

State 87

	constructor_decl -> con_name '(' parameters0 . ')' maybe_init_list    (rule 88)

	')'            shift, and enter state 339


State 88

	parameters0 -> parameters .                         (rule 82)

	')'            reduce using rule 82


State 89

	parameters -> parameters_list_r .                   (rule 83)
	parameters_list_r -> parameters_list_r . ',' parameter    (rule 85)

	','            shift, and enter state 338
	')'            reduce using rule 83


State 90

	parameters_list_r -> parameter .                    (rule 84)

	','            reduce using rule 84
	')'            reduce using rule 84


State 91

	exp_var -> var_name .                               (rule 204)

	backslash      reduce using rule 204
	'->'           reduce using rule 204
	':'            reduce using rule 204
	';'            reduce using rule 204
	','            reduce using rule 204
	'.'            reduce using rule 204
	'='            reduce using rule 204
	'~'            reduce using rule 204
	'*'            reduce using rule 204
	'&'            reduce using rule 204
	'&&'           reduce using rule 204
	'('            reduce using rule 204
	')'            reduce using rule 204
	'['            reduce using rule 204
	']'            reduce using rule 204
	'}'            reduce using rule 204
	'<.'           reduce using rule 204
	'<'            reduce using rule 204
	'>'            reduce using rule 204
	As             reduce using rule 204
	opId           reduce using rule 204


State 92

	exp_con -> con_name .                               (rule 205)

	backslash      reduce using rule 205
	'->'           reduce using rule 205
	':'            reduce using rule 205
	';'            reduce using rule 205
	','            reduce using rule 205
	'.'            reduce using rule 205
	'='            reduce using rule 205
	'~'            reduce using rule 205
	'*'            reduce using rule 205
	'&'            reduce using rule 205
	'&&'           reduce using rule 205
	'('            reduce using rule 205
	')'            reduce using rule 205
	'['            reduce using rule 205
	']'            reduce using rule 205
	'}'            reduce using rule 205
	'<.'           reduce using rule 205
	'<'            reduce using rule 205
	'>'            reduce using rule 205
	As             reduce using rule 205
	opId           reduce using rule 205


State 93

	bexpop(bexp) -> op_name_ext . aexpop(bexp)          (rule 344)

	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	var_id         goto state 3
	con_id         goto state 6
	prim_id        goto state 96
	value          goto state 97
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	aexpop(bexp)   goto state 337

State 94

	op_id_ext -> op_id .                                (rule 16)

	backslash      reduce using rule 16
	'->'           reduce using rule 16
	':'            reduce using rule 16
	';'            reduce using rule 16
	','            reduce using rule 16
	'='            reduce using rule 16
	'~'            reduce using rule 16
	'*'            reduce using rule 16
	'&'            reduce using rule 16
	'&&'           reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'[]'           reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	'<.>'          reduce using rule 16
	'<.'           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	VOID           reduce using rule 16
	I1             reduce using rule 16
	I8             reduce using rule 16
	I16            reduce using rule 16
	I32            reduce using rule 16
	I64            reduce using rule 16
	I128           reduce using rule 16
	Fp16           reduce using rule 16
	Fp32           reduce using rule 16
	Fp64           reduce using rule 16
	Fp128          reduce using rule 16
	New            reduce using rule 16
	Renew          reduce using rule 16
	Delete         reduce using rule 16
	As             reduce using rule 16
	Const          reduce using rule 16
	Null           reduce using rule 16
	varId          reduce using rule 16
	conId          reduce using rule 16
	opId           reduce using rule 16
	primId         reduce using rule 16
	integer        reduce using rule 16
	double         reduce using rule 16
	char           reduce using rule 16
	string         reduce using rule 16
	boolean        reduce using rule 16


State 95

	op_name_ext -> op_id_ext .                          (rule 11)

	backslash      reduce using rule 11
	'->'           reduce using rule 11
	':'            reduce using rule 11
	';'            reduce using rule 11
	','            reduce using rule 11
	'='            reduce using rule 11
	'~'            reduce using rule 11
	'*'            reduce using rule 11
	'&'            reduce using rule 11
	'&&'           reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'[]'           reduce using rule 11
	'['            reduce using rule 11
	']'            reduce using rule 11
	'{'            reduce using rule 11
	'}'            reduce using rule 11
	'<.>'          reduce using rule 11
	'<.'           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	VOID           reduce using rule 11
	I1             reduce using rule 11
	I8             reduce using rule 11
	I16            reduce using rule 11
	I32            reduce using rule 11
	I64            reduce using rule 11
	I128           reduce using rule 11
	Fp16           reduce using rule 11
	Fp32           reduce using rule 11
	Fp64           reduce using rule 11
	Fp128          reduce using rule 11
	New            reduce using rule 11
	Renew          reduce using rule 11
	Delete         reduce using rule 11
	As             reduce using rule 11
	Const          reduce using rule 11
	Null           reduce using rule 11
	varId          reduce using rule 11
	conId          reduce using rule 11
	opId           reduce using rule 11
	primId         reduce using rule 11
	integer        reduce using rule 11
	double         reduce using rule 11
	char           reduce using rule 11
	string         reduce using rule 11
	boolean        reduce using rule 11


State 96

	exp_instr -> prim_id . '(' exp ',' exp ')'          (rule 216)

	'('            shift, and enter state 336


State 97

	exp_value -> value .                                (rule 206)

	backslash      reduce using rule 206
	'->'           reduce using rule 206
	':'            reduce using rule 206
	';'            reduce using rule 206
	','            reduce using rule 206
	'.'            reduce using rule 206
	'='            reduce using rule 206
	'~'            reduce using rule 206
	'*'            reduce using rule 206
	'&'            reduce using rule 206
	'&&'           reduce using rule 206
	'('            reduce using rule 206
	')'            reduce using rule 206
	'['            reduce using rule 206
	']'            reduce using rule 206
	'}'            reduce using rule 206
	'<.'           reduce using rule 206
	'<'            reduce using rule 206
	'>'            reduce using rule 206
	As             reduce using rule 206
	opId           reduce using rule 206


State 98

	exp_args_r -> exp .                                 (rule 214)

	','            reduce using rule 214
	')'            reduce using rule 214
	']'            reduce using rule 214
	'>'            reduce using rule 214


State 99

	exp -> dexp .                                       (rule 185)

	';'            reduce using rule 185
	','            reduce using rule 185
	')'            reduce using rule 185
	']'            reduce using rule 185
	'}'            reduce using rule 185
	'>'            reduce using rule 185


State 100

	dexp -> cexp . type_sig                             (rule 186)
	dexp -> cexp . As type                              (rule 187)
	dexp -> cexp .                                      (rule 188)

	':'            shift, and enter state 81
	';'            reduce using rule 188
	','            reduce using rule 188
	')'            reduce using rule 188
	']'            reduce using rule 188
	'}'            reduce using rule 188
	'>'            reduce using rule 188
	As             shift, and enter state 335

	type_sig       goto state 334

State 101

	bexp -> bexp . arguments                            (rule 190)
	bexp -> bexp . '.' var_name                         (rule 191)
	bexp -> bexp . '->' var_name                        (rule 192)
	bexp -> bexp . '[' exp ']'                          (rule 193)
	bexp -> bexp . '<.' exp '>'                         (rule 194)
	aexpop(bexp) -> bexp . op_name_ext                  (rule 348)
	aexpop(bexp) -> bexp .                              (rule 349)

	backslash      shift, and enter state 115
			(reduce using rule 349)

	'->'           shift, and enter state 329
	':'            reduce using rule 349
	';'            reduce using rule 349
	','            reduce using rule 349
	'.'            shift, and enter state 330
	'='            shift, and enter state 116
			(reduce using rule 349)

	'~'            shift, and enter state 117
			(reduce using rule 349)

	'*'            shift, and enter state 118
			(reduce using rule 349)

	'&'            shift, and enter state 119
			(reduce using rule 349)

	'&&'           shift, and enter state 120
			(reduce using rule 349)

	'('            shift, and enter state 331
	')'            reduce using rule 349
	'['            shift, and enter state 332
	']'            reduce using rule 349
	'}'            reduce using rule 349
	'<.'           shift, and enter state 333
	'<'            shift, and enter state 126
			(reduce using rule 349)

	'>'            shift, and enter state 127
			(reduce using rule 349)

	As             reduce using rule 349
	opId           shift, and enter state 132
			(reduce using rule 349)


	op_name_ext    goto state 327
	op_id          goto state 94
	op_id_ext      goto state 95
	arguments      goto state 328

State 102

	bexp -> aexp .                                      (rule 198)

	backslash      reduce using rule 198
	'->'           reduce using rule 198
	':'            reduce using rule 198
	';'            reduce using rule 198
	','            reduce using rule 198
	'.'            reduce using rule 198
	'='            reduce using rule 198
	'~'            reduce using rule 198
	'*'            reduce using rule 198
	'&'            reduce using rule 198
	'&&'           reduce using rule 198
	'('            reduce using rule 198
	')'            reduce using rule 198
	'['            reduce using rule 198
	']'            reduce using rule 198
	'}'            reduce using rule 198
	'<.'           reduce using rule 198
	'<'            reduce using rule 198
	'>'            reduce using rule 198
	As             reduce using rule 198
	opId           reduce using rule 198


State 103

	aexp -> exp_var .                                   (rule 199)

	backslash      reduce using rule 199
	'->'           reduce using rule 199
	':'            reduce using rule 199
	';'            reduce using rule 199
	','            reduce using rule 199
	'.'            reduce using rule 199
	'='            reduce using rule 199
	'~'            reduce using rule 199
	'*'            reduce using rule 199
	'&'            reduce using rule 199
	'&&'           reduce using rule 199
	'('            reduce using rule 199
	')'            reduce using rule 199
	'['            reduce using rule 199
	']'            reduce using rule 199
	'}'            reduce using rule 199
	'<.'           reduce using rule 199
	'<'            reduce using rule 199
	'>'            reduce using rule 199
	As             reduce using rule 199
	opId           reduce using rule 199


State 104

	aexp -> exp_con .                                   (rule 200)

	backslash      reduce using rule 200
	'->'           reduce using rule 200
	':'            reduce using rule 200
	';'            reduce using rule 200
	','            reduce using rule 200
	'.'            reduce using rule 200
	'='            reduce using rule 200
	'~'            reduce using rule 200
	'*'            reduce using rule 200
	'&'            reduce using rule 200
	'&&'           reduce using rule 200
	'('            reduce using rule 200
	')'            reduce using rule 200
	'['            reduce using rule 200
	']'            reduce using rule 200
	'}'            reduce using rule 200
	'<.'           reduce using rule 200
	'<'            reduce using rule 200
	'>'            reduce using rule 200
	As             reduce using rule 200
	opId           reduce using rule 200


State 105

	aexp -> exp_value .                                 (rule 201)

	backslash      reduce using rule 201
	'->'           reduce using rule 201
	':'            reduce using rule 201
	';'            reduce using rule 201
	','            reduce using rule 201
	'.'            reduce using rule 201
	'='            reduce using rule 201
	'~'            reduce using rule 201
	'*'            reduce using rule 201
	'&'            reduce using rule 201
	'&&'           reduce using rule 201
	'('            reduce using rule 201
	')'            reduce using rule 201
	'['            reduce using rule 201
	']'            reduce using rule 201
	'}'            reduce using rule 201
	'<.'           reduce using rule 201
	'<'            reduce using rule 201
	'>'            reduce using rule 201
	As             reduce using rule 201
	opId           reduce using rule 201


State 106

	aexp -> exp_parens .                                (rule 203)

	backslash      reduce using rule 203
	'->'           reduce using rule 203
	':'            reduce using rule 203
	';'            reduce using rule 203
	','            reduce using rule 203
	'.'            reduce using rule 203
	'='            reduce using rule 203
	'~'            reduce using rule 203
	'*'            reduce using rule 203
	'&'            reduce using rule 203
	'&&'           reduce using rule 203
	'('            reduce using rule 203
	')'            reduce using rule 203
	'['            reduce using rule 203
	']'            reduce using rule 203
	'}'            reduce using rule 203
	'<.'           reduce using rule 203
	'<'            reduce using rule 203
	'>'            reduce using rule 203
	As             reduce using rule 203
	opId           reduce using rule 203


State 107

	declaration -> decl_head '(' exp_args0 . ')' maybe_type_sig ';'    (rule 65)

	')'            shift, and enter state 326


State 108

	exp_args0 -> exp_args .                             (rule 212)

	')'            reduce using rule 212
	']'            reduce using rule 212
	'>'            reduce using rule 212


State 109

	exp_args -> exp_args_r .                            (rule 213)
	exp_args_r -> exp_args_r . ',' exp                  (rule 215)

	','            shift, and enter state 325
	')'            reduce using rule 213
	']'            reduce using rule 213
	'>'            reduce using rule 213


State 110

	aexp -> exp_instr .                                 (rule 202)

	backslash      reduce using rule 202
	'->'           reduce using rule 202
	':'            reduce using rule 202
	';'            reduce using rule 202
	','            reduce using rule 202
	'.'            reduce using rule 202
	'='            reduce using rule 202
	'~'            reduce using rule 202
	'*'            reduce using rule 202
	'&'            reduce using rule 202
	'&&'           reduce using rule 202
	'('            reduce using rule 202
	')'            reduce using rule 202
	'['            reduce using rule 202
	']'            reduce using rule 202
	'}'            reduce using rule 202
	'<.'           reduce using rule 202
	'<'            reduce using rule 202
	'>'            reduce using rule 202
	As             reduce using rule 202
	opId           reduce using rule 202


State 111

	cexp -> exp_op(bexp) .                              (rule 189)

	':'            reduce using rule 189
	';'            reduce using rule 189
	','            reduce using rule 189
	')'            reduce using rule 189
	']'            reduce using rule 189
	'}'            reduce using rule 189
	'>'            reduce using rule 189
	As             reduce using rule 189


State 112

	exp_op(bexp) -> cexpop(bexp) .                      (rule 333)
	cexpop(bexp) -> cexpop(bexp) . op_name_ext bexpop(bexp)    (rule 341)

	backslash      shift, and enter state 115
	':'            reduce using rule 333
	';'            reduce using rule 333
	','            reduce using rule 333
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	')'            reduce using rule 333
	']'            reduce using rule 333
	'}'            reduce using rule 333
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
			(reduce using rule 333)

	As             reduce using rule 333
	opId           shift, and enter state 132

	op_name_ext    goto state 324
	op_id          goto state 94
	op_id_ext      goto state 95

State 113

	cexpop(bexp) -> bexpop(bexp) .                      (rule 340)

	backslash      reduce using rule 340
	':'            reduce using rule 340
	';'            reduce using rule 340
	','            reduce using rule 340
	'='            reduce using rule 340
	'~'            reduce using rule 340
	'*'            reduce using rule 340
	'&'            reduce using rule 340
	'&&'           reduce using rule 340
	')'            reduce using rule 340
	']'            reduce using rule 340
	'}'            reduce using rule 340
	'<'            reduce using rule 340
	'>'            reduce using rule 340
	As             reduce using rule 340
	opId           reduce using rule 340


State 114

	bexpop(bexp) -> aexpop(bexp) .                      (rule 345)

	backslash      reduce using rule 345
	':'            reduce using rule 345
	';'            reduce using rule 345
	','            reduce using rule 345
	'='            reduce using rule 345
	'~'            reduce using rule 345
	'*'            reduce using rule 345
	'&'            reduce using rule 345
	'&&'           reduce using rule 345
	')'            reduce using rule 345
	']'            reduce using rule 345
	'}'            reduce using rule 345
	'<'            reduce using rule 345
	'>'            reduce using rule 345
	As             reduce using rule 345
	opId           reduce using rule 345


State 115

	op_id_ext -> backslash .                            (rule 17)

	backslash      reduce using rule 17
	'->'           reduce using rule 17
	':'            reduce using rule 17
	';'            reduce using rule 17
	','            reduce using rule 17
	'='            reduce using rule 17
	'~'            reduce using rule 17
	'*'            reduce using rule 17
	'&'            reduce using rule 17
	'&&'           reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'[]'           reduce using rule 17
	'['            reduce using rule 17
	']'            reduce using rule 17
	'{'            reduce using rule 17
	'}'            reduce using rule 17
	'<.>'          reduce using rule 17
	'<.'           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	VOID           reduce using rule 17
	I1             reduce using rule 17
	I8             reduce using rule 17
	I16            reduce using rule 17
	I32            reduce using rule 17
	I64            reduce using rule 17
	I128           reduce using rule 17
	Fp16           reduce using rule 17
	Fp32           reduce using rule 17
	Fp64           reduce using rule 17
	Fp128          reduce using rule 17
	New            reduce using rule 17
	Renew          reduce using rule 17
	Delete         reduce using rule 17
	As             reduce using rule 17
	Const          reduce using rule 17
	Null           reduce using rule 17
	varId          reduce using rule 17
	conId          reduce using rule 17
	opId           reduce using rule 17
	primId         reduce using rule 17
	integer        reduce using rule 17
	double         reduce using rule 17
	char           reduce using rule 17
	string         reduce using rule 17
	boolean        reduce using rule 17


State 116

	op_id_ext -> '=' .                                  (rule 18)

	backslash      reduce using rule 18
	'->'           reduce using rule 18
	':'            reduce using rule 18
	';'            reduce using rule 18
	','            reduce using rule 18
	'='            reduce using rule 18
	'~'            reduce using rule 18
	'*'            reduce using rule 18
	'&'            reduce using rule 18
	'&&'           reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'[]'           reduce using rule 18
	'['            reduce using rule 18
	']'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	'<.>'          reduce using rule 18
	'<.'           reduce using rule 18
	'<'            reduce using rule 18
	'>'            reduce using rule 18
	VOID           reduce using rule 18
	I1             reduce using rule 18
	I8             reduce using rule 18
	I16            reduce using rule 18
	I32            reduce using rule 18
	I64            reduce using rule 18
	I128           reduce using rule 18
	Fp16           reduce using rule 18
	Fp32           reduce using rule 18
	Fp64           reduce using rule 18
	Fp128          reduce using rule 18
	New            reduce using rule 18
	Renew          reduce using rule 18
	Delete         reduce using rule 18
	As             reduce using rule 18
	Const          reduce using rule 18
	Null           reduce using rule 18
	varId          reduce using rule 18
	conId          reduce using rule 18
	opId           reduce using rule 18
	primId         reduce using rule 18
	integer        reduce using rule 18
	double         reduce using rule 18
	char           reduce using rule 18
	string         reduce using rule 18
	boolean        reduce using rule 18


State 117

	op_id_ext -> '~' .                                  (rule 19)

	backslash      reduce using rule 19
	'->'           reduce using rule 19
	':'            reduce using rule 19
	';'            reduce using rule 19
	','            reduce using rule 19
	'='            reduce using rule 19
	'~'            reduce using rule 19
	'*'            reduce using rule 19
	'&'            reduce using rule 19
	'&&'           reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'[]'           reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	'<.>'          reduce using rule 19
	'<.'           reduce using rule 19
	'<'            reduce using rule 19
	'>'            reduce using rule 19
	VOID           reduce using rule 19
	I1             reduce using rule 19
	I8             reduce using rule 19
	I16            reduce using rule 19
	I32            reduce using rule 19
	I64            reduce using rule 19
	I128           reduce using rule 19
	Fp16           reduce using rule 19
	Fp32           reduce using rule 19
	Fp64           reduce using rule 19
	Fp128          reduce using rule 19
	New            reduce using rule 19
	Renew          reduce using rule 19
	Delete         reduce using rule 19
	As             reduce using rule 19
	Const          reduce using rule 19
	Null           reduce using rule 19
	varId          reduce using rule 19
	conId          reduce using rule 19
	opId           reduce using rule 19
	primId         reduce using rule 19
	integer        reduce using rule 19
	double         reduce using rule 19
	char           reduce using rule 19
	string         reduce using rule 19
	boolean        reduce using rule 19


State 118

	op_id_ext -> '*' .                                  (rule 20)

	backslash      reduce using rule 20
	'->'           reduce using rule 20
	':'            reduce using rule 20
	';'            reduce using rule 20
	','            reduce using rule 20
	'='            reduce using rule 20
	'~'            reduce using rule 20
	'*'            reduce using rule 20
	'&'            reduce using rule 20
	'&&'           reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'[]'           reduce using rule 20
	'['            reduce using rule 20
	']'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	'<.>'          reduce using rule 20
	'<.'           reduce using rule 20
	'<'            reduce using rule 20
	'>'            reduce using rule 20
	VOID           reduce using rule 20
	I1             reduce using rule 20
	I8             reduce using rule 20
	I16            reduce using rule 20
	I32            reduce using rule 20
	I64            reduce using rule 20
	I128           reduce using rule 20
	Fp16           reduce using rule 20
	Fp32           reduce using rule 20
	Fp64           reduce using rule 20
	Fp128          reduce using rule 20
	New            reduce using rule 20
	Renew          reduce using rule 20
	Delete         reduce using rule 20
	As             reduce using rule 20
	Const          reduce using rule 20
	Null           reduce using rule 20
	varId          reduce using rule 20
	conId          reduce using rule 20
	opId           reduce using rule 20
	primId         reduce using rule 20
	integer        reduce using rule 20
	double         reduce using rule 20
	char           reduce using rule 20
	string         reduce using rule 20
	boolean        reduce using rule 20


State 119

	op_id_ext -> '&' .                                  (rule 21)

	backslash      reduce using rule 21
	'->'           reduce using rule 21
	':'            reduce using rule 21
	';'            reduce using rule 21
	','            reduce using rule 21
	'='            reduce using rule 21
	'~'            reduce using rule 21
	'*'            reduce using rule 21
	'&'            reduce using rule 21
	'&&'           reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'[]'           reduce using rule 21
	'['            reduce using rule 21
	']'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	'<.>'          reduce using rule 21
	'<.'           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	VOID           reduce using rule 21
	I1             reduce using rule 21
	I8             reduce using rule 21
	I16            reduce using rule 21
	I32            reduce using rule 21
	I64            reduce using rule 21
	I128           reduce using rule 21
	Fp16           reduce using rule 21
	Fp32           reduce using rule 21
	Fp64           reduce using rule 21
	Fp128          reduce using rule 21
	New            reduce using rule 21
	Renew          reduce using rule 21
	Delete         reduce using rule 21
	As             reduce using rule 21
	Const          reduce using rule 21
	Null           reduce using rule 21
	varId          reduce using rule 21
	conId          reduce using rule 21
	opId           reduce using rule 21
	primId         reduce using rule 21
	integer        reduce using rule 21
	double         reduce using rule 21
	char           reduce using rule 21
	string         reduce using rule 21
	boolean        reduce using rule 21


State 120

	op_id_ext -> '&&' .                                 (rule 22)

	backslash      reduce using rule 22
	'->'           reduce using rule 22
	':'            reduce using rule 22
	';'            reduce using rule 22
	','            reduce using rule 22
	'='            reduce using rule 22
	'~'            reduce using rule 22
	'*'            reduce using rule 22
	'&'            reduce using rule 22
	'&&'           reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'[]'           reduce using rule 22
	'['            reduce using rule 22
	']'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	'<.>'          reduce using rule 22
	'<.'           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	VOID           reduce using rule 22
	I1             reduce using rule 22
	I8             reduce using rule 22
	I16            reduce using rule 22
	I32            reduce using rule 22
	I64            reduce using rule 22
	I128           reduce using rule 22
	Fp16           reduce using rule 22
	Fp32           reduce using rule 22
	Fp64           reduce using rule 22
	Fp128          reduce using rule 22
	New            reduce using rule 22
	Renew          reduce using rule 22
	Delete         reduce using rule 22
	As             reduce using rule 22
	Const          reduce using rule 22
	Null           reduce using rule 22
	varId          reduce using rule 22
	conId          reduce using rule 22
	opId           reduce using rule 22
	primId         reduce using rule 22
	integer        reduce using rule 22
	double         reduce using rule 22
	char           reduce using rule 22
	string         reduce using rule 22
	boolean        reduce using rule 22


State 121

	exp_parens -> '(' . exp ')'                         (rule 207)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 323
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 122

	value -> '[]' .                                     (rule 31)

	backslash      reduce using rule 31
	'->'           reduce using rule 31
	':'            reduce using rule 31
	';'            reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	'='            reduce using rule 31
	'~'            reduce using rule 31
	'*'            reduce using rule 31
	'&'            reduce using rule 31
	'&&'           reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'['            reduce using rule 31
	']'            reduce using rule 31
	'}'            reduce using rule 31
	'<.'           reduce using rule 31
	'<'            reduce using rule 31
	'>'            reduce using rule 31
	As             reduce using rule 31
	opId           reduce using rule 31


State 123

	value -> '[' . exp_args0 ']'                        (rule 33)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	']'            reduce using rule 211
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 98
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_args0      goto state 322
	exp_args       goto state 108
	exp_args_r     goto state 109
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 124

	value -> '<.>' .                                    (rule 32)

	backslash      reduce using rule 32
	'->'           reduce using rule 32
	':'            reduce using rule 32
	';'            reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	'='            reduce using rule 32
	'~'            reduce using rule 32
	'*'            reduce using rule 32
	'&'            reduce using rule 32
	'&&'           reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	'}'            reduce using rule 32
	'<.'           reduce using rule 32
	'<'            reduce using rule 32
	'>'            reduce using rule 32
	As             reduce using rule 32
	opId           reduce using rule 32


State 125

	value -> '<.' . exp_args0 '>'                       (rule 34)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
			(reduce using rule 211)

	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 98
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_args0      goto state 321
	exp_args       goto state 108
	exp_args_r     goto state 109
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 126

	op_id_ext -> '<' .                                  (rule 23)

	backslash      reduce using rule 23
	'->'           reduce using rule 23
	':'            reduce using rule 23
	';'            reduce using rule 23
	','            reduce using rule 23
	'='            reduce using rule 23
	'~'            reduce using rule 23
	'*'            reduce using rule 23
	'&'            reduce using rule 23
	'&&'           reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'[]'           reduce using rule 23
	'['            reduce using rule 23
	']'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	'<.>'          reduce using rule 23
	'<.'           reduce using rule 23
	'<'            reduce using rule 23
	'>'            reduce using rule 23
	VOID           reduce using rule 23
	I1             reduce using rule 23
	I8             reduce using rule 23
	I16            reduce using rule 23
	I32            reduce using rule 23
	I64            reduce using rule 23
	I128           reduce using rule 23
	Fp16           reduce using rule 23
	Fp32           reduce using rule 23
	Fp64           reduce using rule 23
	Fp128          reduce using rule 23
	New            reduce using rule 23
	Renew          reduce using rule 23
	Delete         reduce using rule 23
	As             reduce using rule 23
	Const          reduce using rule 23
	Null           reduce using rule 23
	varId          reduce using rule 23
	conId          reduce using rule 23
	opId           reduce using rule 23
	primId         reduce using rule 23
	integer        reduce using rule 23
	double         reduce using rule 23
	char           reduce using rule 23
	string         reduce using rule 23
	boolean        reduce using rule 23


State 127

	op_id_ext -> '>' .                                  (rule 24)

	backslash      reduce using rule 24
	'->'           reduce using rule 24
	':'            reduce using rule 24
	';'            reduce using rule 24
	','            reduce using rule 24
	'='            reduce using rule 24
	'~'            reduce using rule 24
	'*'            reduce using rule 24
	'&'            reduce using rule 24
	'&&'           reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'[]'           reduce using rule 24
	'['            reduce using rule 24
	']'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	'<.>'          reduce using rule 24
	'<.'           reduce using rule 24
	'<'            reduce using rule 24
	'>'            reduce using rule 24
	VOID           reduce using rule 24
	I1             reduce using rule 24
	I8             reduce using rule 24
	I16            reduce using rule 24
	I32            reduce using rule 24
	I64            reduce using rule 24
	I128           reduce using rule 24
	Fp16           reduce using rule 24
	Fp32           reduce using rule 24
	Fp64           reduce using rule 24
	Fp128          reduce using rule 24
	New            reduce using rule 24
	Renew          reduce using rule 24
	Delete         reduce using rule 24
	As             reduce using rule 24
	Const          reduce using rule 24
	Null           reduce using rule 24
	varId          reduce using rule 24
	conId          reduce using rule 24
	opId           reduce using rule 24
	primId         reduce using rule 24
	integer        reduce using rule 24
	double         reduce using rule 24
	char           reduce using rule 24
	string         reduce using rule 24
	boolean        reduce using rule 24


State 128

	bexp -> New . aexp                                  (rule 195)

	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	var_id         goto state 3
	con_id         goto state 6
	prim_id        goto state 96
	value          goto state 97
	aexp           goto state 320
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110

State 129

	bexp -> Renew . aexp                                (rule 196)

	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	var_id         goto state 3
	con_id         goto state 6
	prim_id        goto state 96
	value          goto state 97
	aexp           goto state 319
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110

State 130

	bexp -> Delete . aexp                               (rule 197)

	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	var_id         goto state 3
	con_id         goto state 6
	prim_id        goto state 96
	value          goto state 97
	aexp           goto state 318
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110

State 131

	value -> Null .                                     (rule 26)

	backslash      reduce using rule 26
	'->'           reduce using rule 26
	':'            reduce using rule 26
	';'            reduce using rule 26
	','            reduce using rule 26
	'.'            reduce using rule 26
	'='            reduce using rule 26
	'~'            reduce using rule 26
	'*'            reduce using rule 26
	'&'            reduce using rule 26
	'&&'           reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	'}'            reduce using rule 26
	'<.'           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	As             reduce using rule 26
	opId           reduce using rule 26


State 132

	op_id -> opId .                                     (rule 15)

	backslash      reduce using rule 15
	'->'           reduce using rule 15
	':'            reduce using rule 15
	';'            reduce using rule 15
	','            reduce using rule 15
	'='            reduce using rule 15
	'~'            reduce using rule 15
	'*'            reduce using rule 15
	'&'            reduce using rule 15
	'&&'           reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'[]'           reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	'<.>'          reduce using rule 15
	'<.'           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	VOID           reduce using rule 15
	I1             reduce using rule 15
	I8             reduce using rule 15
	I16            reduce using rule 15
	I32            reduce using rule 15
	I64            reduce using rule 15
	I128           reduce using rule 15
	Fp16           reduce using rule 15
	Fp32           reduce using rule 15
	Fp64           reduce using rule 15
	Fp128          reduce using rule 15
	New            reduce using rule 15
	Renew          reduce using rule 15
	Delete         reduce using rule 15
	As             reduce using rule 15
	Const          reduce using rule 15
	Null           reduce using rule 15
	varId          reduce using rule 15
	conId          reduce using rule 15
	opId           reduce using rule 15
	primId         reduce using rule 15
	integer        reduce using rule 15
	double         reduce using rule 15
	char           reduce using rule 15
	string         reduce using rule 15
	boolean        reduce using rule 15


State 133

	prim_id -> primId .                                 (rule 25)

	'('            reduce using rule 25


State 134

	value -> integer .                                  (rule 28)

	backslash      reduce using rule 28
	'->'           reduce using rule 28
	':'            reduce using rule 28
	';'            reduce using rule 28
	','            reduce using rule 28
	'.'            reduce using rule 28
	'='            reduce using rule 28
	'~'            reduce using rule 28
	'*'            reduce using rule 28
	'&'            reduce using rule 28
	'&&'           reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'['            reduce using rule 28
	']'            reduce using rule 28
	'}'            reduce using rule 28
	'<.'           reduce using rule 28
	'<'            reduce using rule 28
	'>'            reduce using rule 28
	As             reduce using rule 28
	opId           reduce using rule 28


State 135

	value -> double .                                   (rule 29)

	backslash      reduce using rule 29
	'->'           reduce using rule 29
	':'            reduce using rule 29
	';'            reduce using rule 29
	','            reduce using rule 29
	'.'            reduce using rule 29
	'='            reduce using rule 29
	'~'            reduce using rule 29
	'*'            reduce using rule 29
	'&'            reduce using rule 29
	'&&'           reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'['            reduce using rule 29
	']'            reduce using rule 29
	'}'            reduce using rule 29
	'<.'           reduce using rule 29
	'<'            reduce using rule 29
	'>'            reduce using rule 29
	As             reduce using rule 29
	opId           reduce using rule 29


State 136

	value -> char .                                     (rule 30)

	backslash      reduce using rule 30
	'->'           reduce using rule 30
	':'            reduce using rule 30
	';'            reduce using rule 30
	','            reduce using rule 30
	'.'            reduce using rule 30
	'='            reduce using rule 30
	'~'            reduce using rule 30
	'*'            reduce using rule 30
	'&'            reduce using rule 30
	'&&'           reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'['            reduce using rule 30
	']'            reduce using rule 30
	'}'            reduce using rule 30
	'<.'           reduce using rule 30
	'<'            reduce using rule 30
	'>'            reduce using rule 30
	As             reduce using rule 30
	opId           reduce using rule 30


State 137

	value -> string .                                   (rule 35)

	backslash      reduce using rule 35
	'->'           reduce using rule 35
	':'            reduce using rule 35
	';'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	'='            reduce using rule 35
	'~'            reduce using rule 35
	'*'            reduce using rule 35
	'&'            reduce using rule 35
	'&&'           reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	'}'            reduce using rule 35
	'<.'           reduce using rule 35
	'<'            reduce using rule 35
	'>'            reduce using rule 35
	As             reduce using rule 35
	opId           reduce using rule 35


State 138

	value -> boolean .                                  (rule 27)

	backslash      reduce using rule 27
	'->'           reduce using rule 27
	':'            reduce using rule 27
	';'            reduce using rule 27
	','            reduce using rule 27
	'.'            reduce using rule 27
	'='            reduce using rule 27
	'~'            reduce using rule 27
	'*'            reduce using rule 27
	'&'            reduce using rule 27
	'&&'           reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'['            reduce using rule 27
	']'            reduce using rule 27
	'}'            reduce using rule 27
	'<.'           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	As             reduce using rule 27
	opId           reduce using rule 27


State 139

	atype -> var_name .                                 (rule 227)

	backslash      reduce using rule 227
	'->'           reduce using rule 227
	':'            reduce using rule 227
	';'            reduce using rule 227
	','            reduce using rule 227
	'='            reduce using rule 227
	'~'            reduce using rule 227
	'*'            reduce using rule 227
	'&'            reduce using rule 227
	'&&'           reduce using rule 227
	'('            reduce using rule 227
	')'            reduce using rule 227
	'[]'           reduce using rule 227
	'['            reduce using rule 227
	']'            reduce using rule 227
	'{'            reduce using rule 227
	'}'            reduce using rule 227
	'<.>'          reduce using rule 227
	'<.'           reduce using rule 227
	'<'            reduce using rule 227
	'>'            reduce using rule 227
	opId           reduce using rule 227


State 140

	atype -> con_name .                                 (rule 228)

	backslash      reduce using rule 228
	'->'           reduce using rule 228
	':'            reduce using rule 228
	';'            reduce using rule 228
	','            reduce using rule 228
	'='            reduce using rule 228
	'~'            reduce using rule 228
	'*'            reduce using rule 228
	'&'            reduce using rule 228
	'&&'           reduce using rule 228
	'('            reduce using rule 228
	')'            reduce using rule 228
	'[]'           reduce using rule 228
	'['            reduce using rule 228
	']'            reduce using rule 228
	'{'            reduce using rule 228
	'}'            reduce using rule 228
	'<.>'          reduce using rule 228
	'<.'           reduce using rule 228
	'<'            reduce using rule 228
	'>'            reduce using rule 228
	opId           reduce using rule 228


State 141

	btyop(btype) -> op_name_ext . atyop(btype)          (rule 346)

	'('            shift, and enter state 157
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 139
	con_name       goto state 140
	var_id         goto state 3
	con_id         goto state 6
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	atyop(btype)   goto state 317

State 142

	type_sig -> ':' type .                              (rule 69)

	';'            reduce using rule 69
	','            reduce using rule 69
	'='            reduce using rule 69
	')'            reduce using rule 69
	']'            reduce using rule 69
	'{'            reduce using rule 69
	'}'            reduce using rule 69
	'>'            reduce using rule 69


State 143

	type -> etype .                                     (rule 217)

	';'            reduce using rule 217
	','            reduce using rule 217
	'='            reduce using rule 217
	')'            reduce using rule 217
	']'            reduce using rule 217
	'{'            reduce using rule 217
	'}'            reduce using rule 217
	'>'            reduce using rule 217


State 144

	etype -> ctype .                                    (rule 218)
	etype -> ctype . kind_sig                           (rule 219)
	ctype -> ctype . '->' type_op(btype)                (rule 220)

	'->'           shift, and enter state 315
	':'            shift, and enter state 316
	';'            reduce using rule 218
	','            reduce using rule 218
	'='            reduce using rule 218
	')'            reduce using rule 218
	']'            reduce using rule 218
	'{'            reduce using rule 218
	'}'            reduce using rule 218
	'>'            reduce using rule 218

	kind_sig       goto state 314

State 145

	type_con_array(btype) -> btype . '[]'               (rule 334)
	type_con_array(btype) -> btype . '[' exp ']'        (rule 335)
	type_con_vector(btype) -> btype . '<.>'             (rule 337)
	type_con_vector(btype) -> btype . '<.' exp '>'      (rule 338)
	atyop(btype) -> btype . op_name_ext                 (rule 350)
	atyop(btype) -> btype .                             (rule 351)

	backslash      shift, and enter state 115
			(reduce using rule 351)

	'->'           reduce using rule 351
	':'            reduce using rule 351
	';'            reduce using rule 351
	','            reduce using rule 351
	'='            shift, and enter state 116
			(reduce using rule 351)

	'~'            shift, and enter state 117
			(reduce using rule 351)

	'*'            shift, and enter state 118
			(reduce using rule 351)

	'&'            shift, and enter state 119
			(reduce using rule 351)

	'&&'           shift, and enter state 120
			(reduce using rule 351)

	')'            reduce using rule 351
	'[]'           shift, and enter state 310
	'['            shift, and enter state 311
	']'            reduce using rule 351
	'{'            reduce using rule 351
	'}'            reduce using rule 351
	'<.>'          shift, and enter state 312
	'<.'           shift, and enter state 313
	'<'            shift, and enter state 126
			(reduce using rule 351)

	'>'            shift, and enter state 127
			(reduce using rule 351)

	opId           shift, and enter state 132
			(reduce using rule 351)


	op_name_ext    goto state 309
	op_id          goto state 94
	op_id_ext      goto state 95

State 146

	btype -> atype . maybe_scheme type_arguments        (rule 225)
	btype -> atype .                                    (rule 226)

	backslash      reduce using rule 226
	'->'           reduce using rule 226
	':'            reduce using rule 226
	';'            reduce using rule 226
	','            reduce using rule 226
	'='            reduce using rule 226
	'~'            reduce using rule 226
	'*'            reduce using rule 226
	'&'            reduce using rule 226
	'&&'           reduce using rule 226
	'('            reduce using rule 264
	')'            reduce using rule 226
	'[]'           reduce using rule 226
	'['            reduce using rule 226
	']'            reduce using rule 226
	'{'            reduce using rule 226
	'}'            reduce using rule 226
	'<.>'          reduce using rule 226
	'<.'           reduce using rule 226
	'<'            shift, and enter state 174
			(reduce using rule 226)

	'>'            reduce using rule 226
	opId           reduce using rule 226

	scheme         goto state 172
	maybe_scheme   goto state 308

State 147

	atype -> type_con_void .                            (rule 229)

	backslash      reduce using rule 229
	'->'           reduce using rule 229
	':'            reduce using rule 229
	';'            reduce using rule 229
	','            reduce using rule 229
	'='            reduce using rule 229
	'~'            reduce using rule 229
	'*'            reduce using rule 229
	'&'            reduce using rule 229
	'&&'           reduce using rule 229
	'('            reduce using rule 229
	')'            reduce using rule 229
	'[]'           reduce using rule 229
	'['            reduce using rule 229
	']'            reduce using rule 229
	'{'            reduce using rule 229
	'}'            reduce using rule 229
	'<.>'          reduce using rule 229
	'<.'           reduce using rule 229
	'<'            reduce using rule 229
	'>'            reduce using rule 229
	opId           reduce using rule 229


State 148

	atype -> type_con_int .                             (rule 230)

	backslash      reduce using rule 230
	'->'           reduce using rule 230
	':'            reduce using rule 230
	';'            reduce using rule 230
	','            reduce using rule 230
	'='            reduce using rule 230
	'~'            reduce using rule 230
	'*'            reduce using rule 230
	'&'            reduce using rule 230
	'&&'           reduce using rule 230
	'('            reduce using rule 230
	')'            reduce using rule 230
	'[]'           reduce using rule 230
	'['            reduce using rule 230
	']'            reduce using rule 230
	'{'            reduce using rule 230
	'}'            reduce using rule 230
	'<.>'          reduce using rule 230
	'<.'           reduce using rule 230
	'<'            reduce using rule 230
	'>'            reduce using rule 230
	opId           reduce using rule 230


State 149

	atype -> type_con_fp .                              (rule 231)

	backslash      reduce using rule 231
	'->'           reduce using rule 231
	':'            reduce using rule 231
	';'            reduce using rule 231
	','            reduce using rule 231
	'='            reduce using rule 231
	'~'            reduce using rule 231
	'*'            reduce using rule 231
	'&'            reduce using rule 231
	'&&'           reduce using rule 231
	'('            reduce using rule 231
	')'            reduce using rule 231
	'[]'           reduce using rule 231
	'['            reduce using rule 231
	']'            reduce using rule 231
	'{'            reduce using rule 231
	'}'            reduce using rule 231
	'<.>'          reduce using rule 231
	'<.'           reduce using rule 231
	'<'            reduce using rule 231
	'>'            reduce using rule 231
	opId           reduce using rule 231


State 150

	btype -> type_con_array(btype) .                    (rule 223)

	backslash      reduce using rule 223
	'->'           reduce using rule 223
	':'            reduce using rule 223
	';'            reduce using rule 223
	','            reduce using rule 223
	'='            reduce using rule 223
	'~'            reduce using rule 223
	'*'            reduce using rule 223
	'&'            reduce using rule 223
	'&&'           reduce using rule 223
	')'            reduce using rule 223
	'[]'           reduce using rule 223
	'['            reduce using rule 223
	']'            reduce using rule 223
	'{'            reduce using rule 223
	'}'            reduce using rule 223
	'<.>'          reduce using rule 223
	'<.'           reduce using rule 223
	'<'            reduce using rule 223
	'>'            reduce using rule 223
	opId           reduce using rule 223


State 151

	btype -> type_con_const(btype) .                    (rule 222)

	backslash      reduce using rule 222
	'->'           reduce using rule 222
	':'            reduce using rule 222
	';'            reduce using rule 222
	','            reduce using rule 222
	'='            reduce using rule 222
	'~'            reduce using rule 222
	'*'            reduce using rule 222
	'&'            reduce using rule 222
	'&&'           reduce using rule 222
	')'            reduce using rule 222
	'[]'           reduce using rule 222
	'['            reduce using rule 222
	']'            reduce using rule 222
	'{'            reduce using rule 222
	'}'            reduce using rule 222
	'<.>'          reduce using rule 222
	'<.'           reduce using rule 222
	'<'            reduce using rule 222
	'>'            reduce using rule 222
	opId           reduce using rule 222


State 152

	btype -> type_con_vector(btype) .                   (rule 224)

	backslash      reduce using rule 224
	'->'           reduce using rule 224
	':'            reduce using rule 224
	';'            reduce using rule 224
	','            reduce using rule 224
	'='            reduce using rule 224
	'~'            reduce using rule 224
	'*'            reduce using rule 224
	'&'            reduce using rule 224
	'&&'           reduce using rule 224
	')'            reduce using rule 224
	'[]'           reduce using rule 224
	'['            reduce using rule 224
	']'            reduce using rule 224
	'{'            reduce using rule 224
	'}'            reduce using rule 224
	'<.>'          reduce using rule 224
	'<.'           reduce using rule 224
	'<'            reduce using rule 224
	'>'            reduce using rule 224
	opId           reduce using rule 224


State 153

	ctype -> type_op(btype) .                           (rule 221)

	'->'           reduce using rule 221
	':'            reduce using rule 221
	';'            reduce using rule 221
	','            reduce using rule 221
	'='            reduce using rule 221
	')'            reduce using rule 221
	']'            reduce using rule 221
	'{'            reduce using rule 221
	'}'            reduce using rule 221
	'>'            reduce using rule 221


State 154

	type_op(btype) -> ctyop(btype) .                    (rule 339)
	ctyop(btype) -> ctyop(btype) . op_name_ext btyop(btype)    (rule 343)

	backslash      shift, and enter state 115
	'->'           reduce using rule 339
	':'            reduce using rule 339
	';'            reduce using rule 339
	','            reduce using rule 339
	'='            shift, and enter state 116
			(reduce using rule 339)

	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	')'            reduce using rule 339
	']'            reduce using rule 339
	'{'            reduce using rule 339
	'}'            reduce using rule 339
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
			(reduce using rule 339)

	opId           shift, and enter state 132

	op_name_ext    goto state 307
	op_id          goto state 94
	op_id_ext      goto state 95

State 155

	ctyop(btype) -> btyop(btype) .                      (rule 342)

	backslash      reduce using rule 342
	'->'           reduce using rule 342
	':'            reduce using rule 342
	';'            reduce using rule 342
	','            reduce using rule 342
	'='            reduce using rule 342
	'~'            reduce using rule 342
	'*'            reduce using rule 342
	'&'            reduce using rule 342
	'&&'           reduce using rule 342
	')'            reduce using rule 342
	']'            reduce using rule 342
	'{'            reduce using rule 342
	'}'            reduce using rule 342
	'<'            reduce using rule 342
	'>'            reduce using rule 342
	opId           reduce using rule 342


State 156

	btyop(btype) -> atyop(btype) .                      (rule 347)

	backslash      reduce using rule 347
	'->'           reduce using rule 347
	':'            reduce using rule 347
	';'            reduce using rule 347
	','            reduce using rule 347
	'='            reduce using rule 347
	'~'            reduce using rule 347
	'*'            reduce using rule 347
	'&'            reduce using rule 347
	'&&'           reduce using rule 347
	')'            reduce using rule 347
	']'            reduce using rule 347
	'{'            reduce using rule 347
	'}'            reduce using rule 347
	'<'            reduce using rule 347
	'>'            reduce using rule 347
	opId           reduce using rule 347


State 157

	atype -> '(' . type ')'                             (rule 232)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 306
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 158

	type_con_void -> VOID .                             (rule 246)

	backslash      reduce using rule 246
	'->'           reduce using rule 246
	':'            reduce using rule 246
	';'            reduce using rule 246
	','            reduce using rule 246
	'='            reduce using rule 246
	'~'            reduce using rule 246
	'*'            reduce using rule 246
	'&'            reduce using rule 246
	'&&'           reduce using rule 246
	'('            reduce using rule 246
	')'            reduce using rule 246
	'[]'           reduce using rule 246
	'['            reduce using rule 246
	']'            reduce using rule 246
	'{'            reduce using rule 246
	'}'            reduce using rule 246
	'<.>'          reduce using rule 246
	'<.'           reduce using rule 246
	'<'            reduce using rule 246
	'>'            reduce using rule 246
	opId           reduce using rule 246


State 159

	type_con_int -> I1 .                                (rule 247)

	backslash      reduce using rule 247
	'->'           reduce using rule 247
	':'            reduce using rule 247
	';'            reduce using rule 247
	','            reduce using rule 247
	'='            reduce using rule 247
	'~'            reduce using rule 247
	'*'            reduce using rule 247
	'&'            reduce using rule 247
	'&&'           reduce using rule 247
	'('            reduce using rule 247
	')'            reduce using rule 247
	'[]'           reduce using rule 247
	'['            reduce using rule 247
	']'            reduce using rule 247
	'{'            reduce using rule 247
	'}'            reduce using rule 247
	'<.>'          reduce using rule 247
	'<.'           reduce using rule 247
	'<'            reduce using rule 247
	'>'            reduce using rule 247
	opId           reduce using rule 247


State 160

	type_con_int -> I8 .                                (rule 248)

	backslash      reduce using rule 248
	'->'           reduce using rule 248
	':'            reduce using rule 248
	';'            reduce using rule 248
	','            reduce using rule 248
	'='            reduce using rule 248
	'~'            reduce using rule 248
	'*'            reduce using rule 248
	'&'            reduce using rule 248
	'&&'           reduce using rule 248
	'('            reduce using rule 248
	')'            reduce using rule 248
	'[]'           reduce using rule 248
	'['            reduce using rule 248
	']'            reduce using rule 248
	'{'            reduce using rule 248
	'}'            reduce using rule 248
	'<.>'          reduce using rule 248
	'<.'           reduce using rule 248
	'<'            reduce using rule 248
	'>'            reduce using rule 248
	opId           reduce using rule 248


State 161

	type_con_int -> I16 .                               (rule 249)

	backslash      reduce using rule 249
	'->'           reduce using rule 249
	':'            reduce using rule 249
	';'            reduce using rule 249
	','            reduce using rule 249
	'='            reduce using rule 249
	'~'            reduce using rule 249
	'*'            reduce using rule 249
	'&'            reduce using rule 249
	'&&'           reduce using rule 249
	'('            reduce using rule 249
	')'            reduce using rule 249
	'[]'           reduce using rule 249
	'['            reduce using rule 249
	']'            reduce using rule 249
	'{'            reduce using rule 249
	'}'            reduce using rule 249
	'<.>'          reduce using rule 249
	'<.'           reduce using rule 249
	'<'            reduce using rule 249
	'>'            reduce using rule 249
	opId           reduce using rule 249


State 162

	type_con_int -> I32 .                               (rule 250)

	backslash      reduce using rule 250
	'->'           reduce using rule 250
	':'            reduce using rule 250
	';'            reduce using rule 250
	','            reduce using rule 250
	'='            reduce using rule 250
	'~'            reduce using rule 250
	'*'            reduce using rule 250
	'&'            reduce using rule 250
	'&&'           reduce using rule 250
	'('            reduce using rule 250
	')'            reduce using rule 250
	'[]'           reduce using rule 250
	'['            reduce using rule 250
	']'            reduce using rule 250
	'{'            reduce using rule 250
	'}'            reduce using rule 250
	'<.>'          reduce using rule 250
	'<.'           reduce using rule 250
	'<'            reduce using rule 250
	'>'            reduce using rule 250
	opId           reduce using rule 250


State 163

	type_con_int -> I64 .                               (rule 251)

	backslash      reduce using rule 251
	'->'           reduce using rule 251
	':'            reduce using rule 251
	';'            reduce using rule 251
	','            reduce using rule 251
	'='            reduce using rule 251
	'~'            reduce using rule 251
	'*'            reduce using rule 251
	'&'            reduce using rule 251
	'&&'           reduce using rule 251
	'('            reduce using rule 251
	')'            reduce using rule 251
	'[]'           reduce using rule 251
	'['            reduce using rule 251
	']'            reduce using rule 251
	'{'            reduce using rule 251
	'}'            reduce using rule 251
	'<.>'          reduce using rule 251
	'<.'           reduce using rule 251
	'<'            reduce using rule 251
	'>'            reduce using rule 251
	opId           reduce using rule 251


State 164

	type_con_int -> I128 .                              (rule 252)

	backslash      reduce using rule 252
	'->'           reduce using rule 252
	':'            reduce using rule 252
	';'            reduce using rule 252
	','            reduce using rule 252
	'='            reduce using rule 252
	'~'            reduce using rule 252
	'*'            reduce using rule 252
	'&'            reduce using rule 252
	'&&'           reduce using rule 252
	'('            reduce using rule 252
	')'            reduce using rule 252
	'[]'           reduce using rule 252
	'['            reduce using rule 252
	']'            reduce using rule 252
	'{'            reduce using rule 252
	'}'            reduce using rule 252
	'<.>'          reduce using rule 252
	'<.'           reduce using rule 252
	'<'            reduce using rule 252
	'>'            reduce using rule 252
	opId           reduce using rule 252


State 165

	type_con_fp -> Fp16 .                               (rule 253)

	backslash      reduce using rule 253
	'->'           reduce using rule 253
	':'            reduce using rule 253
	';'            reduce using rule 253
	','            reduce using rule 253
	'='            reduce using rule 253
	'~'            reduce using rule 253
	'*'            reduce using rule 253
	'&'            reduce using rule 253
	'&&'           reduce using rule 253
	'('            reduce using rule 253
	')'            reduce using rule 253
	'[]'           reduce using rule 253
	'['            reduce using rule 253
	']'            reduce using rule 253
	'{'            reduce using rule 253
	'}'            reduce using rule 253
	'<.>'          reduce using rule 253
	'<.'           reduce using rule 253
	'<'            reduce using rule 253
	'>'            reduce using rule 253
	opId           reduce using rule 253


State 166

	type_con_fp -> Fp32 .                               (rule 254)

	backslash      reduce using rule 254
	'->'           reduce using rule 254
	':'            reduce using rule 254
	';'            reduce using rule 254
	','            reduce using rule 254
	'='            reduce using rule 254
	'~'            reduce using rule 254
	'*'            reduce using rule 254
	'&'            reduce using rule 254
	'&&'           reduce using rule 254
	'('            reduce using rule 254
	')'            reduce using rule 254
	'[]'           reduce using rule 254
	'['            reduce using rule 254
	']'            reduce using rule 254
	'{'            reduce using rule 254
	'}'            reduce using rule 254
	'<.>'          reduce using rule 254
	'<.'           reduce using rule 254
	'<'            reduce using rule 254
	'>'            reduce using rule 254
	opId           reduce using rule 254


State 167

	type_con_fp -> Fp64 .                               (rule 255)

	backslash      reduce using rule 255
	'->'           reduce using rule 255
	':'            reduce using rule 255
	';'            reduce using rule 255
	','            reduce using rule 255
	'='            reduce using rule 255
	'~'            reduce using rule 255
	'*'            reduce using rule 255
	'&'            reduce using rule 255
	'&&'           reduce using rule 255
	'('            reduce using rule 255
	')'            reduce using rule 255
	'[]'           reduce using rule 255
	'['            reduce using rule 255
	']'            reduce using rule 255
	'{'            reduce using rule 255
	'}'            reduce using rule 255
	'<.>'          reduce using rule 255
	'<.'           reduce using rule 255
	'<'            reduce using rule 255
	'>'            reduce using rule 255
	opId           reduce using rule 255


State 168

	type_con_fp -> Fp128 .                              (rule 256)

	backslash      reduce using rule 256
	'->'           reduce using rule 256
	':'            reduce using rule 256
	';'            reduce using rule 256
	','            reduce using rule 256
	'='            reduce using rule 256
	'~'            reduce using rule 256
	'*'            reduce using rule 256
	'&'            reduce using rule 256
	'&&'           reduce using rule 256
	'('            reduce using rule 256
	')'            reduce using rule 256
	'[]'           reduce using rule 256
	'['            reduce using rule 256
	']'            reduce using rule 256
	'{'            reduce using rule 256
	'}'            reduce using rule 256
	'<.>'          reduce using rule 256
	'<.'           reduce using rule 256
	'<'            reduce using rule 256
	'>'            reduce using rule 256
	opId           reduce using rule 256


State 169

	type_con_const(btype) -> Const . btype              (rule 336)

	'('            shift, and enter state 157
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 139
	con_name       goto state 140
	var_id         goto state 3
	con_id         goto state 6
	btype          goto state 305
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152

State 170

	declaration -> decl_head maybe_type_sig ';' .       (rule 63)

	backslash      reduce using rule 63
	';'            reduce using rule 63
	'='            reduce using rule 63
	'_'            reduce using rule 63
	'~'            reduce using rule 63
	'*'            reduce using rule 63
	'&'            reduce using rule 63
	'&&'           reduce using rule 63
	'('            reduce using rule 63
	'[]'           reduce using rule 63
	'['            reduce using rule 63
	'{'            reduce using rule 63
	'}'            reduce using rule 63
	'<.>'          reduce using rule 63
	'<.'           reduce using rule 63
	'<'            reduce using rule 63
	'>'            reduce using rule 63
	Operator       reduce using rule 63
	Static         reduce using rule 63
	Inline         reduce using rule 63
	Recursive      reduce using rule 63
	Extern         reduce using rule 63
	New            reduce using rule 63
	Renew          reduce using rule 63
	Delete         reduce using rule 63
	Module         reduce using rule 63
	Import         reduce using rule 63
	Type           reduce using rule 63
	Alias          reduce using rule 63
	Class          reduce using rule 63
	Inst           reduce using rule 63
	Let            reduce using rule 63
	If             reduce using rule 63
	Else           reduce using rule 63
	Elif           reduce using rule 63
	Case           reduce using rule 63
	Try            reduce using rule 63
	Catch          reduce using rule 63
	Finally        reduce using rule 63
	Throw          reduce using rule 63
	Return         reduce using rule 63
	Break          reduce using rule 63
	Continue       reduce using rule 63
	With           reduce using rule 63
	Do             reduce using rule 63
	While          reduce using rule 63
	For            reduce using rule 63
	Null           reduce using rule 63
	varId          reduce using rule 63
	conId          reduce using rule 63
	opId           reduce using rule 63
	primId         reduce using rule 63
	integer        reduce using rule 63
	double         reduce using rule 63
	char           reduce using rule 63
	string         reduce using rule 63
	boolean        reduce using rule 63
	eof            reduce using rule 63


State 171

	declaration -> decl_head maybe_type_sig '=' . exp ';'    (rule 64)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 304
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 172

	maybe_scheme -> scheme .                            (rule 265)

	'('            reduce using rule 265


State 173

	function_decl -> maybe_func_specs var_name maybe_scheme . '(' parameters0 ')' maybe_type_sig    (rule 71)

	'('            shift, and enter state 303


State 174

	scheme -> '<' . pred_list0 '>'                      (rule 263)

	'>'            reduce using rule 270
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 295
	con_name       goto state 296
	var_id         goto state 3
	con_id         goto state 6
	pred           goto state 297
	pred_forall    goto state 298
	pred_isIn      goto state 299
	pred_list0     goto state 300
	pred_list      goto state 301
	pred_list_r    goto state 302

State 175

	stmts_r -> stmt .                                   (rule 116)

	backslash      reduce using rule 116
	';'            reduce using rule 116
	'='            reduce using rule 116
	'~'            reduce using rule 116
	'*'            reduce using rule 116
	'&'            reduce using rule 116
	'&&'           reduce using rule 116
	'('            reduce using rule 116
	'[]'           reduce using rule 116
	'['            reduce using rule 116
	'{'            reduce using rule 116
	'}'            reduce using rule 116
	'<.>'          reduce using rule 116
	'<.'           reduce using rule 116
	'<'            reduce using rule 116
	'>'            reduce using rule 116
	Static         reduce using rule 116
	New            reduce using rule 116
	Renew          reduce using rule 116
	Delete         reduce using rule 116
	Let            reduce using rule 116
	If             reduce using rule 116
	Case           reduce using rule 116
	Try            reduce using rule 116
	Throw          reduce using rule 116
	Return         reduce using rule 116
	Break          reduce using rule 116
	Continue       reduce using rule 116
	With           reduce using rule 116
	Do             reduce using rule 116
	While          reduce using rule 116
	For            reduce using rule 116
	Null           reduce using rule 116
	varId          reduce using rule 116
	conId          reduce using rule 116
	opId           reduce using rule 116
	primId         reduce using rule 116
	integer        reduce using rule 116
	double         reduce using rule 116
	char           reduce using rule 116
	string         reduce using rule 116
	boolean        reduce using rule 116


State 176

	stmt_block -> block .                               (rule 128)

	backslash      reduce using rule 128
	';'            reduce using rule 128
	'='            reduce using rule 128
	'_'            reduce using rule 128
	'~'            reduce using rule 128
	'*'            reduce using rule 128
	'&'            reduce using rule 128
	'&&'           reduce using rule 128
	'('            reduce using rule 128
	'[]'           reduce using rule 128
	'['            reduce using rule 128
	'{'            reduce using rule 128
	'}'            reduce using rule 128
	'<.>'          reduce using rule 128
	'<.'           reduce using rule 128
	'<'            reduce using rule 128
	'>'            reduce using rule 128
	Static         reduce using rule 128
	New            reduce using rule 128
	Renew          reduce using rule 128
	Delete         reduce using rule 128
	Let            reduce using rule 128
	If             reduce using rule 128
	Else           reduce using rule 128
	Elif           reduce using rule 128
	Case           reduce using rule 128
	Try            reduce using rule 128
	Catch          reduce using rule 128
	Finally        reduce using rule 128
	Throw          reduce using rule 128
	Return         reduce using rule 128
	Break          reduce using rule 128
	Continue       reduce using rule 128
	With           reduce using rule 128
	Do             reduce using rule 128
	While          reduce using rule 128
	For            reduce using rule 128
	Null           reduce using rule 128
	varId          reduce using rule 128
	conId          reduce using rule 128
	opId           reduce using rule 128
	primId         reduce using rule 128
	integer        reduce using rule 128
	double         reduce using rule 128
	char           reduce using rule 128
	string         reduce using rule 128
	boolean        reduce using rule 128


State 177

	block -> '{' stmts . '}'                            (rule 114)

	'}'            shift, and enter state 294


State 178

	stmts -> stmts_r .                                  (rule 115)
	stmts_r -> stmts_r . stmt                           (rule 117)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'}'            reduce using rule 115
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 293
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 179

	stmt -> stmt_nop .                                  (rule 98)

	backslash      reduce using rule 98
	';'            reduce using rule 98
	'='            reduce using rule 98
	'_'            reduce using rule 98
	'~'            reduce using rule 98
	'*'            reduce using rule 98
	'&'            reduce using rule 98
	'&&'           reduce using rule 98
	'('            reduce using rule 98
	'[]'           reduce using rule 98
	'['            reduce using rule 98
	'{'            reduce using rule 98
	'}'            reduce using rule 98
	'<.>'          reduce using rule 98
	'<.'           reduce using rule 98
	'<'            reduce using rule 98
	'>'            reduce using rule 98
	Static         reduce using rule 98
	New            reduce using rule 98
	Renew          reduce using rule 98
	Delete         reduce using rule 98
	Let            reduce using rule 98
	If             reduce using rule 98
	Else           reduce using rule 98
	Elif           reduce using rule 98
	Case           reduce using rule 98
	Try            reduce using rule 98
	Catch          reduce using rule 98
	Finally        reduce using rule 98
	Throw          reduce using rule 98
	Return         reduce using rule 98
	Break          reduce using rule 98
	Continue       reduce using rule 98
	With           reduce using rule 98
	Do             reduce using rule 98
	While          reduce using rule 98
	For            reduce using rule 98
	Null           reduce using rule 98
	varId          reduce using rule 98
	conId          reduce using rule 98
	opId           reduce using rule 98
	primId         reduce using rule 98
	integer        reduce using rule 98
	double         reduce using rule 98
	char           reduce using rule 98
	string         reduce using rule 98
	boolean        reduce using rule 98


State 180

	stmt -> stmt_exp .                                  (rule 99)

	backslash      reduce using rule 99
	';'            reduce using rule 99
	'='            reduce using rule 99
	'_'            reduce using rule 99
	'~'            reduce using rule 99
	'*'            reduce using rule 99
	'&'            reduce using rule 99
	'&&'           reduce using rule 99
	'('            reduce using rule 99
	'[]'           reduce using rule 99
	'['            reduce using rule 99
	'{'            reduce using rule 99
	'}'            reduce using rule 99
	'<.>'          reduce using rule 99
	'<.'           reduce using rule 99
	'<'            reduce using rule 99
	'>'            reduce using rule 99
	Static         reduce using rule 99
	New            reduce using rule 99
	Renew          reduce using rule 99
	Delete         reduce using rule 99
	Let            reduce using rule 99
	If             reduce using rule 99
	Else           reduce using rule 99
	Elif           reduce using rule 99
	Case           reduce using rule 99
	Try            reduce using rule 99
	Catch          reduce using rule 99
	Finally        reduce using rule 99
	Throw          reduce using rule 99
	Return         reduce using rule 99
	Break          reduce using rule 99
	Continue       reduce using rule 99
	With           reduce using rule 99
	Do             reduce using rule 99
	While          reduce using rule 99
	For            reduce using rule 99
	Null           reduce using rule 99
	varId          reduce using rule 99
	conId          reduce using rule 99
	opId           reduce using rule 99
	primId         reduce using rule 99
	integer        reduce using rule 99
	double         reduce using rule 99
	char           reduce using rule 99
	string         reduce using rule 99
	boolean        reduce using rule 99


State 181

	stmt -> stmt_decl .                                 (rule 100)

	backslash      reduce using rule 100
	';'            reduce using rule 100
	'='            reduce using rule 100
	'_'            reduce using rule 100
	'~'            reduce using rule 100
	'*'            reduce using rule 100
	'&'            reduce using rule 100
	'&&'           reduce using rule 100
	'('            reduce using rule 100
	'[]'           reduce using rule 100
	'['            reduce using rule 100
	'{'            reduce using rule 100
	'}'            reduce using rule 100
	'<.>'          reduce using rule 100
	'<.'           reduce using rule 100
	'<'            reduce using rule 100
	'>'            reduce using rule 100
	Static         reduce using rule 100
	New            reduce using rule 100
	Renew          reduce using rule 100
	Delete         reduce using rule 100
	Let            reduce using rule 100
	If             reduce using rule 100
	Else           reduce using rule 100
	Elif           reduce using rule 100
	Case           reduce using rule 100
	Try            reduce using rule 100
	Catch          reduce using rule 100
	Finally        reduce using rule 100
	Throw          reduce using rule 100
	Return         reduce using rule 100
	Break          reduce using rule 100
	Continue       reduce using rule 100
	With           reduce using rule 100
	Do             reduce using rule 100
	While          reduce using rule 100
	For            reduce using rule 100
	Null           reduce using rule 100
	varId          reduce using rule 100
	conId          reduce using rule 100
	opId           reduce using rule 100
	primId         reduce using rule 100
	integer        reduce using rule 100
	double         reduce using rule 100
	char           reduce using rule 100
	string         reduce using rule 100
	boolean        reduce using rule 100


State 182

	stmt_decl -> maybe_stmt_decl_specs . declaration    (rule 120)

	Let            shift, and enter state 48

	declaration    goto state 292
	decl_head      goto state 15

State 183

	maybe_stmt_decl_specs -> stmt_decl_specs .          (rule 122)

	Let            reduce using rule 122


State 184

	stmt_decl_specs -> stmt_decl_specs_list .           (rule 123)

	Let            reduce using rule 123


State 185

	stmt_decl_specs_list -> stmt_decl_specs_list_r .    (rule 124)
	stmt_decl_specs_list_r -> stmt_decl_specs_list_r . stmt_decl_spec    (rule 126)

	Static         shift, and enter state 203
	Let            reduce using rule 124

	stmt_decl_spec goto state 291

State 186

	stmt_decl_specs_list_r -> stmt_decl_spec .          (rule 125)

	Static         reduce using rule 125
	Let            reduce using rule 125


State 187

	stmt -> stmt_block .                                (rule 101)

	backslash      reduce using rule 101
	';'            reduce using rule 101
	'='            reduce using rule 101
	'_'            reduce using rule 101
	'~'            reduce using rule 101
	'*'            reduce using rule 101
	'&'            reduce using rule 101
	'&&'           reduce using rule 101
	'('            reduce using rule 101
	'[]'           reduce using rule 101
	'['            reduce using rule 101
	'{'            reduce using rule 101
	'}'            reduce using rule 101
	'<.>'          reduce using rule 101
	'<.'           reduce using rule 101
	'<'            reduce using rule 101
	'>'            reduce using rule 101
	Static         reduce using rule 101
	New            reduce using rule 101
	Renew          reduce using rule 101
	Delete         reduce using rule 101
	Let            reduce using rule 101
	If             reduce using rule 101
	Else           reduce using rule 101
	Elif           reduce using rule 101
	Case           reduce using rule 101
	Try            reduce using rule 101
	Catch          reduce using rule 101
	Finally        reduce using rule 101
	Throw          reduce using rule 101
	Return         reduce using rule 101
	Break          reduce using rule 101
	Continue       reduce using rule 101
	With           reduce using rule 101
	Do             reduce using rule 101
	While          reduce using rule 101
	For            reduce using rule 101
	Null           reduce using rule 101
	varId          reduce using rule 101
	conId          reduce using rule 101
	opId           reduce using rule 101
	primId         reduce using rule 101
	integer        reduce using rule 101
	double         reduce using rule 101
	char           reduce using rule 101
	string         reduce using rule 101
	boolean        reduce using rule 101


State 188

	stmt -> stmt_with .                                 (rule 102)

	backslash      reduce using rule 102
	';'            reduce using rule 102
	'='            reduce using rule 102
	'_'            reduce using rule 102
	'~'            reduce using rule 102
	'*'            reduce using rule 102
	'&'            reduce using rule 102
	'&&'           reduce using rule 102
	'('            reduce using rule 102
	'[]'           reduce using rule 102
	'['            reduce using rule 102
	'{'            reduce using rule 102
	'}'            reduce using rule 102
	'<.>'          reduce using rule 102
	'<.'           reduce using rule 102
	'<'            reduce using rule 102
	'>'            reduce using rule 102
	Static         reduce using rule 102
	New            reduce using rule 102
	Renew          reduce using rule 102
	Delete         reduce using rule 102
	Let            reduce using rule 102
	If             reduce using rule 102
	Else           reduce using rule 102
	Elif           reduce using rule 102
	Case           reduce using rule 102
	Try            reduce using rule 102
	Catch          reduce using rule 102
	Finally        reduce using rule 102
	Throw          reduce using rule 102
	Return         reduce using rule 102
	Break          reduce using rule 102
	Continue       reduce using rule 102
	With           reduce using rule 102
	Do             reduce using rule 102
	While          reduce using rule 102
	For            reduce using rule 102
	Null           reduce using rule 102
	varId          reduce using rule 102
	conId          reduce using rule 102
	opId           reduce using rule 102
	primId         reduce using rule 102
	integer        reduce using rule 102
	double         reduce using rule 102
	char           reduce using rule 102
	string         reduce using rule 102
	boolean        reduce using rule 102


State 189

	stmt -> stmt_break .                                (rule 103)

	backslash      reduce using rule 103
	';'            reduce using rule 103
	'='            reduce using rule 103
	'_'            reduce using rule 103
	'~'            reduce using rule 103
	'*'            reduce using rule 103
	'&'            reduce using rule 103
	'&&'           reduce using rule 103
	'('            reduce using rule 103
	'[]'           reduce using rule 103
	'['            reduce using rule 103
	'{'            reduce using rule 103
	'}'            reduce using rule 103
	'<.>'          reduce using rule 103
	'<.'           reduce using rule 103
	'<'            reduce using rule 103
	'>'            reduce using rule 103
	Static         reduce using rule 103
	New            reduce using rule 103
	Renew          reduce using rule 103
	Delete         reduce using rule 103
	Let            reduce using rule 103
	If             reduce using rule 103
	Else           reduce using rule 103
	Elif           reduce using rule 103
	Case           reduce using rule 103
	Try            reduce using rule 103
	Catch          reduce using rule 103
	Finally        reduce using rule 103
	Throw          reduce using rule 103
	Return         reduce using rule 103
	Break          reduce using rule 103
	Continue       reduce using rule 103
	With           reduce using rule 103
	Do             reduce using rule 103
	While          reduce using rule 103
	For            reduce using rule 103
	Null           reduce using rule 103
	varId          reduce using rule 103
	conId          reduce using rule 103
	opId           reduce using rule 103
	primId         reduce using rule 103
	integer        reduce using rule 103
	double         reduce using rule 103
	char           reduce using rule 103
	string         reduce using rule 103
	boolean        reduce using rule 103


State 190

	stmt -> stmt_continue .                             (rule 104)

	backslash      reduce using rule 104
	';'            reduce using rule 104
	'='            reduce using rule 104
	'_'            reduce using rule 104
	'~'            reduce using rule 104
	'*'            reduce using rule 104
	'&'            reduce using rule 104
	'&&'           reduce using rule 104
	'('            reduce using rule 104
	'[]'           reduce using rule 104
	'['            reduce using rule 104
	'{'            reduce using rule 104
	'}'            reduce using rule 104
	'<.>'          reduce using rule 104
	'<.'           reduce using rule 104
	'<'            reduce using rule 104
	'>'            reduce using rule 104
	Static         reduce using rule 104
	New            reduce using rule 104
	Renew          reduce using rule 104
	Delete         reduce using rule 104
	Let            reduce using rule 104
	If             reduce using rule 104
	Else           reduce using rule 104
	Elif           reduce using rule 104
	Case           reduce using rule 104
	Try            reduce using rule 104
	Catch          reduce using rule 104
	Finally        reduce using rule 104
	Throw          reduce using rule 104
	Return         reduce using rule 104
	Break          reduce using rule 104
	Continue       reduce using rule 104
	With           reduce using rule 104
	Do             reduce using rule 104
	While          reduce using rule 104
	For            reduce using rule 104
	Null           reduce using rule 104
	varId          reduce using rule 104
	conId          reduce using rule 104
	opId           reduce using rule 104
	primId         reduce using rule 104
	integer        reduce using rule 104
	double         reduce using rule 104
	char           reduce using rule 104
	string         reduce using rule 104
	boolean        reduce using rule 104


State 191

	stmt -> stmt_return .                               (rule 105)

	backslash      reduce using rule 105
	';'            reduce using rule 105
	'='            reduce using rule 105
	'_'            reduce using rule 105
	'~'            reduce using rule 105
	'*'            reduce using rule 105
	'&'            reduce using rule 105
	'&&'           reduce using rule 105
	'('            reduce using rule 105
	'[]'           reduce using rule 105
	'['            reduce using rule 105
	'{'            reduce using rule 105
	'}'            reduce using rule 105
	'<.>'          reduce using rule 105
	'<.'           reduce using rule 105
	'<'            reduce using rule 105
	'>'            reduce using rule 105
	Static         reduce using rule 105
	New            reduce using rule 105
	Renew          reduce using rule 105
	Delete         reduce using rule 105
	Let            reduce using rule 105
	If             reduce using rule 105
	Else           reduce using rule 105
	Elif           reduce using rule 105
	Case           reduce using rule 105
	Try            reduce using rule 105
	Catch          reduce using rule 105
	Finally        reduce using rule 105
	Throw          reduce using rule 105
	Return         reduce using rule 105
	Break          reduce using rule 105
	Continue       reduce using rule 105
	With           reduce using rule 105
	Do             reduce using rule 105
	While          reduce using rule 105
	For            reduce using rule 105
	Null           reduce using rule 105
	varId          reduce using rule 105
	conId          reduce using rule 105
	opId           reduce using rule 105
	primId         reduce using rule 105
	integer        reduce using rule 105
	double         reduce using rule 105
	char           reduce using rule 105
	string         reduce using rule 105
	boolean        reduce using rule 105


State 192

	stmt -> stmt_throw .                                (rule 106)

	backslash      reduce using rule 106
	';'            reduce using rule 106
	'='            reduce using rule 106
	'_'            reduce using rule 106
	'~'            reduce using rule 106
	'*'            reduce using rule 106
	'&'            reduce using rule 106
	'&&'           reduce using rule 106
	'('            reduce using rule 106
	'[]'           reduce using rule 106
	'['            reduce using rule 106
	'{'            reduce using rule 106
	'}'            reduce using rule 106
	'<.>'          reduce using rule 106
	'<.'           reduce using rule 106
	'<'            reduce using rule 106
	'>'            reduce using rule 106
	Static         reduce using rule 106
	New            reduce using rule 106
	Renew          reduce using rule 106
	Delete         reduce using rule 106
	Let            reduce using rule 106
	If             reduce using rule 106
	Else           reduce using rule 106
	Elif           reduce using rule 106
	Case           reduce using rule 106
	Try            reduce using rule 106
	Catch          reduce using rule 106
	Finally        reduce using rule 106
	Throw          reduce using rule 106
	Return         reduce using rule 106
	Break          reduce using rule 106
	Continue       reduce using rule 106
	With           reduce using rule 106
	Do             reduce using rule 106
	While          reduce using rule 106
	For            reduce using rule 106
	Null           reduce using rule 106
	varId          reduce using rule 106
	conId          reduce using rule 106
	opId           reduce using rule 106
	primId         reduce using rule 106
	integer        reduce using rule 106
	double         reduce using rule 106
	char           reduce using rule 106
	string         reduce using rule 106
	boolean        reduce using rule 106


State 193

	stmt -> stmt_if .                                   (rule 107)

	backslash      reduce using rule 107
	';'            reduce using rule 107
	'='            reduce using rule 107
	'_'            reduce using rule 107
	'~'            reduce using rule 107
	'*'            reduce using rule 107
	'&'            reduce using rule 107
	'&&'           reduce using rule 107
	'('            reduce using rule 107
	'[]'           reduce using rule 107
	'['            reduce using rule 107
	'{'            reduce using rule 107
	'}'            reduce using rule 107
	'<.>'          reduce using rule 107
	'<.'           reduce using rule 107
	'<'            reduce using rule 107
	'>'            reduce using rule 107
	Static         reduce using rule 107
	New            reduce using rule 107
	Renew          reduce using rule 107
	Delete         reduce using rule 107
	Let            reduce using rule 107
	If             reduce using rule 107
	Else           reduce using rule 107
	Elif           reduce using rule 107
	Case           reduce using rule 107
	Try            reduce using rule 107
	Catch          reduce using rule 107
	Finally        reduce using rule 107
	Throw          reduce using rule 107
	Return         reduce using rule 107
	Break          reduce using rule 107
	Continue       reduce using rule 107
	With           reduce using rule 107
	Do             reduce using rule 107
	While          reduce using rule 107
	For            reduce using rule 107
	Null           reduce using rule 107
	varId          reduce using rule 107
	conId          reduce using rule 107
	opId           reduce using rule 107
	primId         reduce using rule 107
	integer        reduce using rule 107
	double         reduce using rule 107
	char           reduce using rule 107
	string         reduce using rule 107
	boolean        reduce using rule 107


State 194

	stmt -> stmt_while .                                (rule 108)

	backslash      reduce using rule 108
	';'            reduce using rule 108
	'='            reduce using rule 108
	'_'            reduce using rule 108
	'~'            reduce using rule 108
	'*'            reduce using rule 108
	'&'            reduce using rule 108
	'&&'           reduce using rule 108
	'('            reduce using rule 108
	'[]'           reduce using rule 108
	'['            reduce using rule 108
	'{'            reduce using rule 108
	'}'            reduce using rule 108
	'<.>'          reduce using rule 108
	'<.'           reduce using rule 108
	'<'            reduce using rule 108
	'>'            reduce using rule 108
	Static         reduce using rule 108
	New            reduce using rule 108
	Renew          reduce using rule 108
	Delete         reduce using rule 108
	Let            reduce using rule 108
	If             reduce using rule 108
	Else           reduce using rule 108
	Elif           reduce using rule 108
	Case           reduce using rule 108
	Try            reduce using rule 108
	Catch          reduce using rule 108
	Finally        reduce using rule 108
	Throw          reduce using rule 108
	Return         reduce using rule 108
	Break          reduce using rule 108
	Continue       reduce using rule 108
	With           reduce using rule 108
	Do             reduce using rule 108
	While          reduce using rule 108
	For            reduce using rule 108
	Null           reduce using rule 108
	varId          reduce using rule 108
	conId          reduce using rule 108
	opId           reduce using rule 108
	primId         reduce using rule 108
	integer        reduce using rule 108
	double         reduce using rule 108
	char           reduce using rule 108
	string         reduce using rule 108
	boolean        reduce using rule 108


State 195

	stmt -> stmt_do_while .                             (rule 109)

	backslash      reduce using rule 109
	';'            reduce using rule 109
	'='            reduce using rule 109
	'_'            reduce using rule 109
	'~'            reduce using rule 109
	'*'            reduce using rule 109
	'&'            reduce using rule 109
	'&&'           reduce using rule 109
	'('            reduce using rule 109
	'[]'           reduce using rule 109
	'['            reduce using rule 109
	'{'            reduce using rule 109
	'}'            reduce using rule 109
	'<.>'          reduce using rule 109
	'<.'           reduce using rule 109
	'<'            reduce using rule 109
	'>'            reduce using rule 109
	Static         reduce using rule 109
	New            reduce using rule 109
	Renew          reduce using rule 109
	Delete         reduce using rule 109
	Let            reduce using rule 109
	If             reduce using rule 109
	Else           reduce using rule 109
	Elif           reduce using rule 109
	Case           reduce using rule 109
	Try            reduce using rule 109
	Catch          reduce using rule 109
	Finally        reduce using rule 109
	Throw          reduce using rule 109
	Return         reduce using rule 109
	Break          reduce using rule 109
	Continue       reduce using rule 109
	With           reduce using rule 109
	Do             reduce using rule 109
	While          reduce using rule 109
	For            reduce using rule 109
	Null           reduce using rule 109
	varId          reduce using rule 109
	conId          reduce using rule 109
	opId           reduce using rule 109
	primId         reduce using rule 109
	integer        reduce using rule 109
	double         reduce using rule 109
	char           reduce using rule 109
	string         reduce using rule 109
	boolean        reduce using rule 109


State 196

	stmt -> stmt_for .                                  (rule 110)

	backslash      reduce using rule 110
	';'            reduce using rule 110
	'='            reduce using rule 110
	'_'            reduce using rule 110
	'~'            reduce using rule 110
	'*'            reduce using rule 110
	'&'            reduce using rule 110
	'&&'           reduce using rule 110
	'('            reduce using rule 110
	'[]'           reduce using rule 110
	'['            reduce using rule 110
	'{'            reduce using rule 110
	'}'            reduce using rule 110
	'<.>'          reduce using rule 110
	'<.'           reduce using rule 110
	'<'            reduce using rule 110
	'>'            reduce using rule 110
	Static         reduce using rule 110
	New            reduce using rule 110
	Renew          reduce using rule 110
	Delete         reduce using rule 110
	Let            reduce using rule 110
	If             reduce using rule 110
	Else           reduce using rule 110
	Elif           reduce using rule 110
	Case           reduce using rule 110
	Try            reduce using rule 110
	Catch          reduce using rule 110
	Finally        reduce using rule 110
	Throw          reduce using rule 110
	Return         reduce using rule 110
	Break          reduce using rule 110
	Continue       reduce using rule 110
	With           reduce using rule 110
	Do             reduce using rule 110
	While          reduce using rule 110
	For            reduce using rule 110
	Null           reduce using rule 110
	varId          reduce using rule 110
	conId          reduce using rule 110
	opId           reduce using rule 110
	primId         reduce using rule 110
	integer        reduce using rule 110
	double         reduce using rule 110
	char           reduce using rule 110
	string         reduce using rule 110
	boolean        reduce using rule 110


State 197

	stmt -> stmt_case .                                 (rule 111)

	backslash      reduce using rule 111
	';'            reduce using rule 111
	'='            reduce using rule 111
	'_'            reduce using rule 111
	'~'            reduce using rule 111
	'*'            reduce using rule 111
	'&'            reduce using rule 111
	'&&'           reduce using rule 111
	'('            reduce using rule 111
	'[]'           reduce using rule 111
	'['            reduce using rule 111
	'{'            reduce using rule 111
	'}'            reduce using rule 111
	'<.>'          reduce using rule 111
	'<.'           reduce using rule 111
	'<'            reduce using rule 111
	'>'            reduce using rule 111
	Static         reduce using rule 111
	New            reduce using rule 111
	Renew          reduce using rule 111
	Delete         reduce using rule 111
	Let            reduce using rule 111
	If             reduce using rule 111
	Else           reduce using rule 111
	Elif           reduce using rule 111
	Case           reduce using rule 111
	Try            reduce using rule 111
	Catch          reduce using rule 111
	Finally        reduce using rule 111
	Throw          reduce using rule 111
	Return         reduce using rule 111
	Break          reduce using rule 111
	Continue       reduce using rule 111
	With           reduce using rule 111
	Do             reduce using rule 111
	While          reduce using rule 111
	For            reduce using rule 111
	Null           reduce using rule 111
	varId          reduce using rule 111
	conId          reduce using rule 111
	opId           reduce using rule 111
	primId         reduce using rule 111
	integer        reduce using rule 111
	double         reduce using rule 111
	char           reduce using rule 111
	string         reduce using rule 111
	boolean        reduce using rule 111


State 198

	stmt -> stmt_try_catch .                            (rule 112)

	backslash      reduce using rule 112
	';'            reduce using rule 112
	'='            reduce using rule 112
	'_'            reduce using rule 112
	'~'            reduce using rule 112
	'*'            reduce using rule 112
	'&'            reduce using rule 112
	'&&'           reduce using rule 112
	'('            reduce using rule 112
	'[]'           reduce using rule 112
	'['            reduce using rule 112
	'{'            reduce using rule 112
	'}'            reduce using rule 112
	'<.>'          reduce using rule 112
	'<.'           reduce using rule 112
	'<'            reduce using rule 112
	'>'            reduce using rule 112
	Static         reduce using rule 112
	New            reduce using rule 112
	Renew          reduce using rule 112
	Delete         reduce using rule 112
	Let            reduce using rule 112
	If             reduce using rule 112
	Else           reduce using rule 112
	Elif           reduce using rule 112
	Case           reduce using rule 112
	Try            reduce using rule 112
	Catch          reduce using rule 112
	Finally        reduce using rule 112
	Throw          reduce using rule 112
	Return         reduce using rule 112
	Break          reduce using rule 112
	Continue       reduce using rule 112
	With           reduce using rule 112
	Do             reduce using rule 112
	While          reduce using rule 112
	For            reduce using rule 112
	Null           reduce using rule 112
	varId          reduce using rule 112
	conId          reduce using rule 112
	opId           reduce using rule 112
	primId         reduce using rule 112
	integer        reduce using rule 112
	double         reduce using rule 112
	char           reduce using rule 112
	string         reduce using rule 112
	boolean        reduce using rule 112


State 199

	stmt_try_catch -> stmt_try . stmt_catch_list may_stmt_finally    (rule 152)

	Catch          shift, and enter state 290

	stmt_catch     goto state 287
	stmt_catch_listgoto state 288
	stmt_catch_list_rgoto state 289

State 200

	stmt_exp -> exp . ';'                               (rule 119)

	';'            shift, and enter state 286


State 201

	stmt_nop -> ';' .                                   (rule 118)

	backslash      reduce using rule 118
	';'            reduce using rule 118
	'='            reduce using rule 118
	'_'            reduce using rule 118
	'~'            reduce using rule 118
	'*'            reduce using rule 118
	'&'            reduce using rule 118
	'&&'           reduce using rule 118
	'('            reduce using rule 118
	'[]'           reduce using rule 118
	'['            reduce using rule 118
	'{'            reduce using rule 118
	'}'            reduce using rule 118
	'<.>'          reduce using rule 118
	'<.'           reduce using rule 118
	'<'            reduce using rule 118
	'>'            reduce using rule 118
	Static         reduce using rule 118
	New            reduce using rule 118
	Renew          reduce using rule 118
	Delete         reduce using rule 118
	Let            reduce using rule 118
	If             reduce using rule 118
	Else           reduce using rule 118
	Elif           reduce using rule 118
	Case           reduce using rule 118
	Try            reduce using rule 118
	Catch          reduce using rule 118
	Finally        reduce using rule 118
	Throw          reduce using rule 118
	Return         reduce using rule 118
	Break          reduce using rule 118
	Continue       reduce using rule 118
	With           reduce using rule 118
	Do             reduce using rule 118
	While          reduce using rule 118
	For            reduce using rule 118
	Null           reduce using rule 118
	varId          reduce using rule 118
	conId          reduce using rule 118
	opId           reduce using rule 118
	primId         reduce using rule 118
	integer        reduce using rule 118
	double         reduce using rule 118
	char           reduce using rule 118
	string         reduce using rule 118
	boolean        reduce using rule 118


State 202

	block -> '{' '}' .                                  (rule 113)

	backslash      reduce using rule 113
	';'            reduce using rule 113
	'='            reduce using rule 113
	'_'            reduce using rule 113
	'~'            reduce using rule 113
	'*'            reduce using rule 113
	'&'            reduce using rule 113
	'&&'           reduce using rule 113
	'('            reduce using rule 113
	'[]'           reduce using rule 113
	'['            reduce using rule 113
	'{'            reduce using rule 113
	'}'            reduce using rule 113
	'<.>'          reduce using rule 113
	'<.'           reduce using rule 113
	'<'            reduce using rule 113
	'>'            reduce using rule 113
	Operator       reduce using rule 113
	Static         reduce using rule 113
	Inline         reduce using rule 113
	Recursive      reduce using rule 113
	Extern         reduce using rule 113
	New            reduce using rule 113
	Renew          reduce using rule 113
	Delete         reduce using rule 113
	Module         reduce using rule 113
	Import         reduce using rule 113
	Type           reduce using rule 113
	Alias          reduce using rule 113
	Class          reduce using rule 113
	Inst           reduce using rule 113
	Let            reduce using rule 113
	If             reduce using rule 113
	Else           reduce using rule 113
	Elif           reduce using rule 113
	Case           reduce using rule 113
	Try            reduce using rule 113
	Catch          reduce using rule 113
	Finally        reduce using rule 113
	Throw          reduce using rule 113
	Return         reduce using rule 113
	Break          reduce using rule 113
	Continue       reduce using rule 113
	With           reduce using rule 113
	Do             reduce using rule 113
	While          reduce using rule 113
	For            reduce using rule 113
	Null           reduce using rule 113
	varId          reduce using rule 113
	conId          reduce using rule 113
	opId           reduce using rule 113
	primId         reduce using rule 113
	integer        reduce using rule 113
	double         reduce using rule 113
	char           reduce using rule 113
	string         reduce using rule 113
	boolean        reduce using rule 113
	eof            reduce using rule 113


State 203

	stmt_decl_spec -> Static .                          (rule 127)

	Static         reduce using rule 127
	Let            reduce using rule 127


State 204

	stmt_if -> If . '(' exp ')' stmt                    (rule 134)
	stmt_if -> If . '(' exp ')' stmt stmt_elif          (rule 135)
	stmt_if -> If . '(' exp ')' stmt stmt_else          (rule 136)

	'('            shift, and enter state 285


State 205

	stmt_case -> Case . '(' exp ')' case_alts           (rule 146)

	'('            shift, and enter state 284


State 206

	stmt_try -> Try . stmt                              (rule 153)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 283
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 207

	stmt_throw -> Throw . exp ';'                       (rule 133)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 282
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 208

	stmt_return -> Return . may_exp ';'                 (rule 132)

	backslash      shift, and enter state 115
	';'            reduce using rule 208
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 280
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	may_exp        goto state 281
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 209

	stmt_break -> Break . ';'                           (rule 130)

	';'            shift, and enter state 279


State 210

	stmt_continue -> Continue . ';'                     (rule 131)

	';'            shift, and enter state 278


State 211

	stmt_with -> With . '(' exp ')' stmt                (rule 129)

	'('            shift, and enter state 277


State 212

	stmt_do_while -> Do . stmt While '(' exp ')' ';'    (rule 142)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 276
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 213

	stmt_while -> While . '(' exp ')' stmt              (rule 141)

	'('            shift, and enter state 275


State 214

	stmt_for -> For . '(' for_init may_exp ';' may_exp ')' stmt    (rule 143)

	'('            shift, and enter state 274


State 215

	data_defn -> con_name . data_fields ';'             (rule 279)
	data_defn -> con_name . object_fields               (rule 280)

	'('            shift, and enter state 272
	'{'            shift, and enter state 273

	data_fields    goto state 270
	object_fields  goto state 271

State 216

	data_defn_list_r -> data_defn .                     (rule 284)

	'}'            reduce using rule 284
	conId          reduce using rule 284


State 217

	type_defn_body -> '{' data_defn_list0 . '}'         (rule 277)

	'}'            shift, and enter state 269


State 218

	data_defn_list0 -> data_defn_list .                 (rule 282)

	'}'            reduce using rule 282


State 219

	data_defn_list -> data_defn_list_r .                (rule 283)
	data_defn_list_r -> data_defn_list_r . data_defn    (rule 285)

	'}'            reduce using rule 283
	conId          shift, and enter state 49

	con_name       goto state 215
	con_id         goto state 6
	data_defn      goto state 268

State 220

	alias_defn -> alias_decl '=' type . ';'             (rule 303)

	';'            shift, and enter state 267


State 221

	class_method -> function_decl . ';'                 (rule 308)
	class_method -> function_decl . block               (rule 309)

	';'            shift, and enter state 266
	'{'            shift, and enter state 74

	block          goto state 265

State 222

	class_method_list_r -> class_method .               (rule 313)

	'}'            reduce using rule 313
	Inline         reduce using rule 313
	Recursive      reduce using rule 313
	varId          reduce using rule 313


State 223

	class_body -> '{' class_method_list0 . '}'          (rule 307)

	'}'            shift, and enter state 264


State 224

	class_method_list0 -> class_method_list .           (rule 311)

	'}'            reduce using rule 311


State 225

	class_method_list -> class_method_list_r .          (rule 312)
	class_method_list_r -> class_method_list_r . class_method    (rule 314)

	'}'            reduce using rule 312
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	varId          reduce using rule 73

	function_decl  goto state 221
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	class_method   goto state 263

State 226

	instance_method -> function_defn .                  (rule 318)

	'}'            reduce using rule 318
	Inline         reduce using rule 318
	Recursive      reduce using rule 318
	varId          reduce using rule 318


State 227

	instance_method_list_r -> instance_method .         (rule 322)

	'}'            reduce using rule 322
	Inline         reduce using rule 322
	Recursive      reduce using rule 322
	varId          reduce using rule 322


State 228

	instance_body -> '{' instance_method_list0 . '}'    (rule 317)

	'}'            shift, and enter state 262


State 229

	instance_method_list0 -> instance_method_list .     (rule 320)

	'}'            reduce using rule 320


State 230

	instance_method_list -> instance_method_list_r .    (rule 321)
	instance_method_list_r -> instance_method_list_r . instance_method    (rule 323)

	'}'            reduce using rule 321
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	varId          reduce using rule 73

	function_defn  goto state 226
	function_decl  goto state 17
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	instance_methodgoto state 261

State 231

	destructor_decl -> '~' con_name '(' . parameters0 ')'    (rule 90)

	')'            reduce using rule 81
	varId          shift, and enter state 4

	var_name       goto state 86
	var_id         goto state 3
	parameters0    goto state 260
	parameters     goto state 88
	parameters_list_rgoto state 89
	parameter      goto state 90

State 232

	operator_decl -> Operator '(' fixity . ',' integer ',' op_name_list ')' ';'    (rule 324)

	','            shift, and enter state 259


State 233

	fixity -> Prefix .                                  (rule 328)

	','            reduce using rule 328


State 234

	fixity -> Infix .                                   (rule 325)

	','            reduce using rule 325


State 235

	fixity -> Infixl .                                  (rule 327)

	','            reduce using rule 327


State 236

	fixity -> Infixr .                                  (rule 326)

	','            reduce using rule 326


State 237

	fixity -> Postfix .                                 (rule 329)

	','            reduce using rule 329


State 238

	function_extern -> Extern var_name '(' . parameters0 ')' type_sig ';'    (rule 72)

	')'            reduce using rule 81
	varId          shift, and enter state 4

	var_name       goto state 86
	var_id         goto state 3
	parameters0    goto state 258
	parameters     goto state 88
	parameters_list_rgoto state 89
	parameter      goto state 90

State 239

	module_defn -> Module mod_path module_block .       (rule 57)

	'~'            reduce using rule 57
	'}'            reduce using rule 57
	Operator       reduce using rule 57
	Inline         reduce using rule 57
	Recursive      reduce using rule 57
	Extern         reduce using rule 57
	Module         reduce using rule 57
	Import         reduce using rule 57
	Type           reduce using rule 57
	Alias          reduce using rule 57
	Class          reduce using rule 57
	Inst           reduce using rule 57
	Let            reduce using rule 57
	varId          reduce using rule 57
	conId          reduce using rule 57
	eof            reduce using rule 57


State 240

	module_block -> '{' . top_level_stmts0 '}'          (rule 58)

	'~'            shift, and enter state 37
	'}'            reduce using rule 40
	Operator       shift, and enter state 38
	Inline         shift, and enter state 39
	Recursive      shift, and enter state 40
	Extern         shift, and enter state 41
	Module         shift, and enter state 42
	Import         shift, and enter state 43
	Type           shift, and enter state 44
	Alias          shift, and enter state 45
	Class          shift, and enter state 46
	Inst           shift, and enter state 47
	Let            shift, and enter state 48
	varId          reduce using rule 73
	conId          shift, and enter state 49

	con_name       goto state 5
	con_id         goto state 6
	top_level_stmts0goto state 257
	top_level_stmtsgoto state 9
	top_level_stmts_rgoto state 10
	top_level_stmt goto state 11
	module_defn    goto state 12
	import_stmt    goto state 13
	declaration    goto state 14
	decl_head      goto state 15
	function_defn  goto state 16
	function_decl  goto state 17
	function_externgoto state 18
	maybe_func_specsgoto state 19
	func_specs     goto state 20
	func_specs_listgoto state 21
	func_specs_list_rgoto state 22
	func_spec      goto state 23
	constructor_defngoto state 24
	constructor_declgoto state 25
	destructor_defngoto state 26
	destructor_declgoto state 27
	type_defn      goto state 28
	type_decl      goto state 29
	alias_defn     goto state 30
	alias_decl     goto state 31
	class_defn     goto state 32
	class_decl     goto state 33
	instance_defn  goto state 34
	instance_decl  goto state 35
	operator_decl  goto state 36

State 241

	mod_path_r -> mod_path_r '.' . mod_name             (rule 61)

	conId          shift, and enter state 49

	con_name       goto state 57
	mod_name       goto state 256
	con_id         goto state 6

State 242

	import_stmt -> Import mod_path ';' .                (rule 62)

	'~'            reduce using rule 62
	'}'            reduce using rule 62
	Operator       reduce using rule 62
	Inline         reduce using rule 62
	Recursive      reduce using rule 62
	Extern         reduce using rule 62
	Module         reduce using rule 62
	Import         reduce using rule 62
	Type           reduce using rule 62
	Alias          reduce using rule 62
	Class          reduce using rule 62
	Inst           reduce using rule 62
	Let            reduce using rule 62
	varId          reduce using rule 62
	conId          reduce using rule 62
	eof            reduce using rule 62


State 243

	type_decl -> Type con_name maybe_scheme . type_parameters    (rule 276)

	'('            shift, and enter state 253

	type_parametersgoto state 255

State 244

	alias_decl -> Alias con_name maybe_scheme . type_parameters    (rule 304)

	'('            shift, and enter state 253

	type_parametersgoto state 254

State 245

	class_decl -> Class con_name maybe_scheme . type_parameters    (rule 306)

	'('            shift, and enter state 253

	type_parametersgoto state 252

State 246

	instance_decl -> Inst con_name maybe_scheme . type_arguments    (rule 316)

	'('            shift, and enter state 251

	type_arguments goto state 250

State 247

	name -> '(' op_name . ')'                           (rule 3)

	')'            shift, and enter state 249


State 248

	op_name -> op_id .                                  (rule 10)

	','            reduce using rule 10
	')'            reduce using rule 10


State 249

	name -> '(' op_name ')' .                           (rule 3)

	':'            reduce using rule 3
	';'            reduce using rule 3
	'='            reduce using rule 3
	'('            reduce using rule 3


State 250

	instance_decl -> Inst con_name maybe_scheme type_arguments .    (rule 316)

	'{'            reduce using rule 316


State 251

	type_arguments -> '(' . type_list0 ')'              (rule 233)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	')'            reduce using rule 234
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 407
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_list0     goto state 408
	type_list      goto state 409
	type_list_r    goto state 410
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 252

	class_decl -> Class con_name maybe_scheme type_parameters .    (rule 306)

	'{'            reduce using rule 306


State 253

	type_parameters -> '(' . type_parameter_list0 ')'    (rule 240)

	')'            reduce using rule 241
	varId          shift, and enter state 4

	var_name       goto state 402
	var_id         goto state 3
	type_parameter goto state 403
	type_parameter_list0goto state 404
	type_parameter_listgoto state 405
	type_parameter_list_rgoto state 406

State 254

	alias_decl -> Alias con_name maybe_scheme type_parameters .    (rule 304)

	'='            reduce using rule 304


State 255

	type_decl -> Type con_name maybe_scheme type_parameters .    (rule 276)

	';'            reduce using rule 276
	'{'            reduce using rule 276


State 256

	mod_path_r -> mod_path_r '.' mod_name .             (rule 61)

	';'            reduce using rule 61
	'.'            reduce using rule 61
	'{'            reduce using rule 61


State 257

	module_block -> '{' top_level_stmts0 . '}'          (rule 58)

	'}'            shift, and enter state 401


State 258

	function_extern -> Extern var_name '(' parameters0 . ')' type_sig ';'    (rule 72)

	')'            shift, and enter state 400


State 259

	operator_decl -> Operator '(' fixity ',' . integer ',' op_name_list ')' ';'    (rule 324)

	integer        shift, and enter state 399


State 260

	destructor_decl -> '~' con_name '(' parameters0 . ')'    (rule 90)

	')'            shift, and enter state 398


State 261

	instance_method_list_r -> instance_method_list_r instance_method .    (rule 323)

	'}'            reduce using rule 323
	Inline         reduce using rule 323
	Recursive      reduce using rule 323
	varId          reduce using rule 323


State 262

	instance_body -> '{' instance_method_list0 '}' .    (rule 317)

	'~'            reduce using rule 317
	'}'            reduce using rule 317
	Operator       reduce using rule 317
	Inline         reduce using rule 317
	Recursive      reduce using rule 317
	Extern         reduce using rule 317
	Module         reduce using rule 317
	Import         reduce using rule 317
	Type           reduce using rule 317
	Alias          reduce using rule 317
	Class          reduce using rule 317
	Inst           reduce using rule 317
	Let            reduce using rule 317
	varId          reduce using rule 317
	conId          reduce using rule 317
	eof            reduce using rule 317


State 263

	class_method_list_r -> class_method_list_r class_method .    (rule 314)

	'}'            reduce using rule 314
	Inline         reduce using rule 314
	Recursive      reduce using rule 314
	varId          reduce using rule 314


State 264

	class_body -> '{' class_method_list0 '}' .          (rule 307)

	'~'            reduce using rule 307
	'}'            reduce using rule 307
	Operator       reduce using rule 307
	Inline         reduce using rule 307
	Recursive      reduce using rule 307
	Extern         reduce using rule 307
	Module         reduce using rule 307
	Import         reduce using rule 307
	Type           reduce using rule 307
	Alias          reduce using rule 307
	Class          reduce using rule 307
	Inst           reduce using rule 307
	Let            reduce using rule 307
	varId          reduce using rule 307
	conId          reduce using rule 307
	eof            reduce using rule 307


State 265

	class_method -> function_decl block .               (rule 309)

	'}'            reduce using rule 309
	Inline         reduce using rule 309
	Recursive      reduce using rule 309
	varId          reduce using rule 309


State 266

	class_method -> function_decl ';' .                 (rule 308)

	'}'            reduce using rule 308
	Inline         reduce using rule 308
	Recursive      reduce using rule 308
	varId          reduce using rule 308


State 267

	alias_defn -> alias_decl '=' type ';' .             (rule 303)

	'~'            reduce using rule 303
	'}'            reduce using rule 303
	Operator       reduce using rule 303
	Inline         reduce using rule 303
	Recursive      reduce using rule 303
	Extern         reduce using rule 303
	Module         reduce using rule 303
	Import         reduce using rule 303
	Type           reduce using rule 303
	Alias          reduce using rule 303
	Class          reduce using rule 303
	Inst           reduce using rule 303
	Let            reduce using rule 303
	varId          reduce using rule 303
	conId          reduce using rule 303
	eof            reduce using rule 303


State 268

	data_defn_list_r -> data_defn_list_r data_defn .    (rule 285)

	'}'            reduce using rule 285
	conId          reduce using rule 285


State 269

	type_defn_body -> '{' data_defn_list0 '}' .         (rule 277)

	'~'            reduce using rule 277
	'}'            reduce using rule 277
	Operator       reduce using rule 277
	Inline         reduce using rule 277
	Recursive      reduce using rule 277
	Extern         reduce using rule 277
	Module         reduce using rule 277
	Import         reduce using rule 277
	Type           reduce using rule 277
	Alias          reduce using rule 277
	Class          reduce using rule 277
	Inst           reduce using rule 277
	Let            reduce using rule 277
	varId          reduce using rule 277
	conId          reduce using rule 277
	eof            reduce using rule 277


State 270

	data_defn -> con_name data_fields . ';'             (rule 279)

	';'            shift, and enter state 397


State 271

	data_defn -> con_name object_fields .               (rule 280)

	'}'            reduce using rule 280
	conId          reduce using rule 280


State 272

	data_fields -> '(' . data_field_list0 ')'           (rule 286)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	')'            reduce using rule 287
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 392
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	data_field_list0goto state 393
	data_field_listgoto state 394
	data_field_list_rgoto state 395
	data_field     goto state 396
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 273

	object_fields -> '{' . object_field_list0 '}'       (rule 296)

	'}'            reduce using rule 297
	varId          shift, and enter state 4

	var_name       goto state 387
	var_id         goto state 3
	object_field_list0goto state 388
	object_field_listgoto state 389
	object_field_list_rgoto state 390
	object_field   goto state 391

State 274

	stmt_for -> For '(' . for_init may_exp ';' may_exp ')' stmt    (rule 143)

	backslash      shift, and enter state 115
	';'            reduce using rule 208
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            shift, and enter state 48
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	declaration    goto state 384
	decl_head      goto state 15
	for_init       goto state 385
	exp            goto state 280
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	may_exp        goto state 386
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 275

	stmt_while -> While '(' . exp ')' stmt              (rule 141)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 383
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 276

	stmt_do_while -> Do stmt . While '(' exp ')' ';'    (rule 142)

	While          shift, and enter state 382


State 277

	stmt_with -> With '(' . exp ')' stmt                (rule 129)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 381
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 278

	stmt_continue -> Continue ';' .                     (rule 131)

	backslash      reduce using rule 131
	';'            reduce using rule 131
	'='            reduce using rule 131
	'_'            reduce using rule 131
	'~'            reduce using rule 131
	'*'            reduce using rule 131
	'&'            reduce using rule 131
	'&&'           reduce using rule 131
	'('            reduce using rule 131
	'[]'           reduce using rule 131
	'['            reduce using rule 131
	'{'            reduce using rule 131
	'}'            reduce using rule 131
	'<.>'          reduce using rule 131
	'<.'           reduce using rule 131
	'<'            reduce using rule 131
	'>'            reduce using rule 131
	Static         reduce using rule 131
	New            reduce using rule 131
	Renew          reduce using rule 131
	Delete         reduce using rule 131
	Let            reduce using rule 131
	If             reduce using rule 131
	Else           reduce using rule 131
	Elif           reduce using rule 131
	Case           reduce using rule 131
	Try            reduce using rule 131
	Catch          reduce using rule 131
	Finally        reduce using rule 131
	Throw          reduce using rule 131
	Return         reduce using rule 131
	Break          reduce using rule 131
	Continue       reduce using rule 131
	With           reduce using rule 131
	Do             reduce using rule 131
	While          reduce using rule 131
	For            reduce using rule 131
	Null           reduce using rule 131
	varId          reduce using rule 131
	conId          reduce using rule 131
	opId           reduce using rule 131
	primId         reduce using rule 131
	integer        reduce using rule 131
	double         reduce using rule 131
	char           reduce using rule 131
	string         reduce using rule 131
	boolean        reduce using rule 131


State 279

	stmt_break -> Break ';' .                           (rule 130)

	backslash      reduce using rule 130
	';'            reduce using rule 130
	'='            reduce using rule 130
	'_'            reduce using rule 130
	'~'            reduce using rule 130
	'*'            reduce using rule 130
	'&'            reduce using rule 130
	'&&'           reduce using rule 130
	'('            reduce using rule 130
	'[]'           reduce using rule 130
	'['            reduce using rule 130
	'{'            reduce using rule 130
	'}'            reduce using rule 130
	'<.>'          reduce using rule 130
	'<.'           reduce using rule 130
	'<'            reduce using rule 130
	'>'            reduce using rule 130
	Static         reduce using rule 130
	New            reduce using rule 130
	Renew          reduce using rule 130
	Delete         reduce using rule 130
	Let            reduce using rule 130
	If             reduce using rule 130
	Else           reduce using rule 130
	Elif           reduce using rule 130
	Case           reduce using rule 130
	Try            reduce using rule 130
	Catch          reduce using rule 130
	Finally        reduce using rule 130
	Throw          reduce using rule 130
	Return         reduce using rule 130
	Break          reduce using rule 130
	Continue       reduce using rule 130
	With           reduce using rule 130
	Do             reduce using rule 130
	While          reduce using rule 130
	For            reduce using rule 130
	Null           reduce using rule 130
	varId          reduce using rule 130
	conId          reduce using rule 130
	opId           reduce using rule 130
	primId         reduce using rule 130
	integer        reduce using rule 130
	double         reduce using rule 130
	char           reduce using rule 130
	string         reduce using rule 130
	boolean        reduce using rule 130


State 280

	may_exp -> exp .                                    (rule 209)

	';'            reduce using rule 209
	')'            reduce using rule 209


State 281

	stmt_return -> Return may_exp . ';'                 (rule 132)

	';'            shift, and enter state 380


State 282

	stmt_throw -> Throw exp . ';'                       (rule 133)

	';'            shift, and enter state 379


State 283

	stmt_try -> Try stmt .                              (rule 153)

	Catch          reduce using rule 153


State 284

	stmt_case -> Case '(' . exp ')' case_alts           (rule 146)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 378
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 285

	stmt_if -> If '(' . exp ')' stmt                    (rule 134)
	stmt_if -> If '(' . exp ')' stmt stmt_elif          (rule 135)
	stmt_if -> If '(' . exp ')' stmt stmt_else          (rule 136)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 377
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 286

	stmt_exp -> exp ';' .                               (rule 119)

	backslash      reduce using rule 119
	';'            reduce using rule 119
	'='            reduce using rule 119
	'_'            reduce using rule 119
	'~'            reduce using rule 119
	'*'            reduce using rule 119
	'&'            reduce using rule 119
	'&&'           reduce using rule 119
	'('            reduce using rule 119
	'[]'           reduce using rule 119
	'['            reduce using rule 119
	'{'            reduce using rule 119
	'}'            reduce using rule 119
	'<.>'          reduce using rule 119
	'<.'           reduce using rule 119
	'<'            reduce using rule 119
	'>'            reduce using rule 119
	Static         reduce using rule 119
	New            reduce using rule 119
	Renew          reduce using rule 119
	Delete         reduce using rule 119
	Let            reduce using rule 119
	If             reduce using rule 119
	Else           reduce using rule 119
	Elif           reduce using rule 119
	Case           reduce using rule 119
	Try            reduce using rule 119
	Catch          reduce using rule 119
	Finally        reduce using rule 119
	Throw          reduce using rule 119
	Return         reduce using rule 119
	Break          reduce using rule 119
	Continue       reduce using rule 119
	With           reduce using rule 119
	Do             reduce using rule 119
	While          reduce using rule 119
	For            reduce using rule 119
	Null           reduce using rule 119
	varId          reduce using rule 119
	conId          reduce using rule 119
	opId           reduce using rule 119
	primId         reduce using rule 119
	integer        reduce using rule 119
	double         reduce using rule 119
	char           reduce using rule 119
	string         reduce using rule 119
	boolean        reduce using rule 119


State 287

	stmt_catch_list_r -> stmt_catch .                   (rule 158)

	backslash      reduce using rule 158
	';'            reduce using rule 158
	'='            reduce using rule 158
	'_'            reduce using rule 158
	'~'            reduce using rule 158
	'*'            reduce using rule 158
	'&'            reduce using rule 158
	'&&'           reduce using rule 158
	'('            reduce using rule 158
	'[]'           reduce using rule 158
	'['            reduce using rule 158
	'{'            reduce using rule 158
	'}'            reduce using rule 158
	'<.>'          reduce using rule 158
	'<.'           reduce using rule 158
	'<'            reduce using rule 158
	'>'            reduce using rule 158
	Static         reduce using rule 158
	New            reduce using rule 158
	Renew          reduce using rule 158
	Delete         reduce using rule 158
	Let            reduce using rule 158
	If             reduce using rule 158
	Else           reduce using rule 158
	Elif           reduce using rule 158
	Case           reduce using rule 158
	Try            reduce using rule 158
	Catch          reduce using rule 158
	Finally        reduce using rule 158
	Throw          reduce using rule 158
	Return         reduce using rule 158
	Break          reduce using rule 158
	Continue       reduce using rule 158
	With           reduce using rule 158
	Do             reduce using rule 158
	While          reduce using rule 158
	For            reduce using rule 158
	Null           reduce using rule 158
	varId          reduce using rule 158
	conId          reduce using rule 158
	opId           reduce using rule 158
	primId         reduce using rule 158
	integer        reduce using rule 158
	double         reduce using rule 158
	char           reduce using rule 158
	string         reduce using rule 158
	boolean        reduce using rule 158


State 288

	stmt_try_catch -> stmt_try stmt_catch_list . may_stmt_finally    (rule 152)

	backslash      reduce using rule 161
	';'            reduce using rule 161
	'='            reduce using rule 161
	'_'            reduce using rule 161
	'~'            reduce using rule 161
	'*'            reduce using rule 161
	'&'            reduce using rule 161
	'&&'           reduce using rule 161
	'('            reduce using rule 161
	'[]'           reduce using rule 161
	'['            reduce using rule 161
	'{'            reduce using rule 161
	'}'            reduce using rule 161
	'<.>'          reduce using rule 161
	'<.'           reduce using rule 161
	'<'            reduce using rule 161
	'>'            reduce using rule 161
	Static         reduce using rule 161
	New            reduce using rule 161
	Renew          reduce using rule 161
	Delete         reduce using rule 161
	Let            reduce using rule 161
	If             reduce using rule 161
	Else           reduce using rule 161
	Elif           reduce using rule 161
	Case           reduce using rule 161
	Try            reduce using rule 161
	Catch          reduce using rule 161
	Finally        shift, and enter state 376
			(reduce using rule 161)

	Throw          reduce using rule 161
	Return         reduce using rule 161
	Break          reduce using rule 161
	Continue       reduce using rule 161
	With           reduce using rule 161
	Do             reduce using rule 161
	While          reduce using rule 161
	For            reduce using rule 161
	Null           reduce using rule 161
	varId          reduce using rule 161
	conId          reduce using rule 161
	opId           reduce using rule 161
	primId         reduce using rule 161
	integer        reduce using rule 161
	double         reduce using rule 161
	char           reduce using rule 161
	string         reduce using rule 161
	boolean        reduce using rule 161

	stmt_finally   goto state 374
	may_stmt_finallygoto state 375

State 289

	stmt_catch_list -> stmt_catch_list_r .              (rule 157)
	stmt_catch_list_r -> stmt_catch_list_r . stmt_catch    (rule 159)

	backslash      reduce using rule 157
	';'            reduce using rule 157
	'='            reduce using rule 157
	'_'            reduce using rule 157
	'~'            reduce using rule 157
	'*'            reduce using rule 157
	'&'            reduce using rule 157
	'&&'           reduce using rule 157
	'('            reduce using rule 157
	'[]'           reduce using rule 157
	'['            reduce using rule 157
	'{'            reduce using rule 157
	'}'            reduce using rule 157
	'<.>'          reduce using rule 157
	'<.'           reduce using rule 157
	'<'            reduce using rule 157
	'>'            reduce using rule 157
	Static         reduce using rule 157
	New            reduce using rule 157
	Renew          reduce using rule 157
	Delete         reduce using rule 157
	Let            reduce using rule 157
	If             reduce using rule 157
	Else           reduce using rule 157
	Elif           reduce using rule 157
	Case           reduce using rule 157
	Try            reduce using rule 157
	Catch          shift, and enter state 290
			(reduce using rule 157)

	Finally        reduce using rule 157
	Throw          reduce using rule 157
	Return         reduce using rule 157
	Break          reduce using rule 157
	Continue       reduce using rule 157
	With           reduce using rule 157
	Do             reduce using rule 157
	While          reduce using rule 157
	For            reduce using rule 157
	Null           reduce using rule 157
	varId          reduce using rule 157
	conId          reduce using rule 157
	opId           reduce using rule 157
	primId         reduce using rule 157
	integer        reduce using rule 157
	double         reduce using rule 157
	char           reduce using rule 157
	string         reduce using rule 157
	boolean        reduce using rule 157

	stmt_catch     goto state 373

State 290

	stmt_catch -> Catch . '(' exp ')' stmt              (rule 154)

	'('            shift, and enter state 372


State 291

	stmt_decl_specs_list_r -> stmt_decl_specs_list_r stmt_decl_spec .    (rule 126)

	Static         reduce using rule 126
	Let            reduce using rule 126


State 292

	stmt_decl -> maybe_stmt_decl_specs declaration .    (rule 120)

	backslash      reduce using rule 120
	';'            reduce using rule 120
	'='            reduce using rule 120
	'_'            reduce using rule 120
	'~'            reduce using rule 120
	'*'            reduce using rule 120
	'&'            reduce using rule 120
	'&&'           reduce using rule 120
	'('            reduce using rule 120
	'[]'           reduce using rule 120
	'['            reduce using rule 120
	'{'            reduce using rule 120
	'}'            reduce using rule 120
	'<.>'          reduce using rule 120
	'<.'           reduce using rule 120
	'<'            reduce using rule 120
	'>'            reduce using rule 120
	Static         reduce using rule 120
	New            reduce using rule 120
	Renew          reduce using rule 120
	Delete         reduce using rule 120
	Let            reduce using rule 120
	If             reduce using rule 120
	Else           reduce using rule 120
	Elif           reduce using rule 120
	Case           reduce using rule 120
	Try            reduce using rule 120
	Catch          reduce using rule 120
	Finally        reduce using rule 120
	Throw          reduce using rule 120
	Return         reduce using rule 120
	Break          reduce using rule 120
	Continue       reduce using rule 120
	With           reduce using rule 120
	Do             reduce using rule 120
	While          reduce using rule 120
	For            reduce using rule 120
	Null           reduce using rule 120
	varId          reduce using rule 120
	conId          reduce using rule 120
	opId           reduce using rule 120
	primId         reduce using rule 120
	integer        reduce using rule 120
	double         reduce using rule 120
	char           reduce using rule 120
	string         reduce using rule 120
	boolean        reduce using rule 120


State 293

	stmts_r -> stmts_r stmt .                           (rule 117)

	backslash      reduce using rule 117
	';'            reduce using rule 117
	'='            reduce using rule 117
	'~'            reduce using rule 117
	'*'            reduce using rule 117
	'&'            reduce using rule 117
	'&&'           reduce using rule 117
	'('            reduce using rule 117
	'[]'           reduce using rule 117
	'['            reduce using rule 117
	'{'            reduce using rule 117
	'}'            reduce using rule 117
	'<.>'          reduce using rule 117
	'<.'           reduce using rule 117
	'<'            reduce using rule 117
	'>'            reduce using rule 117
	Static         reduce using rule 117
	New            reduce using rule 117
	Renew          reduce using rule 117
	Delete         reduce using rule 117
	Let            reduce using rule 117
	If             reduce using rule 117
	Case           reduce using rule 117
	Try            reduce using rule 117
	Throw          reduce using rule 117
	Return         reduce using rule 117
	Break          reduce using rule 117
	Continue       reduce using rule 117
	With           reduce using rule 117
	Do             reduce using rule 117
	While          reduce using rule 117
	For            reduce using rule 117
	Null           reduce using rule 117
	varId          reduce using rule 117
	conId          reduce using rule 117
	opId           reduce using rule 117
	primId         reduce using rule 117
	integer        reduce using rule 117
	double         reduce using rule 117
	char           reduce using rule 117
	string         reduce using rule 117
	boolean        reduce using rule 117


State 294

	block -> '{' stmts '}' .                            (rule 114)

	backslash      reduce using rule 114
	';'            reduce using rule 114
	'='            reduce using rule 114
	'_'            reduce using rule 114
	'~'            reduce using rule 114
	'*'            reduce using rule 114
	'&'            reduce using rule 114
	'&&'           reduce using rule 114
	'('            reduce using rule 114
	'[]'           reduce using rule 114
	'['            reduce using rule 114
	'{'            reduce using rule 114
	'}'            reduce using rule 114
	'<.>'          reduce using rule 114
	'<.'           reduce using rule 114
	'<'            reduce using rule 114
	'>'            reduce using rule 114
	Operator       reduce using rule 114
	Static         reduce using rule 114
	Inline         reduce using rule 114
	Recursive      reduce using rule 114
	Extern         reduce using rule 114
	New            reduce using rule 114
	Renew          reduce using rule 114
	Delete         reduce using rule 114
	Module         reduce using rule 114
	Import         reduce using rule 114
	Type           reduce using rule 114
	Alias          reduce using rule 114
	Class          reduce using rule 114
	Inst           reduce using rule 114
	Let            reduce using rule 114
	If             reduce using rule 114
	Else           reduce using rule 114
	Elif           reduce using rule 114
	Case           reduce using rule 114
	Try            reduce using rule 114
	Catch          reduce using rule 114
	Finally        reduce using rule 114
	Throw          reduce using rule 114
	Return         reduce using rule 114
	Break          reduce using rule 114
	Continue       reduce using rule 114
	With           reduce using rule 114
	Do             reduce using rule 114
	While          reduce using rule 114
	For            reduce using rule 114
	Null           reduce using rule 114
	varId          reduce using rule 114
	conId          reduce using rule 114
	opId           reduce using rule 114
	primId         reduce using rule 114
	integer        reduce using rule 114
	double         reduce using rule 114
	char           reduce using rule 114
	string         reduce using rule 114
	boolean        reduce using rule 114
	eof            reduce using rule 114


State 295

	pred_forall -> var_name .                           (rule 268)

	','            reduce using rule 268
	'>'            reduce using rule 268


State 296

	pred_isIn -> con_name . '(' type_list ')'           (rule 269)

	'('            shift, and enter state 371


State 297

	pred_list_r -> pred .                               (rule 273)

	','            reduce using rule 273
	'>'            reduce using rule 273


State 298

	pred -> pred_forall .                               (rule 266)

	','            reduce using rule 266
	'>'            reduce using rule 266


State 299

	pred -> pred_isIn .                                 (rule 267)

	','            reduce using rule 267
	'>'            reduce using rule 267


State 300

	scheme -> '<' pred_list0 . '>'                      (rule 263)

	'>'            shift, and enter state 370


State 301

	pred_list0 -> pred_list .                           (rule 271)

	'>'            reduce using rule 271


State 302

	pred_list -> pred_list_r .                          (rule 272)
	pred_list_r -> pred_list_r . ',' pred               (rule 274)

	','            shift, and enter state 369
	'>'            reduce using rule 272


State 303

	function_decl -> maybe_func_specs var_name maybe_scheme '(' . parameters0 ')' maybe_type_sig    (rule 71)

	')'            reduce using rule 81
	varId          shift, and enter state 4

	var_name       goto state 86
	var_id         goto state 3
	parameters0    goto state 368
	parameters     goto state 88
	parameters_list_rgoto state 89
	parameter      goto state 90

State 304

	declaration -> decl_head maybe_type_sig '=' exp . ';'    (rule 64)

	';'            shift, and enter state 367


State 305

	type_con_array(btype) -> btype . '[]'               (rule 334)
	type_con_array(btype) -> btype . '[' exp ']'        (rule 335)
	type_con_const(btype) -> Const btype .              (rule 336)
	type_con_vector(btype) -> btype . '<.>'             (rule 337)
	type_con_vector(btype) -> btype . '<.' exp '>'      (rule 338)

	backslash      reduce using rule 336
	'->'           reduce using rule 336
	':'            reduce using rule 336
	';'            reduce using rule 336
	','            reduce using rule 336
	'='            reduce using rule 336
	'~'            reduce using rule 336
	'*'            reduce using rule 336
	'&'            reduce using rule 336
	'&&'           reduce using rule 336
	')'            reduce using rule 336
	'[]'           shift, and enter state 310
			(reduce using rule 336)

	'['            shift, and enter state 311
			(reduce using rule 336)

	']'            reduce using rule 336
	'{'            reduce using rule 336
	'}'            reduce using rule 336
	'<.>'          shift, and enter state 312
			(reduce using rule 336)

	'<.'           shift, and enter state 313
			(reduce using rule 336)

	'<'            reduce using rule 336
	'>'            reduce using rule 336
	opId           reduce using rule 336


State 306

	atype -> '(' type . ')'                             (rule 232)

	')'            shift, and enter state 366


State 307

	ctyop(btype) -> ctyop(btype) op_name_ext . btyop(btype)    (rule 343)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	btyop(btype)   goto state 365
	atyop(btype)   goto state 156

State 308

	btype -> atype maybe_scheme . type_arguments        (rule 225)

	'('            shift, and enter state 251

	type_arguments goto state 364

State 309

	atyop(btype) -> btype op_name_ext .                 (rule 350)

	backslash      reduce using rule 350
	'->'           reduce using rule 350
	':'            reduce using rule 350
	';'            reduce using rule 350
	','            reduce using rule 350
	'='            reduce using rule 350
	'~'            reduce using rule 350
	'*'            reduce using rule 350
	'&'            reduce using rule 350
	'&&'           reduce using rule 350
	')'            reduce using rule 350
	']'            reduce using rule 350
	'{'            reduce using rule 350
	'}'            reduce using rule 350
	'<'            reduce using rule 350
	'>'            reduce using rule 350
	opId           reduce using rule 350


State 310

	type_con_array(btype) -> btype '[]' .               (rule 334)

	backslash      reduce using rule 334
	'->'           reduce using rule 334
	':'            reduce using rule 334
	';'            reduce using rule 334
	','            reduce using rule 334
	'='            reduce using rule 334
	'~'            reduce using rule 334
	'*'            reduce using rule 334
	'&'            reduce using rule 334
	'&&'           reduce using rule 334
	')'            reduce using rule 334
	'[]'           reduce using rule 334
	'['            reduce using rule 334
	']'            reduce using rule 334
	'{'            reduce using rule 334
	'}'            reduce using rule 334
	'<.>'          reduce using rule 334
	'<.'           reduce using rule 334
	'<'            reduce using rule 334
	'>'            reduce using rule 334
	opId           reduce using rule 334


State 311

	type_con_array(btype) -> btype '[' . exp ']'        (rule 335)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 363
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 312

	type_con_vector(btype) -> btype '<.>' .             (rule 337)

	backslash      reduce using rule 337
	'->'           reduce using rule 337
	':'            reduce using rule 337
	';'            reduce using rule 337
	','            reduce using rule 337
	'='            reduce using rule 337
	'~'            reduce using rule 337
	'*'            reduce using rule 337
	'&'            reduce using rule 337
	'&&'           reduce using rule 337
	')'            reduce using rule 337
	'[]'           reduce using rule 337
	'['            reduce using rule 337
	']'            reduce using rule 337
	'{'            reduce using rule 337
	'}'            reduce using rule 337
	'<.>'          reduce using rule 337
	'<.'           reduce using rule 337
	'<'            reduce using rule 337
	'>'            reduce using rule 337
	opId           reduce using rule 337


State 313

	type_con_vector(btype) -> btype '<.' . exp '>'      (rule 338)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 362
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 314

	etype -> ctype kind_sig .                           (rule 219)

	';'            reduce using rule 219
	','            reduce using rule 219
	'='            reduce using rule 219
	')'            reduce using rule 219
	']'            reduce using rule 219
	'{'            reduce using rule 219
	'}'            reduce using rule 219
	'>'            reduce using rule 219


State 315

	ctype -> ctype '->' . type_op(btype)                (rule 220)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 361
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 316

	kind_sig -> ':' . kind                              (rule 260)

	TYPE           shift, and enter state 360

	kind           goto state 358
	akind          goto state 359

State 317

	btyop(btype) -> op_name_ext atyop(btype) .          (rule 346)

	backslash      reduce using rule 346
	'->'           reduce using rule 346
	':'            reduce using rule 346
	';'            reduce using rule 346
	','            reduce using rule 346
	'='            reduce using rule 346
	'~'            reduce using rule 346
	'*'            reduce using rule 346
	'&'            reduce using rule 346
	'&&'           reduce using rule 346
	')'            reduce using rule 346
	']'            reduce using rule 346
	'{'            reduce using rule 346
	'}'            reduce using rule 346
	'<'            reduce using rule 346
	'>'            reduce using rule 346
	opId           reduce using rule 346


State 318

	bexp -> Delete aexp .                               (rule 197)

	backslash      reduce using rule 197
	'->'           reduce using rule 197
	':'            reduce using rule 197
	';'            reduce using rule 197
	','            reduce using rule 197
	'.'            reduce using rule 197
	'='            reduce using rule 197
	'~'            reduce using rule 197
	'*'            reduce using rule 197
	'&'            reduce using rule 197
	'&&'           reduce using rule 197
	'('            reduce using rule 197
	')'            reduce using rule 197
	'['            reduce using rule 197
	']'            reduce using rule 197
	'}'            reduce using rule 197
	'<.'           reduce using rule 197
	'<'            reduce using rule 197
	'>'            reduce using rule 197
	As             reduce using rule 197
	opId           reduce using rule 197


State 319

	bexp -> Renew aexp .                                (rule 196)

	backslash      reduce using rule 196
	'->'           reduce using rule 196
	':'            reduce using rule 196
	';'            reduce using rule 196
	','            reduce using rule 196
	'.'            reduce using rule 196
	'='            reduce using rule 196
	'~'            reduce using rule 196
	'*'            reduce using rule 196
	'&'            reduce using rule 196
	'&&'           reduce using rule 196
	'('            reduce using rule 196
	')'            reduce using rule 196
	'['            reduce using rule 196
	']'            reduce using rule 196
	'}'            reduce using rule 196
	'<.'           reduce using rule 196
	'<'            reduce using rule 196
	'>'            reduce using rule 196
	As             reduce using rule 196
	opId           reduce using rule 196


State 320

	bexp -> New aexp .                                  (rule 195)

	backslash      reduce using rule 195
	'->'           reduce using rule 195
	':'            reduce using rule 195
	';'            reduce using rule 195
	','            reduce using rule 195
	'.'            reduce using rule 195
	'='            reduce using rule 195
	'~'            reduce using rule 195
	'*'            reduce using rule 195
	'&'            reduce using rule 195
	'&&'           reduce using rule 195
	'('            reduce using rule 195
	')'            reduce using rule 195
	'['            reduce using rule 195
	']'            reduce using rule 195
	'}'            reduce using rule 195
	'<.'           reduce using rule 195
	'<'            reduce using rule 195
	'>'            reduce using rule 195
	As             reduce using rule 195
	opId           reduce using rule 195


State 321

	value -> '<.' exp_args0 . '>'                       (rule 34)

	'>'            shift, and enter state 357


State 322

	value -> '[' exp_args0 . ']'                        (rule 33)

	']'            shift, and enter state 356


State 323

	exp_parens -> '(' exp . ')'                         (rule 207)

	')'            shift, and enter state 355


State 324

	cexpop(bexp) -> cexpop(bexp) op_name_ext . bexpop(bexp)    (rule 341)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	bexpop(bexp)   goto state 354
	aexpop(bexp)   goto state 114

State 325

	exp_args_r -> exp_args_r ',' . exp                  (rule 215)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 353
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 326

	declaration -> decl_head '(' exp_args0 ')' . maybe_type_sig ';'    (rule 65)

	':'            shift, and enter state 81
	';'            reduce using rule 67

	maybe_type_sig goto state 352
	type_sig       goto state 80

State 327

	aexpop(bexp) -> bexp op_name_ext .                  (rule 348)

	backslash      reduce using rule 348
	':'            reduce using rule 348
	';'            reduce using rule 348
	','            reduce using rule 348
	'='            reduce using rule 348
	'~'            reduce using rule 348
	'*'            reduce using rule 348
	'&'            reduce using rule 348
	'&&'           reduce using rule 348
	')'            reduce using rule 348
	']'            reduce using rule 348
	'}'            reduce using rule 348
	'<'            reduce using rule 348
	'>'            reduce using rule 348
	As             reduce using rule 348
	opId           reduce using rule 348


State 328

	bexp -> bexp arguments .                            (rule 190)

	backslash      reduce using rule 190
	'->'           reduce using rule 190
	':'            reduce using rule 190
	';'            reduce using rule 190
	','            reduce using rule 190
	'.'            reduce using rule 190
	'='            reduce using rule 190
	'~'            reduce using rule 190
	'*'            reduce using rule 190
	'&'            reduce using rule 190
	'&&'           reduce using rule 190
	'('            reduce using rule 190
	')'            reduce using rule 190
	'['            reduce using rule 190
	']'            reduce using rule 190
	'}'            reduce using rule 190
	'<.'           reduce using rule 190
	'<'            reduce using rule 190
	'>'            reduce using rule 190
	As             reduce using rule 190
	opId           reduce using rule 190


State 329

	bexp -> bexp '->' . var_name                        (rule 192)

	varId          shift, and enter state 4

	var_name       goto state 351
	var_id         goto state 3

State 330

	bexp -> bexp '.' . var_name                         (rule 191)

	varId          shift, and enter state 4

	var_name       goto state 350
	var_id         goto state 3

State 331

	arguments -> '(' . exp_args0 ')'                    (rule 210)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	')'            reduce using rule 211
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 98
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_args0      goto state 349
	exp_args       goto state 108
	exp_args_r     goto state 109
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 332

	bexp -> bexp '[' . exp ']'                          (rule 193)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 348
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 333

	bexp -> bexp '<.' . exp '>'                         (rule 194)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 347
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 334

	dexp -> cexp type_sig .                             (rule 186)

	';'            reduce using rule 186
	','            reduce using rule 186
	')'            reduce using rule 186
	']'            reduce using rule 186
	'}'            reduce using rule 186
	'>'            reduce using rule 186


State 335

	dexp -> cexp As . type                              (rule 187)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 346
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 336

	exp_instr -> prim_id '(' . exp ',' exp ')'          (rule 216)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 345
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 337

	bexpop(bexp) -> op_name_ext aexpop(bexp) .          (rule 344)

	backslash      reduce using rule 344
	':'            reduce using rule 344
	';'            reduce using rule 344
	','            reduce using rule 344
	'='            reduce using rule 344
	'~'            reduce using rule 344
	'*'            reduce using rule 344
	'&'            reduce using rule 344
	'&&'           reduce using rule 344
	')'            reduce using rule 344
	']'            reduce using rule 344
	'}'            reduce using rule 344
	'<'            reduce using rule 344
	'>'            reduce using rule 344
	As             reduce using rule 344
	opId           reduce using rule 344


State 338

	parameters_list_r -> parameters_list_r ',' . parameter    (rule 85)

	varId          shift, and enter state 4

	var_name       goto state 86
	var_id         goto state 3
	parameter      goto state 344

State 339

	constructor_decl -> con_name '(' parameters0 ')' . maybe_init_list    (rule 88)

	':'            shift, and enter state 343
	'{'            reduce using rule 91

	maybe_init_listgoto state 341
	inits          goto state 342

State 340

	parameter -> var_name maybe_type_sig .              (rule 86)

	','            reduce using rule 86
	')'            reduce using rule 86


State 341

	constructor_decl -> con_name '(' parameters0 ')' maybe_init_list .    (rule 88)

	'{'            reduce using rule 88


State 342

	maybe_init_list -> inits .                          (rule 92)

	'{'            reduce using rule 92


State 343

	inits -> ':' . init_list                            (rule 93)

	'('            shift, and enter state 52
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	name           goto state 447
	var_name       goto state 2
	con_name       goto state 51
	var_id         goto state 3
	con_id         goto state 6
	init_list      goto state 448
	init_list_r    goto state 449
	initializer    goto state 450

State 344

	parameters_list_r -> parameters_list_r ',' parameter .    (rule 85)

	','            reduce using rule 85
	')'            reduce using rule 85


State 345

	exp_instr -> prim_id '(' exp . ',' exp ')'          (rule 216)

	','            shift, and enter state 446


State 346

	dexp -> cexp As type .                              (rule 187)

	';'            reduce using rule 187
	','            reduce using rule 187
	')'            reduce using rule 187
	']'            reduce using rule 187
	'}'            reduce using rule 187
	'>'            reduce using rule 187


State 347

	bexp -> bexp '<.' exp . '>'                         (rule 194)

	'>'            shift, and enter state 445


State 348

	bexp -> bexp '[' exp . ']'                          (rule 193)

	']'            shift, and enter state 444


State 349

	arguments -> '(' exp_args0 . ')'                    (rule 210)

	')'            shift, and enter state 443


State 350

	bexp -> bexp '.' var_name .                         (rule 191)

	backslash      reduce using rule 191
	'->'           reduce using rule 191
	':'            reduce using rule 191
	';'            reduce using rule 191
	','            reduce using rule 191
	'.'            reduce using rule 191
	'='            reduce using rule 191
	'~'            reduce using rule 191
	'*'            reduce using rule 191
	'&'            reduce using rule 191
	'&&'           reduce using rule 191
	'('            reduce using rule 191
	')'            reduce using rule 191
	'['            reduce using rule 191
	']'            reduce using rule 191
	'}'            reduce using rule 191
	'<.'           reduce using rule 191
	'<'            reduce using rule 191
	'>'            reduce using rule 191
	As             reduce using rule 191
	opId           reduce using rule 191


State 351

	bexp -> bexp '->' var_name .                        (rule 192)

	backslash      reduce using rule 192
	'->'           reduce using rule 192
	':'            reduce using rule 192
	';'            reduce using rule 192
	','            reduce using rule 192
	'.'            reduce using rule 192
	'='            reduce using rule 192
	'~'            reduce using rule 192
	'*'            reduce using rule 192
	'&'            reduce using rule 192
	'&&'           reduce using rule 192
	'('            reduce using rule 192
	')'            reduce using rule 192
	'['            reduce using rule 192
	']'            reduce using rule 192
	'}'            reduce using rule 192
	'<.'           reduce using rule 192
	'<'            reduce using rule 192
	'>'            reduce using rule 192
	As             reduce using rule 192
	opId           reduce using rule 192


State 352

	declaration -> decl_head '(' exp_args0 ')' maybe_type_sig . ';'    (rule 65)

	';'            shift, and enter state 442


State 353

	exp_args_r -> exp_args_r ',' exp .                  (rule 215)

	','            reduce using rule 215
	')'            reduce using rule 215
	']'            reduce using rule 215
	'>'            reduce using rule 215


State 354

	cexpop(bexp) -> cexpop(bexp) op_name_ext bexpop(bexp) .    (rule 341)

	backslash      reduce using rule 341
	':'            reduce using rule 341
	';'            reduce using rule 341
	','            reduce using rule 341
	'='            reduce using rule 341
	'~'            reduce using rule 341
	'*'            reduce using rule 341
	'&'            reduce using rule 341
	'&&'           reduce using rule 341
	')'            reduce using rule 341
	']'            reduce using rule 341
	'}'            reduce using rule 341
	'<'            reduce using rule 341
	'>'            reduce using rule 341
	As             reduce using rule 341
	opId           reduce using rule 341


State 355

	exp_parens -> '(' exp ')' .                         (rule 207)

	backslash      reduce using rule 207
	'->'           reduce using rule 207
	':'            reduce using rule 207
	';'            reduce using rule 207
	','            reduce using rule 207
	'.'            reduce using rule 207
	'='            reduce using rule 207
	'~'            reduce using rule 207
	'*'            reduce using rule 207
	'&'            reduce using rule 207
	'&&'           reduce using rule 207
	'('            reduce using rule 207
	')'            reduce using rule 207
	'['            reduce using rule 207
	']'            reduce using rule 207
	'}'            reduce using rule 207
	'<.'           reduce using rule 207
	'<'            reduce using rule 207
	'>'            reduce using rule 207
	As             reduce using rule 207
	opId           reduce using rule 207


State 356

	value -> '[' exp_args0 ']' .                        (rule 33)

	backslash      reduce using rule 33
	'->'           reduce using rule 33
	':'            reduce using rule 33
	';'            reduce using rule 33
	','            reduce using rule 33
	'.'            reduce using rule 33
	'='            reduce using rule 33
	'~'            reduce using rule 33
	'*'            reduce using rule 33
	'&'            reduce using rule 33
	'&&'           reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	'}'            reduce using rule 33
	'<.'           reduce using rule 33
	'<'            reduce using rule 33
	'>'            reduce using rule 33
	As             reduce using rule 33
	opId           reduce using rule 33


State 357

	value -> '<.' exp_args0 '>' .                       (rule 34)

	backslash      reduce using rule 34
	'->'           reduce using rule 34
	':'            reduce using rule 34
	';'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	'='            reduce using rule 34
	'~'            reduce using rule 34
	'*'            reduce using rule 34
	'&'            reduce using rule 34
	'&&'           reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	'}'            reduce using rule 34
	'<.'           reduce using rule 34
	'<'            reduce using rule 34
	'>'            reduce using rule 34
	As             reduce using rule 34
	opId           reduce using rule 34


State 358

	kind -> kind . '->' akind                           (rule 258)
	kind_sig -> ':' kind .                              (rule 260)

	'->'           shift, and enter state 441
	';'            reduce using rule 260
	','            reduce using rule 260
	'='            reduce using rule 260
	')'            reduce using rule 260
	']'            reduce using rule 260
	'{'            reduce using rule 260
	'}'            reduce using rule 260
	'>'            reduce using rule 260


State 359

	kind -> akind .                                     (rule 257)

	'->'           reduce using rule 257
	';'            reduce using rule 257
	','            reduce using rule 257
	'='            reduce using rule 257
	')'            reduce using rule 257
	']'            reduce using rule 257
	'{'            reduce using rule 257
	'}'            reduce using rule 257
	'>'            reduce using rule 257


State 360

	akind -> TYPE .                                     (rule 259)

	'->'           reduce using rule 259
	';'            reduce using rule 259
	','            reduce using rule 259
	'='            reduce using rule 259
	')'            reduce using rule 259
	']'            reduce using rule 259
	'{'            reduce using rule 259
	'}'            reduce using rule 259
	'>'            reduce using rule 259


State 361

	ctype -> ctype '->' type_op(btype) .                (rule 220)

	'->'           reduce using rule 220
	':'            reduce using rule 220
	';'            reduce using rule 220
	','            reduce using rule 220
	'='            reduce using rule 220
	')'            reduce using rule 220
	']'            reduce using rule 220
	'{'            reduce using rule 220
	'}'            reduce using rule 220
	'>'            reduce using rule 220


State 362

	type_con_vector(btype) -> btype '<.' exp . '>'      (rule 338)

	'>'            shift, and enter state 440


State 363

	type_con_array(btype) -> btype '[' exp . ']'        (rule 335)

	']'            shift, and enter state 439


State 364

	btype -> atype maybe_scheme type_arguments .        (rule 225)

	backslash      reduce using rule 225
	'->'           reduce using rule 225
	':'            reduce using rule 225
	';'            reduce using rule 225
	','            reduce using rule 225
	'='            reduce using rule 225
	'~'            reduce using rule 225
	'*'            reduce using rule 225
	'&'            reduce using rule 225
	'&&'           reduce using rule 225
	')'            reduce using rule 225
	'[]'           reduce using rule 225
	'['            reduce using rule 225
	']'            reduce using rule 225
	'{'            reduce using rule 225
	'}'            reduce using rule 225
	'<.>'          reduce using rule 225
	'<.'           reduce using rule 225
	'<'            reduce using rule 225
	'>'            reduce using rule 225
	opId           reduce using rule 225


State 365

	ctyop(btype) -> ctyop(btype) op_name_ext btyop(btype) .    (rule 343)

	backslash      reduce using rule 343
	'->'           reduce using rule 343
	':'            reduce using rule 343
	';'            reduce using rule 343
	','            reduce using rule 343
	'='            reduce using rule 343
	'~'            reduce using rule 343
	'*'            reduce using rule 343
	'&'            reduce using rule 343
	'&&'           reduce using rule 343
	')'            reduce using rule 343
	']'            reduce using rule 343
	'{'            reduce using rule 343
	'}'            reduce using rule 343
	'<'            reduce using rule 343
	'>'            reduce using rule 343
	opId           reduce using rule 343


State 366

	atype -> '(' type ')' .                             (rule 232)

	backslash      reduce using rule 232
	'->'           reduce using rule 232
	':'            reduce using rule 232
	';'            reduce using rule 232
	','            reduce using rule 232
	'='            reduce using rule 232
	'~'            reduce using rule 232
	'*'            reduce using rule 232
	'&'            reduce using rule 232
	'&&'           reduce using rule 232
	'('            reduce using rule 232
	')'            reduce using rule 232
	'[]'           reduce using rule 232
	'['            reduce using rule 232
	']'            reduce using rule 232
	'{'            reduce using rule 232
	'}'            reduce using rule 232
	'<.>'          reduce using rule 232
	'<.'           reduce using rule 232
	'<'            reduce using rule 232
	'>'            reduce using rule 232
	opId           reduce using rule 232


State 367

	declaration -> decl_head maybe_type_sig '=' exp ';' .    (rule 64)

	backslash      reduce using rule 64
	';'            reduce using rule 64
	'='            reduce using rule 64
	'_'            reduce using rule 64
	'~'            reduce using rule 64
	'*'            reduce using rule 64
	'&'            reduce using rule 64
	'&&'           reduce using rule 64
	'('            reduce using rule 64
	'[]'           reduce using rule 64
	'['            reduce using rule 64
	'{'            reduce using rule 64
	'}'            reduce using rule 64
	'<.>'          reduce using rule 64
	'<.'           reduce using rule 64
	'<'            reduce using rule 64
	'>'            reduce using rule 64
	Operator       reduce using rule 64
	Static         reduce using rule 64
	Inline         reduce using rule 64
	Recursive      reduce using rule 64
	Extern         reduce using rule 64
	New            reduce using rule 64
	Renew          reduce using rule 64
	Delete         reduce using rule 64
	Module         reduce using rule 64
	Import         reduce using rule 64
	Type           reduce using rule 64
	Alias          reduce using rule 64
	Class          reduce using rule 64
	Inst           reduce using rule 64
	Let            reduce using rule 64
	If             reduce using rule 64
	Else           reduce using rule 64
	Elif           reduce using rule 64
	Case           reduce using rule 64
	Try            reduce using rule 64
	Catch          reduce using rule 64
	Finally        reduce using rule 64
	Throw          reduce using rule 64
	Return         reduce using rule 64
	Break          reduce using rule 64
	Continue       reduce using rule 64
	With           reduce using rule 64
	Do             reduce using rule 64
	While          reduce using rule 64
	For            reduce using rule 64
	Null           reduce using rule 64
	varId          reduce using rule 64
	conId          reduce using rule 64
	opId           reduce using rule 64
	primId         reduce using rule 64
	integer        reduce using rule 64
	double         reduce using rule 64
	char           reduce using rule 64
	string         reduce using rule 64
	boolean        reduce using rule 64
	eof            reduce using rule 64


State 368

	function_decl -> maybe_func_specs var_name maybe_scheme '(' parameters0 . ')' maybe_type_sig    (rule 71)

	')'            shift, and enter state 438


State 369

	pred_list_r -> pred_list_r ',' . pred               (rule 274)

	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 295
	con_name       goto state 296
	var_id         goto state 3
	con_id         goto state 6
	pred           goto state 437
	pred_forall    goto state 298
	pred_isIn      goto state 299

State 370

	scheme -> '<' pred_list0 '>' .                      (rule 263)

	'('            reduce using rule 263


State 371

	pred_isIn -> con_name '(' . type_list ')'           (rule 269)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 407
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_list      goto state 436
	type_list_r    goto state 410
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 372

	stmt_catch -> Catch '(' . exp ')' stmt              (rule 154)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 435
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 373

	stmt_catch_list_r -> stmt_catch_list_r stmt_catch .    (rule 159)

	backslash      reduce using rule 159
	';'            reduce using rule 159
	'='            reduce using rule 159
	'_'            reduce using rule 159
	'~'            reduce using rule 159
	'*'            reduce using rule 159
	'&'            reduce using rule 159
	'&&'           reduce using rule 159
	'('            reduce using rule 159
	'[]'           reduce using rule 159
	'['            reduce using rule 159
	'{'            reduce using rule 159
	'}'            reduce using rule 159
	'<.>'          reduce using rule 159
	'<.'           reduce using rule 159
	'<'            reduce using rule 159
	'>'            reduce using rule 159
	Static         reduce using rule 159
	New            reduce using rule 159
	Renew          reduce using rule 159
	Delete         reduce using rule 159
	Let            reduce using rule 159
	If             reduce using rule 159
	Else           reduce using rule 159
	Elif           reduce using rule 159
	Case           reduce using rule 159
	Try            reduce using rule 159
	Catch          reduce using rule 159
	Finally        reduce using rule 159
	Throw          reduce using rule 159
	Return         reduce using rule 159
	Break          reduce using rule 159
	Continue       reduce using rule 159
	With           reduce using rule 159
	Do             reduce using rule 159
	While          reduce using rule 159
	For            reduce using rule 159
	Null           reduce using rule 159
	varId          reduce using rule 159
	conId          reduce using rule 159
	opId           reduce using rule 159
	primId         reduce using rule 159
	integer        reduce using rule 159
	double         reduce using rule 159
	char           reduce using rule 159
	string         reduce using rule 159
	boolean        reduce using rule 159


State 374

	may_stmt_finally -> stmt_finally .                  (rule 162)

	backslash      reduce using rule 162
	';'            reduce using rule 162
	'='            reduce using rule 162
	'_'            reduce using rule 162
	'~'            reduce using rule 162
	'*'            reduce using rule 162
	'&'            reduce using rule 162
	'&&'           reduce using rule 162
	'('            reduce using rule 162
	'[]'           reduce using rule 162
	'['            reduce using rule 162
	'{'            reduce using rule 162
	'}'            reduce using rule 162
	'<.>'          reduce using rule 162
	'<.'           reduce using rule 162
	'<'            reduce using rule 162
	'>'            reduce using rule 162
	Static         reduce using rule 162
	New            reduce using rule 162
	Renew          reduce using rule 162
	Delete         reduce using rule 162
	Let            reduce using rule 162
	If             reduce using rule 162
	Else           reduce using rule 162
	Elif           reduce using rule 162
	Case           reduce using rule 162
	Try            reduce using rule 162
	Catch          reduce using rule 162
	Finally        reduce using rule 162
	Throw          reduce using rule 162
	Return         reduce using rule 162
	Break          reduce using rule 162
	Continue       reduce using rule 162
	With           reduce using rule 162
	Do             reduce using rule 162
	While          reduce using rule 162
	For            reduce using rule 162
	Null           reduce using rule 162
	varId          reduce using rule 162
	conId          reduce using rule 162
	opId           reduce using rule 162
	primId         reduce using rule 162
	integer        reduce using rule 162
	double         reduce using rule 162
	char           reduce using rule 162
	string         reduce using rule 162
	boolean        reduce using rule 162


State 375

	stmt_try_catch -> stmt_try stmt_catch_list may_stmt_finally .    (rule 152)

	backslash      reduce using rule 152
	';'            reduce using rule 152
	'='            reduce using rule 152
	'_'            reduce using rule 152
	'~'            reduce using rule 152
	'*'            reduce using rule 152
	'&'            reduce using rule 152
	'&&'           reduce using rule 152
	'('            reduce using rule 152
	'[]'           reduce using rule 152
	'['            reduce using rule 152
	'{'            reduce using rule 152
	'}'            reduce using rule 152
	'<.>'          reduce using rule 152
	'<.'           reduce using rule 152
	'<'            reduce using rule 152
	'>'            reduce using rule 152
	Static         reduce using rule 152
	New            reduce using rule 152
	Renew          reduce using rule 152
	Delete         reduce using rule 152
	Let            reduce using rule 152
	If             reduce using rule 152
	Else           reduce using rule 152
	Elif           reduce using rule 152
	Case           reduce using rule 152
	Try            reduce using rule 152
	Catch          reduce using rule 152
	Finally        reduce using rule 152
	Throw          reduce using rule 152
	Return         reduce using rule 152
	Break          reduce using rule 152
	Continue       reduce using rule 152
	With           reduce using rule 152
	Do             reduce using rule 152
	While          reduce using rule 152
	For            reduce using rule 152
	Null           reduce using rule 152
	varId          reduce using rule 152
	conId          reduce using rule 152
	opId           reduce using rule 152
	primId         reduce using rule 152
	integer        reduce using rule 152
	double         reduce using rule 152
	char           reduce using rule 152
	string         reduce using rule 152
	boolean        reduce using rule 152


State 376

	stmt_finally -> Finally . stmt                      (rule 160)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 434
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 377

	stmt_if -> If '(' exp . ')' stmt                    (rule 134)
	stmt_if -> If '(' exp . ')' stmt stmt_elif          (rule 135)
	stmt_if -> If '(' exp . ')' stmt stmt_else          (rule 136)

	')'            shift, and enter state 433


State 378

	stmt_case -> Case '(' exp . ')' case_alts           (rule 146)

	')'            shift, and enter state 432


State 379

	stmt_throw -> Throw exp ';' .                       (rule 133)

	backslash      reduce using rule 133
	';'            reduce using rule 133
	'='            reduce using rule 133
	'_'            reduce using rule 133
	'~'            reduce using rule 133
	'*'            reduce using rule 133
	'&'            reduce using rule 133
	'&&'           reduce using rule 133
	'('            reduce using rule 133
	'[]'           reduce using rule 133
	'['            reduce using rule 133
	'{'            reduce using rule 133
	'}'            reduce using rule 133
	'<.>'          reduce using rule 133
	'<.'           reduce using rule 133
	'<'            reduce using rule 133
	'>'            reduce using rule 133
	Static         reduce using rule 133
	New            reduce using rule 133
	Renew          reduce using rule 133
	Delete         reduce using rule 133
	Let            reduce using rule 133
	If             reduce using rule 133
	Else           reduce using rule 133
	Elif           reduce using rule 133
	Case           reduce using rule 133
	Try            reduce using rule 133
	Catch          reduce using rule 133
	Finally        reduce using rule 133
	Throw          reduce using rule 133
	Return         reduce using rule 133
	Break          reduce using rule 133
	Continue       reduce using rule 133
	With           reduce using rule 133
	Do             reduce using rule 133
	While          reduce using rule 133
	For            reduce using rule 133
	Null           reduce using rule 133
	varId          reduce using rule 133
	conId          reduce using rule 133
	opId           reduce using rule 133
	primId         reduce using rule 133
	integer        reduce using rule 133
	double         reduce using rule 133
	char           reduce using rule 133
	string         reduce using rule 133
	boolean        reduce using rule 133


State 380

	stmt_return -> Return may_exp ';' .                 (rule 132)

	backslash      reduce using rule 132
	';'            reduce using rule 132
	'='            reduce using rule 132
	'_'            reduce using rule 132
	'~'            reduce using rule 132
	'*'            reduce using rule 132
	'&'            reduce using rule 132
	'&&'           reduce using rule 132
	'('            reduce using rule 132
	'[]'           reduce using rule 132
	'['            reduce using rule 132
	'{'            reduce using rule 132
	'}'            reduce using rule 132
	'<.>'          reduce using rule 132
	'<.'           reduce using rule 132
	'<'            reduce using rule 132
	'>'            reduce using rule 132
	Static         reduce using rule 132
	New            reduce using rule 132
	Renew          reduce using rule 132
	Delete         reduce using rule 132
	Let            reduce using rule 132
	If             reduce using rule 132
	Else           reduce using rule 132
	Elif           reduce using rule 132
	Case           reduce using rule 132
	Try            reduce using rule 132
	Catch          reduce using rule 132
	Finally        reduce using rule 132
	Throw          reduce using rule 132
	Return         reduce using rule 132
	Break          reduce using rule 132
	Continue       reduce using rule 132
	With           reduce using rule 132
	Do             reduce using rule 132
	While          reduce using rule 132
	For            reduce using rule 132
	Null           reduce using rule 132
	varId          reduce using rule 132
	conId          reduce using rule 132
	opId           reduce using rule 132
	primId         reduce using rule 132
	integer        reduce using rule 132
	double         reduce using rule 132
	char           reduce using rule 132
	string         reduce using rule 132
	boolean        reduce using rule 132


State 381

	stmt_with -> With '(' exp . ')' stmt                (rule 129)

	')'            shift, and enter state 431


State 382

	stmt_do_while -> Do stmt While . '(' exp ')' ';'    (rule 142)

	'('            shift, and enter state 430


State 383

	stmt_while -> While '(' exp . ')' stmt              (rule 141)

	')'            shift, and enter state 429


State 384

	for_init -> declaration .                           (rule 145)

	backslash      reduce using rule 145
	';'            reduce using rule 145
	'='            reduce using rule 145
	'~'            reduce using rule 145
	'*'            reduce using rule 145
	'&'            reduce using rule 145
	'&&'           reduce using rule 145
	'('            reduce using rule 145
	'[]'           reduce using rule 145
	'['            reduce using rule 145
	'<.>'          reduce using rule 145
	'<.'           reduce using rule 145
	'<'            reduce using rule 145
	'>'            reduce using rule 145
	New            reduce using rule 145
	Renew          reduce using rule 145
	Delete         reduce using rule 145
	Null           reduce using rule 145
	varId          reduce using rule 145
	conId          reduce using rule 145
	opId           reduce using rule 145
	primId         reduce using rule 145
	integer        reduce using rule 145
	double         reduce using rule 145
	char           reduce using rule 145
	string         reduce using rule 145
	boolean        reduce using rule 145


State 385

	stmt_for -> For '(' for_init . may_exp ';' may_exp ')' stmt    (rule 143)

	backslash      shift, and enter state 115
	';'            reduce using rule 208
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 280
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	may_exp        goto state 428
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 386

	for_init -> may_exp . ';'                           (rule 144)

	';'            shift, and enter state 427


State 387

	object_field -> var_name . type_sig maybe_data_field_default    (rule 302)

	':'            shift, and enter state 81

	type_sig       goto state 426

State 388

	object_fields -> '{' object_field_list0 . '}'       (rule 296)

	'}'            shift, and enter state 425


State 389

	object_field_list0 -> object_field_list .           (rule 298)

	'}'            reduce using rule 298


State 390

	object_field_list -> object_field_list_r .          (rule 299)
	object_field_list_r -> object_field_list_r . ',' object_field    (rule 301)

	','            shift, and enter state 424
	'}'            reduce using rule 299


State 391

	object_field_list_r -> object_field .               (rule 300)

	','            reduce using rule 300
	'}'            reduce using rule 300


State 392

	data_field -> type . maybe_data_field_default       (rule 292)

	','            reduce using rule 294
	'='            shift, and enter state 423
	')'            reduce using rule 294

	data_field_defaultgoto state 421
	maybe_data_field_defaultgoto state 422

State 393

	data_fields -> '(' data_field_list0 . ')'           (rule 286)

	')'            shift, and enter state 420


State 394

	data_field_list0 -> data_field_list .               (rule 288)

	')'            reduce using rule 288


State 395

	data_field_list -> data_field_list_r .              (rule 289)
	data_field_list_r -> data_field_list_r . ',' data_field    (rule 291)

	','            shift, and enter state 419
	')'            reduce using rule 289


State 396

	data_field_list_r -> data_field .                   (rule 290)

	','            reduce using rule 290
	')'            reduce using rule 290


State 397

	data_defn -> con_name data_fields ';' .             (rule 279)

	'}'            reduce using rule 279
	conId          reduce using rule 279


State 398

	destructor_decl -> '~' con_name '(' parameters0 ')' .    (rule 90)

	'{'            reduce using rule 90


State 399

	operator_decl -> Operator '(' fixity ',' integer . ',' op_name_list ')' ';'    (rule 324)

	','            shift, and enter state 418


State 400

	function_extern -> Extern var_name '(' parameters0 ')' . type_sig ';'    (rule 72)

	':'            shift, and enter state 81

	type_sig       goto state 417

State 401

	module_block -> '{' top_level_stmts0 '}' .          (rule 58)

	'~'            reduce using rule 58
	'}'            reduce using rule 58
	Operator       reduce using rule 58
	Inline         reduce using rule 58
	Recursive      reduce using rule 58
	Extern         reduce using rule 58
	Module         reduce using rule 58
	Import         reduce using rule 58
	Type           reduce using rule 58
	Alias          reduce using rule 58
	Class          reduce using rule 58
	Inst           reduce using rule 58
	Let            reduce using rule 58
	varId          reduce using rule 58
	conId          reduce using rule 58
	eof            reduce using rule 58


State 402

	type_parameter -> var_name . maybe_kind_sig         (rule 239)

	':'            shift, and enter state 316
	','            reduce using rule 261
	')'            reduce using rule 261

	kind_sig       goto state 415
	maybe_kind_sig goto state 416

State 403

	type_parameter_list_r -> type_parameter .           (rule 244)

	','            reduce using rule 244
	')'            reduce using rule 244


State 404

	type_parameters -> '(' type_parameter_list0 . ')'    (rule 240)

	')'            shift, and enter state 414


State 405

	type_parameter_list0 -> type_parameter_list .       (rule 242)

	')'            reduce using rule 242


State 406

	type_parameter_list -> type_parameter_list_r .      (rule 243)
	type_parameter_list_r -> type_parameter_list_r . ',' type_parameter    (rule 245)

	','            shift, and enter state 413
	')'            reduce using rule 243


State 407

	type_list_r -> type .                               (rule 237)

	','            reduce using rule 237
	')'            reduce using rule 237


State 408

	type_arguments -> '(' type_list0 . ')'              (rule 233)

	')'            shift, and enter state 412


State 409

	type_list0 -> type_list .                           (rule 235)

	')'            reduce using rule 235


State 410

	type_list -> type_list_r .                          (rule 236)
	type_list_r -> type_list_r . ',' type               (rule 238)

	','            shift, and enter state 411
	')'            reduce using rule 236


State 411

	type_list_r -> type_list_r ',' . type               (rule 238)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 474
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 412

	type_arguments -> '(' type_list0 ')' .              (rule 233)

	backslash      reduce using rule 233
	'->'           reduce using rule 233
	':'            reduce using rule 233
	';'            reduce using rule 233
	','            reduce using rule 233
	'='            reduce using rule 233
	'~'            reduce using rule 233
	'*'            reduce using rule 233
	'&'            reduce using rule 233
	'&&'           reduce using rule 233
	')'            reduce using rule 233
	'[]'           reduce using rule 233
	'['            reduce using rule 233
	']'            reduce using rule 233
	'{'            reduce using rule 233
	'}'            reduce using rule 233
	'<.>'          reduce using rule 233
	'<.'           reduce using rule 233
	'<'            reduce using rule 233
	'>'            reduce using rule 233
	opId           reduce using rule 233


State 413

	type_parameter_list_r -> type_parameter_list_r ',' . type_parameter    (rule 245)

	varId          shift, and enter state 4

	var_name       goto state 402
	var_id         goto state 3
	type_parameter goto state 473

State 414

	type_parameters -> '(' type_parameter_list0 ')' .    (rule 240)

	';'            reduce using rule 240
	'='            reduce using rule 240
	'{'            reduce using rule 240


State 415

	maybe_kind_sig -> kind_sig .                        (rule 262)

	','            reduce using rule 262
	')'            reduce using rule 262


State 416

	type_parameter -> var_name maybe_kind_sig .         (rule 239)

	','            reduce using rule 239
	')'            reduce using rule 239


State 417

	function_extern -> Extern var_name '(' parameters0 ')' type_sig . ';'    (rule 72)

	';'            shift, and enter state 472


State 418

	operator_decl -> Operator '(' fixity ',' integer ',' . op_name_list ')' ';'    (rule 324)

	opId           shift, and enter state 132

	op_name        goto state 469
	op_id          goto state 248
	op_name_list   goto state 470
	op_name_list_r goto state 471

State 419

	data_field_list_r -> data_field_list_r ',' . data_field    (rule 291)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 157
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	VOID           shift, and enter state 158
	I1             shift, and enter state 159
	I8             shift, and enter state 160
	I16            shift, and enter state 161
	I32            shift, and enter state 162
	I64            shift, and enter state 163
	I128           shift, and enter state 164
	Fp16           shift, and enter state 165
	Fp32           shift, and enter state 166
	Fp64           shift, and enter state 167
	Fp128          shift, and enter state 168
	Const          shift, and enter state 169
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132

	var_name       goto state 139
	con_name       goto state 140
	op_name_ext    goto state 141
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	type           goto state 392
	etype          goto state 143
	ctype          goto state 144
	btype          goto state 145
	atype          goto state 146
	type_con_void  goto state 147
	type_con_int   goto state 148
	type_con_fp    goto state 149
	data_field     goto state 468
	type_con_array(btype)goto state 150
	type_con_const(btype)goto state 151
	type_con_vector(btype)goto state 152
	type_op(btype) goto state 153
	ctyop(btype)   goto state 154
	btyop(btype)   goto state 155
	atyop(btype)   goto state 156

State 420

	data_fields -> '(' data_field_list0 ')' .           (rule 286)

	';'            reduce using rule 286


State 421

	maybe_data_field_default -> data_field_default .    (rule 295)

	','            reduce using rule 295
	')'            reduce using rule 295
	'}'            reduce using rule 295


State 422

	data_field -> type maybe_data_field_default .       (rule 292)

	','            reduce using rule 292
	')'            reduce using rule 292


State 423

	data_field_default -> '=' . exp                     (rule 293)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 467
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 424

	object_field_list_r -> object_field_list_r ',' . object_field    (rule 301)

	varId          shift, and enter state 4

	var_name       goto state 387
	var_id         goto state 3
	object_field   goto state 466

State 425

	object_fields -> '{' object_field_list0 '}' .       (rule 296)

	'}'            reduce using rule 296
	conId          reduce using rule 296


State 426

	object_field -> var_name type_sig . maybe_data_field_default    (rule 302)

	','            reduce using rule 294
	'='            shift, and enter state 423
	'}'            reduce using rule 294

	data_field_defaultgoto state 421
	maybe_data_field_defaultgoto state 465

State 427

	for_init -> may_exp ';' .                           (rule 144)

	backslash      reduce using rule 144
	';'            reduce using rule 144
	'='            reduce using rule 144
	'~'            reduce using rule 144
	'*'            reduce using rule 144
	'&'            reduce using rule 144
	'&&'           reduce using rule 144
	'('            reduce using rule 144
	'[]'           reduce using rule 144
	'['            reduce using rule 144
	'<.>'          reduce using rule 144
	'<.'           reduce using rule 144
	'<'            reduce using rule 144
	'>'            reduce using rule 144
	New            reduce using rule 144
	Renew          reduce using rule 144
	Delete         reduce using rule 144
	Null           reduce using rule 144
	varId          reduce using rule 144
	conId          reduce using rule 144
	opId           reduce using rule 144
	primId         reduce using rule 144
	integer        reduce using rule 144
	double         reduce using rule 144
	char           reduce using rule 144
	string         reduce using rule 144
	boolean        reduce using rule 144


State 428

	stmt_for -> For '(' for_init may_exp . ';' may_exp ')' stmt    (rule 143)

	';'            shift, and enter state 464


State 429

	stmt_while -> While '(' exp ')' . stmt              (rule 141)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 463
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 430

	stmt_do_while -> Do stmt While '(' . exp ')' ';'    (rule 142)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 462
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 431

	stmt_with -> With '(' exp ')' . stmt                (rule 129)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 461
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 432

	stmt_case -> Case '(' exp ')' . case_alts           (rule 146)

	'{'            shift, and enter state 460

	case_alts      goto state 459

State 433

	stmt_if -> If '(' exp ')' . stmt                    (rule 134)
	stmt_if -> If '(' exp ')' . stmt stmt_elif          (rule 135)
	stmt_if -> If '(' exp ')' . stmt stmt_else          (rule 136)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 458
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 434

	stmt_finally -> Finally stmt .                      (rule 160)

	backslash      reduce using rule 160
	';'            reduce using rule 160
	'='            reduce using rule 160
	'_'            reduce using rule 160
	'~'            reduce using rule 160
	'*'            reduce using rule 160
	'&'            reduce using rule 160
	'&&'           reduce using rule 160
	'('            reduce using rule 160
	'[]'           reduce using rule 160
	'['            reduce using rule 160
	'{'            reduce using rule 160
	'}'            reduce using rule 160
	'<.>'          reduce using rule 160
	'<.'           reduce using rule 160
	'<'            reduce using rule 160
	'>'            reduce using rule 160
	Static         reduce using rule 160
	New            reduce using rule 160
	Renew          reduce using rule 160
	Delete         reduce using rule 160
	Let            reduce using rule 160
	If             reduce using rule 160
	Else           reduce using rule 160
	Elif           reduce using rule 160
	Case           reduce using rule 160
	Try            reduce using rule 160
	Catch          reduce using rule 160
	Finally        reduce using rule 160
	Throw          reduce using rule 160
	Return         reduce using rule 160
	Break          reduce using rule 160
	Continue       reduce using rule 160
	With           reduce using rule 160
	Do             reduce using rule 160
	While          reduce using rule 160
	For            reduce using rule 160
	Null           reduce using rule 160
	varId          reduce using rule 160
	conId          reduce using rule 160
	opId           reduce using rule 160
	primId         reduce using rule 160
	integer        reduce using rule 160
	double         reduce using rule 160
	char           reduce using rule 160
	string         reduce using rule 160
	boolean        reduce using rule 160


State 435

	stmt_catch -> Catch '(' exp . ')' stmt              (rule 154)

	')'            shift, and enter state 457


State 436

	pred_isIn -> con_name '(' type_list . ')'           (rule 269)

	')'            shift, and enter state 456


State 437

	pred_list_r -> pred_list_r ',' pred .               (rule 274)

	','            reduce using rule 274
	'>'            reduce using rule 274


State 438

	function_decl -> maybe_func_specs var_name maybe_scheme '(' parameters0 ')' . maybe_type_sig    (rule 71)

	':'            shift, and enter state 81
	';'            reduce using rule 67
	'{'            reduce using rule 67

	maybe_type_sig goto state 455
	type_sig       goto state 80

State 439

	type_con_array(btype) -> btype '[' exp ']' .        (rule 335)

	backslash      reduce using rule 335
	'->'           reduce using rule 335
	':'            reduce using rule 335
	';'            reduce using rule 335
	','            reduce using rule 335
	'='            reduce using rule 335
	'~'            reduce using rule 335
	'*'            reduce using rule 335
	'&'            reduce using rule 335
	'&&'           reduce using rule 335
	')'            reduce using rule 335
	'[]'           reduce using rule 335
	'['            reduce using rule 335
	']'            reduce using rule 335
	'{'            reduce using rule 335
	'}'            reduce using rule 335
	'<.>'          reduce using rule 335
	'<.'           reduce using rule 335
	'<'            reduce using rule 335
	'>'            reduce using rule 335
	opId           reduce using rule 335


State 440

	type_con_vector(btype) -> btype '<.' exp '>' .      (rule 338)

	backslash      reduce using rule 338
	'->'           reduce using rule 338
	':'            reduce using rule 338
	';'            reduce using rule 338
	','            reduce using rule 338
	'='            reduce using rule 338
	'~'            reduce using rule 338
	'*'            reduce using rule 338
	'&'            reduce using rule 338
	'&&'           reduce using rule 338
	')'            reduce using rule 338
	'[]'           reduce using rule 338
	'['            reduce using rule 338
	']'            reduce using rule 338
	'{'            reduce using rule 338
	'}'            reduce using rule 338
	'<.>'          reduce using rule 338
	'<.'           reduce using rule 338
	'<'            reduce using rule 338
	'>'            reduce using rule 338
	opId           reduce using rule 338


State 441

	kind -> kind '->' . akind                           (rule 258)

	TYPE           shift, and enter state 360

	akind          goto state 454

State 442

	declaration -> decl_head '(' exp_args0 ')' maybe_type_sig ';' .    (rule 65)

	backslash      reduce using rule 65
	';'            reduce using rule 65
	'='            reduce using rule 65
	'_'            reduce using rule 65
	'~'            reduce using rule 65
	'*'            reduce using rule 65
	'&'            reduce using rule 65
	'&&'           reduce using rule 65
	'('            reduce using rule 65
	'[]'           reduce using rule 65
	'['            reduce using rule 65
	'{'            reduce using rule 65
	'}'            reduce using rule 65
	'<.>'          reduce using rule 65
	'<.'           reduce using rule 65
	'<'            reduce using rule 65
	'>'            reduce using rule 65
	Operator       reduce using rule 65
	Static         reduce using rule 65
	Inline         reduce using rule 65
	Recursive      reduce using rule 65
	Extern         reduce using rule 65
	New            reduce using rule 65
	Renew          reduce using rule 65
	Delete         reduce using rule 65
	Module         reduce using rule 65
	Import         reduce using rule 65
	Type           reduce using rule 65
	Alias          reduce using rule 65
	Class          reduce using rule 65
	Inst           reduce using rule 65
	Let            reduce using rule 65
	If             reduce using rule 65
	Else           reduce using rule 65
	Elif           reduce using rule 65
	Case           reduce using rule 65
	Try            reduce using rule 65
	Catch          reduce using rule 65
	Finally        reduce using rule 65
	Throw          reduce using rule 65
	Return         reduce using rule 65
	Break          reduce using rule 65
	Continue       reduce using rule 65
	With           reduce using rule 65
	Do             reduce using rule 65
	While          reduce using rule 65
	For            reduce using rule 65
	Null           reduce using rule 65
	varId          reduce using rule 65
	conId          reduce using rule 65
	opId           reduce using rule 65
	primId         reduce using rule 65
	integer        reduce using rule 65
	double         reduce using rule 65
	char           reduce using rule 65
	string         reduce using rule 65
	boolean        reduce using rule 65
	eof            reduce using rule 65


State 443

	arguments -> '(' exp_args0 ')' .                    (rule 210)

	backslash      reduce using rule 210
	'->'           reduce using rule 210
	':'            reduce using rule 210
	';'            reduce using rule 210
	','            reduce using rule 210
	'.'            reduce using rule 210
	'='            reduce using rule 210
	'~'            reduce using rule 210
	'*'            reduce using rule 210
	'&'            reduce using rule 210
	'&&'           reduce using rule 210
	'('            reduce using rule 210
	')'            reduce using rule 210
	'['            reduce using rule 210
	']'            reduce using rule 210
	'}'            reduce using rule 210
	'<.'           reduce using rule 210
	'<'            reduce using rule 210
	'>'            reduce using rule 210
	As             reduce using rule 210
	opId           reduce using rule 210


State 444

	bexp -> bexp '[' exp ']' .                          (rule 193)

	backslash      reduce using rule 193
	'->'           reduce using rule 193
	':'            reduce using rule 193
	';'            reduce using rule 193
	','            reduce using rule 193
	'.'            reduce using rule 193
	'='            reduce using rule 193
	'~'            reduce using rule 193
	'*'            reduce using rule 193
	'&'            reduce using rule 193
	'&&'           reduce using rule 193
	'('            reduce using rule 193
	')'            reduce using rule 193
	'['            reduce using rule 193
	']'            reduce using rule 193
	'}'            reduce using rule 193
	'<.'           reduce using rule 193
	'<'            reduce using rule 193
	'>'            reduce using rule 193
	As             reduce using rule 193
	opId           reduce using rule 193


State 445

	bexp -> bexp '<.' exp '>' .                         (rule 194)

	backslash      reduce using rule 194
	'->'           reduce using rule 194
	':'            reduce using rule 194
	';'            reduce using rule 194
	','            reduce using rule 194
	'.'            reduce using rule 194
	'='            reduce using rule 194
	'~'            reduce using rule 194
	'*'            reduce using rule 194
	'&'            reduce using rule 194
	'&&'           reduce using rule 194
	'('            reduce using rule 194
	')'            reduce using rule 194
	'['            reduce using rule 194
	']'            reduce using rule 194
	'}'            reduce using rule 194
	'<.'           reduce using rule 194
	'<'            reduce using rule 194
	'>'            reduce using rule 194
	As             reduce using rule 194
	opId           reduce using rule 194


State 446

	exp_instr -> prim_id '(' exp ',' . exp ')'          (rule 216)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 453
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 447

	initializer -> name . '(' exp_args0 ')'             (rule 97)

	'('            shift, and enter state 452


State 448

	inits -> ':' init_list .                            (rule 93)

	'{'            reduce using rule 93


State 449

	init_list -> init_list_r .                          (rule 94)
	init_list_r -> init_list_r . ',' initializer        (rule 96)

	','            shift, and enter state 451
	'{'            reduce using rule 94


State 450

	init_list_r -> initializer .                        (rule 95)

	','            reduce using rule 95
	'{'            reduce using rule 95


State 451

	init_list_r -> init_list_r ',' . initializer        (rule 96)

	'('            shift, and enter state 52
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	name           goto state 447
	var_name       goto state 2
	con_name       goto state 51
	var_id         goto state 3
	con_id         goto state 6
	initializer    goto state 497

State 452

	initializer -> name '(' . exp_args0 ')'             (rule 97)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	')'            reduce using rule 211
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 98
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_args0      goto state 496
	exp_args       goto state 108
	exp_args_r     goto state 109
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 453

	exp_instr -> prim_id '(' exp ',' exp . ')'          (rule 216)

	')'            shift, and enter state 495


State 454

	kind -> kind '->' akind .                           (rule 258)

	'->'           reduce using rule 258
	';'            reduce using rule 258
	','            reduce using rule 258
	'='            reduce using rule 258
	')'            reduce using rule 258
	']'            reduce using rule 258
	'{'            reduce using rule 258
	'}'            reduce using rule 258
	'>'            reduce using rule 258


State 455

	function_decl -> maybe_func_specs var_name maybe_scheme '(' parameters0 ')' maybe_type_sig .    (rule 71)

	';'            reduce using rule 71
	'{'            reduce using rule 71


State 456

	pred_isIn -> con_name '(' type_list ')' .           (rule 269)

	','            reduce using rule 269
	'>'            reduce using rule 269


State 457

	stmt_catch -> Catch '(' exp ')' . stmt              (rule 154)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 494
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 458

	stmt_if -> If '(' exp ')' stmt .                    (rule 134)
	stmt_if -> If '(' exp ')' stmt . stmt_elif          (rule 135)
	stmt_if -> If '(' exp ')' stmt . stmt_else          (rule 136)

	backslash      reduce using rule 134
	';'            reduce using rule 134
	'='            reduce using rule 134
	'_'            reduce using rule 134
	'~'            reduce using rule 134
	'*'            reduce using rule 134
	'&'            reduce using rule 134
	'&&'           reduce using rule 134
	'('            reduce using rule 134
	'[]'           reduce using rule 134
	'['            reduce using rule 134
	'{'            reduce using rule 134
	'}'            reduce using rule 134
	'<.>'          reduce using rule 134
	'<.'           reduce using rule 134
	'<'            reduce using rule 134
	'>'            reduce using rule 134
	Static         reduce using rule 134
	New            reduce using rule 134
	Renew          reduce using rule 134
	Delete         reduce using rule 134
	Let            reduce using rule 134
	If             reduce using rule 134
	Else           shift, and enter state 492
	Elif           shift, and enter state 493
	Case           reduce using rule 134
	Try            reduce using rule 134
	Catch          reduce using rule 134
	Finally        reduce using rule 134
	Throw          reduce using rule 134
	Return         reduce using rule 134
	Break          reduce using rule 134
	Continue       reduce using rule 134
	With           reduce using rule 134
	Do             reduce using rule 134
	While          reduce using rule 134
	For            reduce using rule 134
	Null           reduce using rule 134
	varId          reduce using rule 134
	conId          reduce using rule 134
	opId           reduce using rule 134
	primId         reduce using rule 134
	integer        reduce using rule 134
	double         reduce using rule 134
	char           reduce using rule 134
	string         reduce using rule 134
	boolean        reduce using rule 134

	stmt_elif      goto state 490
	stmt_else      goto state 491

State 459

	stmt_case -> Case '(' exp ')' case_alts .           (rule 146)

	backslash      reduce using rule 146
	';'            reduce using rule 146
	'='            reduce using rule 146
	'_'            reduce using rule 146
	'~'            reduce using rule 146
	'*'            reduce using rule 146
	'&'            reduce using rule 146
	'&&'           reduce using rule 146
	'('            reduce using rule 146
	'[]'           reduce using rule 146
	'['            reduce using rule 146
	'{'            reduce using rule 146
	'}'            reduce using rule 146
	'<.>'          reduce using rule 146
	'<.'           reduce using rule 146
	'<'            reduce using rule 146
	'>'            reduce using rule 146
	Static         reduce using rule 146
	New            reduce using rule 146
	Renew          reduce using rule 146
	Delete         reduce using rule 146
	Let            reduce using rule 146
	If             reduce using rule 146
	Else           reduce using rule 146
	Elif           reduce using rule 146
	Case           reduce using rule 146
	Try            reduce using rule 146
	Catch          reduce using rule 146
	Finally        reduce using rule 146
	Throw          reduce using rule 146
	Return         reduce using rule 146
	Break          reduce using rule 146
	Continue       reduce using rule 146
	With           reduce using rule 146
	Do             reduce using rule 146
	While          reduce using rule 146
	For            reduce using rule 146
	Null           reduce using rule 146
	varId          reduce using rule 146
	conId          reduce using rule 146
	opId           reduce using rule 146
	primId         reduce using rule 146
	integer        reduce using rule 146
	double         reduce using rule 146
	char           reduce using rule 146
	string         reduce using rule 146
	boolean        reduce using rule 146


State 460

	case_alts -> '{' . case_alt_list '}'                (rule 147)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	case_alt_list  goto state 481
	case_alt_list_rgoto state 482
	case_alt       goto state 483
	pat            goto state 484
	bpat           goto state 485
	apat           goto state 486
	pat_var        goto state 487

State 461

	stmt_with -> With '(' exp ')' stmt .                (rule 129)

	backslash      reduce using rule 129
	';'            reduce using rule 129
	'='            reduce using rule 129
	'_'            reduce using rule 129
	'~'            reduce using rule 129
	'*'            reduce using rule 129
	'&'            reduce using rule 129
	'&&'           reduce using rule 129
	'('            reduce using rule 129
	'[]'           reduce using rule 129
	'['            reduce using rule 129
	'{'            reduce using rule 129
	'}'            reduce using rule 129
	'<.>'          reduce using rule 129
	'<.'           reduce using rule 129
	'<'            reduce using rule 129
	'>'            reduce using rule 129
	Static         reduce using rule 129
	New            reduce using rule 129
	Renew          reduce using rule 129
	Delete         reduce using rule 129
	Let            reduce using rule 129
	If             reduce using rule 129
	Else           reduce using rule 129
	Elif           reduce using rule 129
	Case           reduce using rule 129
	Try            reduce using rule 129
	Catch          reduce using rule 129
	Finally        reduce using rule 129
	Throw          reduce using rule 129
	Return         reduce using rule 129
	Break          reduce using rule 129
	Continue       reduce using rule 129
	With           reduce using rule 129
	Do             reduce using rule 129
	While          reduce using rule 129
	For            reduce using rule 129
	Null           reduce using rule 129
	varId          reduce using rule 129
	conId          reduce using rule 129
	opId           reduce using rule 129
	primId         reduce using rule 129
	integer        reduce using rule 129
	double         reduce using rule 129
	char           reduce using rule 129
	string         reduce using rule 129
	boolean        reduce using rule 129


State 462

	stmt_do_while -> Do stmt While '(' exp . ')' ';'    (rule 142)

	')'            shift, and enter state 478


State 463

	stmt_while -> While '(' exp ')' stmt .              (rule 141)

	backslash      reduce using rule 141
	';'            reduce using rule 141
	'='            reduce using rule 141
	'_'            reduce using rule 141
	'~'            reduce using rule 141
	'*'            reduce using rule 141
	'&'            reduce using rule 141
	'&&'           reduce using rule 141
	'('            reduce using rule 141
	'[]'           reduce using rule 141
	'['            reduce using rule 141
	'{'            reduce using rule 141
	'}'            reduce using rule 141
	'<.>'          reduce using rule 141
	'<.'           reduce using rule 141
	'<'            reduce using rule 141
	'>'            reduce using rule 141
	Static         reduce using rule 141
	New            reduce using rule 141
	Renew          reduce using rule 141
	Delete         reduce using rule 141
	Let            reduce using rule 141
	If             reduce using rule 141
	Else           reduce using rule 141
	Elif           reduce using rule 141
	Case           reduce using rule 141
	Try            reduce using rule 141
	Catch          reduce using rule 141
	Finally        reduce using rule 141
	Throw          reduce using rule 141
	Return         reduce using rule 141
	Break          reduce using rule 141
	Continue       reduce using rule 141
	With           reduce using rule 141
	Do             reduce using rule 141
	While          reduce using rule 141
	For            reduce using rule 141
	Null           reduce using rule 141
	varId          reduce using rule 141
	conId          reduce using rule 141
	opId           reduce using rule 141
	primId         reduce using rule 141
	integer        reduce using rule 141
	double         reduce using rule 141
	char           reduce using rule 141
	string         reduce using rule 141
	boolean        reduce using rule 141


State 464

	stmt_for -> For '(' for_init may_exp ';' . may_exp ')' stmt    (rule 143)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	')'            reduce using rule 208
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 280
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	may_exp        goto state 477
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 465

	object_field -> var_name type_sig maybe_data_field_default .    (rule 302)

	','            reduce using rule 302
	'}'            reduce using rule 302


State 466

	object_field_list_r -> object_field_list_r ',' object_field .    (rule 301)

	','            reduce using rule 301
	'}'            reduce using rule 301


State 467

	data_field_default -> '=' exp .                     (rule 293)

	','            reduce using rule 293
	')'            reduce using rule 293
	'}'            reduce using rule 293


State 468

	data_field_list_r -> data_field_list_r ',' data_field .    (rule 291)

	','            reduce using rule 291
	')'            reduce using rule 291


State 469

	op_name_list_r -> op_name .                         (rule 331)

	','            reduce using rule 331
	')'            reduce using rule 331


State 470

	operator_decl -> Operator '(' fixity ',' integer ',' op_name_list . ')' ';'    (rule 324)

	')'            shift, and enter state 476


State 471

	op_name_list -> op_name_list_r .                    (rule 330)
	op_name_list_r -> op_name_list_r . ',' op_name      (rule 332)

	','            shift, and enter state 475
	')'            reduce using rule 330


State 472

	function_extern -> Extern var_name '(' parameters0 ')' type_sig ';' .    (rule 72)

	'~'            reduce using rule 72
	'}'            reduce using rule 72
	Operator       reduce using rule 72
	Inline         reduce using rule 72
	Recursive      reduce using rule 72
	Extern         reduce using rule 72
	Module         reduce using rule 72
	Import         reduce using rule 72
	Type           reduce using rule 72
	Alias          reduce using rule 72
	Class          reduce using rule 72
	Inst           reduce using rule 72
	Let            reduce using rule 72
	varId          reduce using rule 72
	conId          reduce using rule 72
	eof            reduce using rule 72


State 473

	type_parameter_list_r -> type_parameter_list_r ',' type_parameter .    (rule 245)

	','            reduce using rule 245
	')'            reduce using rule 245


State 474

	type_list_r -> type_list_r ',' type .               (rule 238)

	','            reduce using rule 238
	')'            reduce using rule 238


State 475

	op_name_list_r -> op_name_list_r ',' . op_name      (rule 332)

	opId           shift, and enter state 132

	op_name        goto state 511
	op_id          goto state 248

State 476

	operator_decl -> Operator '(' fixity ',' integer ',' op_name_list ')' . ';'    (rule 324)

	';'            shift, and enter state 510


State 477

	stmt_for -> For '(' for_init may_exp ';' may_exp . ')' stmt    (rule 143)

	')'            shift, and enter state 509


State 478

	stmt_do_while -> Do stmt While '(' exp ')' . ';'    (rule 142)

	';'            shift, and enter state 508


State 479

	bpat -> var_name . '@' bpat                         (rule 166)
	pat_var -> var_name .                               (rule 173)

	backslash      reduce using rule 173
	';'            reduce using rule 173
	','            reduce using rule 173
	'='            reduce using rule 173
	'~'            reduce using rule 173
	'*'            reduce using rule 173
	'&'            reduce using rule 173
	'&&'           reduce using rule 173
	'@'            shift, and enter state 507
	'('            reduce using rule 173
	')'            reduce using rule 173
	'[]'           reduce using rule 173
	'['            reduce using rule 173
	'{'            reduce using rule 173
	'}'            reduce using rule 173
	'<.>'          reduce using rule 173
	'<.'           reduce using rule 173
	'<'            reduce using rule 173
	'>'            reduce using rule 173
	Static         reduce using rule 173
	New            reduce using rule 173
	Renew          reduce using rule 173
	Delete         reduce using rule 173
	Let            reduce using rule 173
	If             reduce using rule 173
	Case           reduce using rule 173
	Try            reduce using rule 173
	Throw          reduce using rule 173
	Return         reduce using rule 173
	Break          reduce using rule 173
	Continue       reduce using rule 173
	With           reduce using rule 173
	Do             reduce using rule 173
	While          reduce using rule 173
	For            reduce using rule 173
	Null           reduce using rule 173
	varId          reduce using rule 173
	conId          reduce using rule 173
	opId           reduce using rule 173
	primId         reduce using rule 173
	integer        reduce using rule 173
	double         reduce using rule 173
	char           reduce using rule 173
	string         reduce using rule 173
	boolean        reduce using rule 173


State 480

	bpat -> con_name . '(' pat_list0 ')'                (rule 167)
	bpat -> con_name . '{' pat_rec_field_list0 '}'      (rule 168)

	'('            shift, and enter state 505
	'{'            shift, and enter state 506


State 481

	case_alts -> '{' case_alt_list . '}'                (rule 147)

	'}'            shift, and enter state 504


State 482

	case_alt_list -> case_alt_list_r .                  (rule 148)
	case_alt_list_r -> case_alt_list_r . case_alt       (rule 150)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	'}'            reduce using rule 148
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	case_alt       goto state 503
	pat            goto state 484
	bpat           goto state 485
	apat           goto state 486
	pat_var        goto state 487

State 483

	case_alt_list_r -> case_alt .                       (rule 149)

	'_'            reduce using rule 149
	'('            reduce using rule 149
	'}'            reduce using rule 149
	varId          reduce using rule 149
	conId          reduce using rule 149


State 484

	case_alt -> pat . stmt                              (rule 151)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 502
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 485

	pat -> bpat .                                       (rule 163)

	backslash      reduce using rule 163
	';'            reduce using rule 163
	','            reduce using rule 163
	'='            reduce using rule 163
	'~'            reduce using rule 163
	'*'            reduce using rule 163
	'&'            reduce using rule 163
	'&&'           reduce using rule 163
	'('            reduce using rule 163
	')'            reduce using rule 163
	'[]'           reduce using rule 163
	'['            reduce using rule 163
	'{'            reduce using rule 163
	'}'            reduce using rule 163
	'<.>'          reduce using rule 163
	'<.'           reduce using rule 163
	'<'            reduce using rule 163
	'>'            reduce using rule 163
	Static         reduce using rule 163
	New            reduce using rule 163
	Renew          reduce using rule 163
	Delete         reduce using rule 163
	Let            reduce using rule 163
	If             reduce using rule 163
	Case           reduce using rule 163
	Try            reduce using rule 163
	Throw          reduce using rule 163
	Return         reduce using rule 163
	Break          reduce using rule 163
	Continue       reduce using rule 163
	With           reduce using rule 163
	Do             reduce using rule 163
	While          reduce using rule 163
	For            reduce using rule 163
	Null           reduce using rule 163
	varId          reduce using rule 163
	conId          reduce using rule 163
	opId           reduce using rule 163
	primId         reduce using rule 163
	integer        reduce using rule 163
	double         reduce using rule 163
	char           reduce using rule 163
	string         reduce using rule 163
	boolean        reduce using rule 163


State 486

	bpat -> apat .                                      (rule 169)

	backslash      reduce using rule 169
	';'            reduce using rule 169
	','            reduce using rule 169
	'='            reduce using rule 169
	'~'            reduce using rule 169
	'*'            reduce using rule 169
	'&'            reduce using rule 169
	'&&'           reduce using rule 169
	'('            reduce using rule 169
	')'            reduce using rule 169
	'[]'           reduce using rule 169
	'['            reduce using rule 169
	'{'            reduce using rule 169
	'}'            reduce using rule 169
	'<.>'          reduce using rule 169
	'<.'           reduce using rule 169
	'<'            reduce using rule 169
	'>'            reduce using rule 169
	Static         reduce using rule 169
	New            reduce using rule 169
	Renew          reduce using rule 169
	Delete         reduce using rule 169
	Let            reduce using rule 169
	If             reduce using rule 169
	Case           reduce using rule 169
	Try            reduce using rule 169
	Throw          reduce using rule 169
	Return         reduce using rule 169
	Break          reduce using rule 169
	Continue       reduce using rule 169
	With           reduce using rule 169
	Do             reduce using rule 169
	While          reduce using rule 169
	For            reduce using rule 169
	Null           reduce using rule 169
	varId          reduce using rule 169
	conId          reduce using rule 169
	opId           reduce using rule 169
	primId         reduce using rule 169
	integer        reduce using rule 169
	double         reduce using rule 169
	char           reduce using rule 169
	string         reduce using rule 169
	boolean        reduce using rule 169


State 487

	apat -> pat_var .                                   (rule 170)

	backslash      reduce using rule 170
	';'            reduce using rule 170
	','            reduce using rule 170
	'='            reduce using rule 170
	'~'            reduce using rule 170
	'*'            reduce using rule 170
	'&'            reduce using rule 170
	'&&'           reduce using rule 170
	'('            reduce using rule 170
	')'            reduce using rule 170
	'[]'           reduce using rule 170
	'['            reduce using rule 170
	'{'            reduce using rule 170
	'}'            reduce using rule 170
	'<.>'          reduce using rule 170
	'<.'           reduce using rule 170
	'<'            reduce using rule 170
	'>'            reduce using rule 170
	Static         reduce using rule 170
	New            reduce using rule 170
	Renew          reduce using rule 170
	Delete         reduce using rule 170
	Let            reduce using rule 170
	If             reduce using rule 170
	Case           reduce using rule 170
	Try            reduce using rule 170
	Throw          reduce using rule 170
	Return         reduce using rule 170
	Break          reduce using rule 170
	Continue       reduce using rule 170
	With           reduce using rule 170
	Do             reduce using rule 170
	While          reduce using rule 170
	For            reduce using rule 170
	Null           reduce using rule 170
	varId          reduce using rule 170
	conId          reduce using rule 170
	opId           reduce using rule 170
	primId         reduce using rule 170
	integer        reduce using rule 170
	double         reduce using rule 170
	char           reduce using rule 170
	string         reduce using rule 170
	boolean        reduce using rule 170


State 488

	apat -> '_' .                                       (rule 172)

	backslash      reduce using rule 172
	';'            reduce using rule 172
	','            reduce using rule 172
	'='            reduce using rule 172
	'~'            reduce using rule 172
	'*'            reduce using rule 172
	'&'            reduce using rule 172
	'&&'           reduce using rule 172
	'('            reduce using rule 172
	')'            reduce using rule 172
	'[]'           reduce using rule 172
	'['            reduce using rule 172
	'{'            reduce using rule 172
	'}'            reduce using rule 172
	'<.>'          reduce using rule 172
	'<.'           reduce using rule 172
	'<'            reduce using rule 172
	'>'            reduce using rule 172
	Static         reduce using rule 172
	New            reduce using rule 172
	Renew          reduce using rule 172
	Delete         reduce using rule 172
	Let            reduce using rule 172
	If             reduce using rule 172
	Case           reduce using rule 172
	Try            reduce using rule 172
	Throw          reduce using rule 172
	Return         reduce using rule 172
	Break          reduce using rule 172
	Continue       reduce using rule 172
	With           reduce using rule 172
	Do             reduce using rule 172
	While          reduce using rule 172
	For            reduce using rule 172
	Null           reduce using rule 172
	varId          reduce using rule 172
	conId          reduce using rule 172
	opId           reduce using rule 172
	primId         reduce using rule 172
	integer        reduce using rule 172
	double         reduce using rule 172
	char           reduce using rule 172
	string         reduce using rule 172
	boolean        reduce using rule 172


State 489

	apat -> '(' . pat ')'                               (rule 171)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	pat            goto state 501
	bpat           goto state 485
	apat           goto state 486
	pat_var        goto state 487

State 490

	stmt_if -> If '(' exp ')' stmt stmt_elif .          (rule 135)

	backslash      reduce using rule 135
	';'            reduce using rule 135
	'='            reduce using rule 135
	'_'            reduce using rule 135
	'~'            reduce using rule 135
	'*'            reduce using rule 135
	'&'            reduce using rule 135
	'&&'           reduce using rule 135
	'('            reduce using rule 135
	'[]'           reduce using rule 135
	'['            reduce using rule 135
	'{'            reduce using rule 135
	'}'            reduce using rule 135
	'<.>'          reduce using rule 135
	'<.'           reduce using rule 135
	'<'            reduce using rule 135
	'>'            reduce using rule 135
	Static         reduce using rule 135
	New            reduce using rule 135
	Renew          reduce using rule 135
	Delete         reduce using rule 135
	Let            reduce using rule 135
	If             reduce using rule 135
	Else           reduce using rule 135
	Elif           reduce using rule 135
	Case           reduce using rule 135
	Try            reduce using rule 135
	Catch          reduce using rule 135
	Finally        reduce using rule 135
	Throw          reduce using rule 135
	Return         reduce using rule 135
	Break          reduce using rule 135
	Continue       reduce using rule 135
	With           reduce using rule 135
	Do             reduce using rule 135
	While          reduce using rule 135
	For            reduce using rule 135
	Null           reduce using rule 135
	varId          reduce using rule 135
	conId          reduce using rule 135
	opId           reduce using rule 135
	primId         reduce using rule 135
	integer        reduce using rule 135
	double         reduce using rule 135
	char           reduce using rule 135
	string         reduce using rule 135
	boolean        reduce using rule 135


State 491

	stmt_if -> If '(' exp ')' stmt stmt_else .          (rule 136)

	backslash      reduce using rule 136
	';'            reduce using rule 136
	'='            reduce using rule 136
	'_'            reduce using rule 136
	'~'            reduce using rule 136
	'*'            reduce using rule 136
	'&'            reduce using rule 136
	'&&'           reduce using rule 136
	'('            reduce using rule 136
	'[]'           reduce using rule 136
	'['            reduce using rule 136
	'{'            reduce using rule 136
	'}'            reduce using rule 136
	'<.>'          reduce using rule 136
	'<.'           reduce using rule 136
	'<'            reduce using rule 136
	'>'            reduce using rule 136
	Static         reduce using rule 136
	New            reduce using rule 136
	Renew          reduce using rule 136
	Delete         reduce using rule 136
	Let            reduce using rule 136
	If             reduce using rule 136
	Else           reduce using rule 136
	Elif           reduce using rule 136
	Case           reduce using rule 136
	Try            reduce using rule 136
	Catch          reduce using rule 136
	Finally        reduce using rule 136
	Throw          reduce using rule 136
	Return         reduce using rule 136
	Break          reduce using rule 136
	Continue       reduce using rule 136
	With           reduce using rule 136
	Do             reduce using rule 136
	While          reduce using rule 136
	For            reduce using rule 136
	Null           reduce using rule 136
	varId          reduce using rule 136
	conId          reduce using rule 136
	opId           reduce using rule 136
	primId         reduce using rule 136
	integer        reduce using rule 136
	double         reduce using rule 136
	char           reduce using rule 136
	string         reduce using rule 136
	boolean        reduce using rule 136


State 492

	stmt_else -> Else . stmt                            (rule 140)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 500
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 493

	stmt_elif -> Elif . '(' exp ')' stmt                (rule 137)
	stmt_elif -> Elif . '(' exp ')' stmt stmt_elif      (rule 138)
	stmt_elif -> Elif . '(' exp ')' stmt stmt_else      (rule 139)

	'('            shift, and enter state 499


State 494

	stmt_catch -> Catch '(' exp ')' stmt .              (rule 154)

	backslash      reduce using rule 154
	';'            reduce using rule 154
	'='            reduce using rule 154
	'_'            reduce using rule 154
	'~'            reduce using rule 154
	'*'            reduce using rule 154
	'&'            reduce using rule 154
	'&&'           reduce using rule 154
	'('            reduce using rule 154
	'[]'           reduce using rule 154
	'['            reduce using rule 154
	'{'            reduce using rule 154
	'}'            reduce using rule 154
	'<.>'          reduce using rule 154
	'<.'           reduce using rule 154
	'<'            reduce using rule 154
	'>'            reduce using rule 154
	Static         reduce using rule 154
	New            reduce using rule 154
	Renew          reduce using rule 154
	Delete         reduce using rule 154
	Let            reduce using rule 154
	If             reduce using rule 154
	Else           reduce using rule 154
	Elif           reduce using rule 154
	Case           reduce using rule 154
	Try            reduce using rule 154
	Catch          reduce using rule 154
	Finally        reduce using rule 154
	Throw          reduce using rule 154
	Return         reduce using rule 154
	Break          reduce using rule 154
	Continue       reduce using rule 154
	With           reduce using rule 154
	Do             reduce using rule 154
	While          reduce using rule 154
	For            reduce using rule 154
	Null           reduce using rule 154
	varId          reduce using rule 154
	conId          reduce using rule 154
	opId           reduce using rule 154
	primId         reduce using rule 154
	integer        reduce using rule 154
	double         reduce using rule 154
	char           reduce using rule 154
	string         reduce using rule 154
	boolean        reduce using rule 154


State 495

	exp_instr -> prim_id '(' exp ',' exp ')' .          (rule 216)

	backslash      reduce using rule 216
	'->'           reduce using rule 216
	':'            reduce using rule 216
	';'            reduce using rule 216
	','            reduce using rule 216
	'.'            reduce using rule 216
	'='            reduce using rule 216
	'~'            reduce using rule 216
	'*'            reduce using rule 216
	'&'            reduce using rule 216
	'&&'           reduce using rule 216
	'('            reduce using rule 216
	')'            reduce using rule 216
	'['            reduce using rule 216
	']'            reduce using rule 216
	'}'            reduce using rule 216
	'<.'           reduce using rule 216
	'<'            reduce using rule 216
	'>'            reduce using rule 216
	As             reduce using rule 216
	opId           reduce using rule 216


State 496

	initializer -> name '(' exp_args0 . ')'             (rule 97)

	')'            shift, and enter state 498


State 497

	init_list_r -> init_list_r ',' initializer .        (rule 96)

	','            reduce using rule 96
	'{'            reduce using rule 96


State 498

	initializer -> name '(' exp_args0 ')' .             (rule 97)

	','            reduce using rule 97
	'{'            reduce using rule 97


State 499

	stmt_elif -> Elif '(' . exp ')' stmt                (rule 137)
	stmt_elif -> Elif '(' . exp ')' stmt stmt_elif      (rule 138)
	stmt_elif -> Elif '(' . exp ')' stmt stmt_else      (rule 139)

	backslash      shift, and enter state 115
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	exp            goto state 524
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 500

	stmt_else -> Else stmt .                            (rule 140)

	backslash      reduce using rule 140
	';'            reduce using rule 140
	'='            reduce using rule 140
	'_'            reduce using rule 140
	'~'            reduce using rule 140
	'*'            reduce using rule 140
	'&'            reduce using rule 140
	'&&'           reduce using rule 140
	'('            reduce using rule 140
	'[]'           reduce using rule 140
	'['            reduce using rule 140
	'{'            reduce using rule 140
	'}'            reduce using rule 140
	'<.>'          reduce using rule 140
	'<.'           reduce using rule 140
	'<'            reduce using rule 140
	'>'            reduce using rule 140
	Static         reduce using rule 140
	New            reduce using rule 140
	Renew          reduce using rule 140
	Delete         reduce using rule 140
	Let            reduce using rule 140
	If             reduce using rule 140
	Else           reduce using rule 140
	Elif           reduce using rule 140
	Case           reduce using rule 140
	Try            reduce using rule 140
	Catch          reduce using rule 140
	Finally        reduce using rule 140
	Throw          reduce using rule 140
	Return         reduce using rule 140
	Break          reduce using rule 140
	Continue       reduce using rule 140
	With           reduce using rule 140
	Do             reduce using rule 140
	While          reduce using rule 140
	For            reduce using rule 140
	Null           reduce using rule 140
	varId          reduce using rule 140
	conId          reduce using rule 140
	opId           reduce using rule 140
	primId         reduce using rule 140
	integer        reduce using rule 140
	double         reduce using rule 140
	char           reduce using rule 140
	string         reduce using rule 140
	boolean        reduce using rule 140


State 501

	apat -> '(' pat . ')'                               (rule 171)

	')'            shift, and enter state 523


State 502

	case_alt -> pat stmt .                              (rule 151)

	'_'            reduce using rule 151
	'('            reduce using rule 151
	'}'            reduce using rule 151
	varId          reduce using rule 151
	conId          reduce using rule 151


State 503

	case_alt_list_r -> case_alt_list_r case_alt .       (rule 150)

	'_'            reduce using rule 150
	'('            reduce using rule 150
	'}'            reduce using rule 150
	varId          reduce using rule 150
	conId          reduce using rule 150


State 504

	case_alts -> '{' case_alt_list '}' .                (rule 147)

	backslash      reduce using rule 147
	';'            reduce using rule 147
	'='            reduce using rule 147
	'_'            reduce using rule 147
	'~'            reduce using rule 147
	'*'            reduce using rule 147
	'&'            reduce using rule 147
	'&&'           reduce using rule 147
	'('            reduce using rule 147
	'[]'           reduce using rule 147
	'['            reduce using rule 147
	'{'            reduce using rule 147
	'}'            reduce using rule 147
	'<.>'          reduce using rule 147
	'<.'           reduce using rule 147
	'<'            reduce using rule 147
	'>'            reduce using rule 147
	Static         reduce using rule 147
	New            reduce using rule 147
	Renew          reduce using rule 147
	Delete         reduce using rule 147
	Let            reduce using rule 147
	If             reduce using rule 147
	Else           reduce using rule 147
	Elif           reduce using rule 147
	Case           reduce using rule 147
	Try            reduce using rule 147
	Catch          reduce using rule 147
	Finally        reduce using rule 147
	Throw          reduce using rule 147
	Return         reduce using rule 147
	Break          reduce using rule 147
	Continue       reduce using rule 147
	With           reduce using rule 147
	Do             reduce using rule 147
	While          reduce using rule 147
	For            reduce using rule 147
	Null           reduce using rule 147
	varId          reduce using rule 147
	conId          reduce using rule 147
	opId           reduce using rule 147
	primId         reduce using rule 147
	integer        reduce using rule 147
	double         reduce using rule 147
	char           reduce using rule 147
	string         reduce using rule 147
	boolean        reduce using rule 147


State 505

	bpat -> con_name '(' . pat_list0 ')'                (rule 167)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	')'            reduce using rule 180
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	pat            goto state 519
	bpat           goto state 485
	apat           goto state 486
	pat_var        goto state 487
	pat_list0      goto state 520
	pat_list       goto state 521
	pat_list_r     goto state 522

State 506

	bpat -> con_name '{' . pat_rec_field_list0 '}'      (rule 168)

	'}'            reduce using rule 175
	varId          shift, and enter state 4

	var_name       goto state 514
	var_id         goto state 3
	pat_rec_field  goto state 515
	pat_rec_field_list0goto state 516
	pat_rec_field_listgoto state 517
	pat_rec_field_list_rgoto state 518

State 507

	bpat -> var_name '@' . bpat                         (rule 166)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	bpat           goto state 513
	apat           goto state 486
	pat_var        goto state 487

State 508

	stmt_do_while -> Do stmt While '(' exp ')' ';' .    (rule 142)

	backslash      reduce using rule 142
	';'            reduce using rule 142
	'='            reduce using rule 142
	'_'            reduce using rule 142
	'~'            reduce using rule 142
	'*'            reduce using rule 142
	'&'            reduce using rule 142
	'&&'           reduce using rule 142
	'('            reduce using rule 142
	'[]'           reduce using rule 142
	'['            reduce using rule 142
	'{'            reduce using rule 142
	'}'            reduce using rule 142
	'<.>'          reduce using rule 142
	'<.'           reduce using rule 142
	'<'            reduce using rule 142
	'>'            reduce using rule 142
	Static         reduce using rule 142
	New            reduce using rule 142
	Renew          reduce using rule 142
	Delete         reduce using rule 142
	Let            reduce using rule 142
	If             reduce using rule 142
	Else           reduce using rule 142
	Elif           reduce using rule 142
	Case           reduce using rule 142
	Try            reduce using rule 142
	Catch          reduce using rule 142
	Finally        reduce using rule 142
	Throw          reduce using rule 142
	Return         reduce using rule 142
	Break          reduce using rule 142
	Continue       reduce using rule 142
	With           reduce using rule 142
	Do             reduce using rule 142
	While          reduce using rule 142
	For            reduce using rule 142
	Null           reduce using rule 142
	varId          reduce using rule 142
	conId          reduce using rule 142
	opId           reduce using rule 142
	primId         reduce using rule 142
	integer        reduce using rule 142
	double         reduce using rule 142
	char           reduce using rule 142
	string         reduce using rule 142
	boolean        reduce using rule 142


State 509

	stmt_for -> For '(' for_init may_exp ';' may_exp ')' . stmt    (rule 143)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 512
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 510

	operator_decl -> Operator '(' fixity ',' integer ',' op_name_list ')' ';' .    (rule 324)

	'~'            reduce using rule 324
	'}'            reduce using rule 324
	Operator       reduce using rule 324
	Inline         reduce using rule 324
	Recursive      reduce using rule 324
	Extern         reduce using rule 324
	Module         reduce using rule 324
	Import         reduce using rule 324
	Type           reduce using rule 324
	Alias          reduce using rule 324
	Class          reduce using rule 324
	Inst           reduce using rule 324
	Let            reduce using rule 324
	varId          reduce using rule 324
	conId          reduce using rule 324
	eof            reduce using rule 324


State 511

	op_name_list_r -> op_name_list_r ',' op_name .      (rule 332)

	','            reduce using rule 332
	')'            reduce using rule 332


State 512

	stmt_for -> For '(' for_init may_exp ';' may_exp ')' stmt .    (rule 143)

	backslash      reduce using rule 143
	';'            reduce using rule 143
	'='            reduce using rule 143
	'_'            reduce using rule 143
	'~'            reduce using rule 143
	'*'            reduce using rule 143
	'&'            reduce using rule 143
	'&&'           reduce using rule 143
	'('            reduce using rule 143
	'[]'           reduce using rule 143
	'['            reduce using rule 143
	'{'            reduce using rule 143
	'}'            reduce using rule 143
	'<.>'          reduce using rule 143
	'<.'           reduce using rule 143
	'<'            reduce using rule 143
	'>'            reduce using rule 143
	Static         reduce using rule 143
	New            reduce using rule 143
	Renew          reduce using rule 143
	Delete         reduce using rule 143
	Let            reduce using rule 143
	If             reduce using rule 143
	Else           reduce using rule 143
	Elif           reduce using rule 143
	Case           reduce using rule 143
	Try            reduce using rule 143
	Catch          reduce using rule 143
	Finally        reduce using rule 143
	Throw          reduce using rule 143
	Return         reduce using rule 143
	Break          reduce using rule 143
	Continue       reduce using rule 143
	With           reduce using rule 143
	Do             reduce using rule 143
	While          reduce using rule 143
	For            reduce using rule 143
	Null           reduce using rule 143
	varId          reduce using rule 143
	conId          reduce using rule 143
	opId           reduce using rule 143
	primId         reduce using rule 143
	integer        reduce using rule 143
	double         reduce using rule 143
	char           reduce using rule 143
	string         reduce using rule 143
	boolean        reduce using rule 143


State 513

	bpat -> var_name '@' bpat .                         (rule 166)

	backslash      reduce using rule 166
	';'            reduce using rule 166
	','            reduce using rule 166
	'='            reduce using rule 166
	'~'            reduce using rule 166
	'*'            reduce using rule 166
	'&'            reduce using rule 166
	'&&'           reduce using rule 166
	'('            reduce using rule 166
	')'            reduce using rule 166
	'[]'           reduce using rule 166
	'['            reduce using rule 166
	'{'            reduce using rule 166
	'}'            reduce using rule 166
	'<.>'          reduce using rule 166
	'<.'           reduce using rule 166
	'<'            reduce using rule 166
	'>'            reduce using rule 166
	Static         reduce using rule 166
	New            reduce using rule 166
	Renew          reduce using rule 166
	Delete         reduce using rule 166
	Let            reduce using rule 166
	If             reduce using rule 166
	Case           reduce using rule 166
	Try            reduce using rule 166
	Throw          reduce using rule 166
	Return         reduce using rule 166
	Break          reduce using rule 166
	Continue       reduce using rule 166
	With           reduce using rule 166
	Do             reduce using rule 166
	While          reduce using rule 166
	For            reduce using rule 166
	Null           reduce using rule 166
	varId          reduce using rule 166
	conId          reduce using rule 166
	opId           reduce using rule 166
	primId         reduce using rule 166
	integer        reduce using rule 166
	double         reduce using rule 166
	char           reduce using rule 166
	string         reduce using rule 166
	boolean        reduce using rule 166


State 514

	pat_rec_field -> var_name . '=' pat                 (rule 174)

	'='            shift, and enter state 530


State 515

	pat_rec_field_list_r -> pat_rec_field .             (rule 178)

	','            reduce using rule 178
	'}'            reduce using rule 178


State 516

	bpat -> con_name '{' pat_rec_field_list0 . '}'      (rule 168)

	'}'            shift, and enter state 529


State 517

	pat_rec_field_list0 -> pat_rec_field_list .         (rule 176)

	'}'            reduce using rule 176


State 518

	pat_rec_field_list -> pat_rec_field_list_r .        (rule 177)
	pat_rec_field_list_r -> pat_rec_field_list_r . ',' pat_rec_field    (rule 179)

	','            shift, and enter state 528
	'}'            reduce using rule 177


State 519

	pat_list_r -> pat .                                 (rule 183)

	','            reduce using rule 183
	')'            reduce using rule 183


State 520

	bpat -> con_name '(' pat_list0 . ')'                (rule 167)

	')'            shift, and enter state 527


State 521

	pat_list0 -> pat_list .                             (rule 181)

	')'            reduce using rule 181


State 522

	pat_list -> pat_list_r .                            (rule 182)
	pat_list_r -> pat_list_r . ',' pat                  (rule 184)

	','            shift, and enter state 526
	')'            reduce using rule 182


State 523

	apat -> '(' pat ')' .                               (rule 171)

	backslash      reduce using rule 171
	';'            reduce using rule 171
	','            reduce using rule 171
	'='            reduce using rule 171
	'~'            reduce using rule 171
	'*'            reduce using rule 171
	'&'            reduce using rule 171
	'&&'           reduce using rule 171
	'('            reduce using rule 171
	')'            reduce using rule 171
	'[]'           reduce using rule 171
	'['            reduce using rule 171
	'{'            reduce using rule 171
	'}'            reduce using rule 171
	'<.>'          reduce using rule 171
	'<.'           reduce using rule 171
	'<'            reduce using rule 171
	'>'            reduce using rule 171
	Static         reduce using rule 171
	New            reduce using rule 171
	Renew          reduce using rule 171
	Delete         reduce using rule 171
	Let            reduce using rule 171
	If             reduce using rule 171
	Case           reduce using rule 171
	Try            reduce using rule 171
	Throw          reduce using rule 171
	Return         reduce using rule 171
	Break          reduce using rule 171
	Continue       reduce using rule 171
	With           reduce using rule 171
	Do             reduce using rule 171
	While          reduce using rule 171
	For            reduce using rule 171
	Null           reduce using rule 171
	varId          reduce using rule 171
	conId          reduce using rule 171
	opId           reduce using rule 171
	primId         reduce using rule 171
	integer        reduce using rule 171
	double         reduce using rule 171
	char           reduce using rule 171
	string         reduce using rule 171
	boolean        reduce using rule 171


State 524

	stmt_elif -> Elif '(' exp . ')' stmt                (rule 137)
	stmt_elif -> Elif '(' exp . ')' stmt stmt_elif      (rule 138)
	stmt_elif -> Elif '(' exp . ')' stmt stmt_else      (rule 139)

	')'            shift, and enter state 525


State 525

	stmt_elif -> Elif '(' exp ')' . stmt                (rule 137)
	stmt_elif -> Elif '(' exp ')' . stmt stmt_elif      (rule 138)
	stmt_elif -> Elif '(' exp ')' . stmt stmt_else      (rule 139)

	backslash      shift, and enter state 115
	';'            shift, and enter state 201
	'='            shift, and enter state 116
	'~'            shift, and enter state 117
	'*'            shift, and enter state 118
	'&'            shift, and enter state 119
	'&&'           shift, and enter state 120
	'('            shift, and enter state 121
	'[]'           shift, and enter state 122
	'['            shift, and enter state 123
	'{'            shift, and enter state 74
	'<.>'          shift, and enter state 124
	'<.'           shift, and enter state 125
	'<'            shift, and enter state 126
	'>'            shift, and enter state 127
	Static         shift, and enter state 203
	New            shift, and enter state 128
	Renew          shift, and enter state 129
	Delete         shift, and enter state 130
	Let            reduce using rule 121
	If             shift, and enter state 204
	Case           shift, and enter state 205
	Try            shift, and enter state 206
	Throw          shift, and enter state 207
	Return         shift, and enter state 208
	Break          shift, and enter state 209
	Continue       shift, and enter state 210
	With           shift, and enter state 211
	Do             shift, and enter state 212
	While          shift, and enter state 213
	For            shift, and enter state 214
	Null           shift, and enter state 131
	varId          shift, and enter state 4
	conId          shift, and enter state 49
	opId           shift, and enter state 132
	primId         shift, and enter state 133
	integer        shift, and enter state 134
	double         shift, and enter state 135
	char           shift, and enter state 136
	string         shift, and enter state 137
	boolean        shift, and enter state 138

	var_name       goto state 91
	con_name       goto state 92
	op_name_ext    goto state 93
	var_id         goto state 3
	con_id         goto state 6
	op_id          goto state 94
	op_id_ext      goto state 95
	prim_id        goto state 96
	value          goto state 97
	stmt           goto state 534
	block          goto state 176
	stmt_nop       goto state 179
	stmt_exp       goto state 180
	stmt_decl      goto state 181
	maybe_stmt_decl_specsgoto state 182
	stmt_decl_specsgoto state 183
	stmt_decl_specs_listgoto state 184
	stmt_decl_specs_list_rgoto state 185
	stmt_decl_spec goto state 186
	stmt_block     goto state 187
	stmt_with      goto state 188
	stmt_break     goto state 189
	stmt_continue  goto state 190
	stmt_return    goto state 191
	stmt_throw     goto state 192
	stmt_if        goto state 193
	stmt_while     goto state 194
	stmt_do_while  goto state 195
	stmt_for       goto state 196
	stmt_case      goto state 197
	stmt_try_catch goto state 198
	stmt_try       goto state 199
	exp            goto state 200
	dexp           goto state 99
	cexp           goto state 100
	bexp           goto state 101
	aexp           goto state 102
	exp_var        goto state 103
	exp_con        goto state 104
	exp_value      goto state 105
	exp_parens     goto state 106
	exp_instr      goto state 110
	exp_op(bexp)   goto state 111
	cexpop(bexp)   goto state 112
	bexpop(bexp)   goto state 113
	aexpop(bexp)   goto state 114

State 526

	pat_list_r -> pat_list_r ',' . pat                  (rule 184)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	pat            goto state 533
	bpat           goto state 485
	apat           goto state 486
	pat_var        goto state 487

State 527

	bpat -> con_name '(' pat_list0 ')' .                (rule 167)

	backslash      reduce using rule 167
	';'            reduce using rule 167
	','            reduce using rule 167
	'='            reduce using rule 167
	'~'            reduce using rule 167
	'*'            reduce using rule 167
	'&'            reduce using rule 167
	'&&'           reduce using rule 167
	'('            reduce using rule 167
	')'            reduce using rule 167
	'[]'           reduce using rule 167
	'['            reduce using rule 167
	'{'            reduce using rule 167
	'}'            reduce using rule 167
	'<.>'          reduce using rule 167
	'<.'           reduce using rule 167
	'<'            reduce using rule 167
	'>'            reduce using rule 167
	Static         reduce using rule 167
	New            reduce using rule 167
	Renew          reduce using rule 167
	Delete         reduce using rule 167
	Let            reduce using rule 167
	If             reduce using rule 167
	Case           reduce using rule 167
	Try            reduce using rule 167
	Throw          reduce using rule 167
	Return         reduce using rule 167
	Break          reduce using rule 167
	Continue       reduce using rule 167
	With           reduce using rule 167
	Do             reduce using rule 167
	While          reduce using rule 167
	For            reduce using rule 167
	Null           reduce using rule 167
	varId          reduce using rule 167
	conId          reduce using rule 167
	opId           reduce using rule 167
	primId         reduce using rule 167
	integer        reduce using rule 167
	double         reduce using rule 167
	char           reduce using rule 167
	string         reduce using rule 167
	boolean        reduce using rule 167


State 528

	pat_rec_field_list_r -> pat_rec_field_list_r ',' . pat_rec_field    (rule 179)

	varId          shift, and enter state 4

	var_name       goto state 514
	var_id         goto state 3
	pat_rec_field  goto state 532

State 529

	bpat -> con_name '{' pat_rec_field_list0 '}' .      (rule 168)

	backslash      reduce using rule 168
	';'            reduce using rule 168
	','            reduce using rule 168
	'='            reduce using rule 168
	'~'            reduce using rule 168
	'*'            reduce using rule 168
	'&'            reduce using rule 168
	'&&'           reduce using rule 168
	'('            reduce using rule 168
	')'            reduce using rule 168
	'[]'           reduce using rule 168
	'['            reduce using rule 168
	'{'            reduce using rule 168
	'}'            reduce using rule 168
	'<.>'          reduce using rule 168
	'<.'           reduce using rule 168
	'<'            reduce using rule 168
	'>'            reduce using rule 168
	Static         reduce using rule 168
	New            reduce using rule 168
	Renew          reduce using rule 168
	Delete         reduce using rule 168
	Let            reduce using rule 168
	If             reduce using rule 168
	Case           reduce using rule 168
	Try            reduce using rule 168
	Throw          reduce using rule 168
	Return         reduce using rule 168
	Break          reduce using rule 168
	Continue       reduce using rule 168
	With           reduce using rule 168
	Do             reduce using rule 168
	While          reduce using rule 168
	For            reduce using rule 168
	Null           reduce using rule 168
	varId          reduce using rule 168
	conId          reduce using rule 168
	opId           reduce using rule 168
	primId         reduce using rule 168
	integer        reduce using rule 168
	double         reduce using rule 168
	char           reduce using rule 168
	string         reduce using rule 168
	boolean        reduce using rule 168


State 530

	pat_rec_field -> var_name '=' . pat                 (rule 174)

	'_'            shift, and enter state 488
	'('            shift, and enter state 489
	varId          shift, and enter state 4
	conId          shift, and enter state 49

	var_name       goto state 479
	con_name       goto state 480
	var_id         goto state 3
	con_id         goto state 6
	pat            goto state 531
	bpat           goto state 485
	apat           goto state 486
	pat_var        goto state 487

State 531

	pat_rec_field -> var_name '=' pat .                 (rule 174)

	','            reduce using rule 174
	'}'            reduce using rule 174


State 532

	pat_rec_field_list_r -> pat_rec_field_list_r ',' pat_rec_field .    (rule 179)

	','            reduce using rule 179
	'}'            reduce using rule 179


State 533

	pat_list_r -> pat_list_r ',' pat .                  (rule 184)

	','            reduce using rule 184
	')'            reduce using rule 184


State 534

	stmt_elif -> Elif '(' exp ')' stmt .                (rule 137)
	stmt_elif -> Elif '(' exp ')' stmt . stmt_elif      (rule 138)
	stmt_elif -> Elif '(' exp ')' stmt . stmt_else      (rule 139)

	backslash      reduce using rule 137
	';'            reduce using rule 137
	'='            reduce using rule 137
	'_'            reduce using rule 137
	'~'            reduce using rule 137
	'*'            reduce using rule 137
	'&'            reduce using rule 137
	'&&'           reduce using rule 137
	'('            reduce using rule 137
	'[]'           reduce using rule 137
	'['            reduce using rule 137
	'{'            reduce using rule 137
	'}'            reduce using rule 137
	'<.>'          reduce using rule 137
	'<.'           reduce using rule 137
	'<'            reduce using rule 137
	'>'            reduce using rule 137
	Static         reduce using rule 137
	New            reduce using rule 137
	Renew          reduce using rule 137
	Delete         reduce using rule 137
	Let            reduce using rule 137
	If             reduce using rule 137
	Else           shift, and enter state 492
	Elif           shift, and enter state 493
	Case           reduce using rule 137
	Try            reduce using rule 137
	Catch          reduce using rule 137
	Finally        reduce using rule 137
	Throw          reduce using rule 137
	Return         reduce using rule 137
	Break          reduce using rule 137
	Continue       reduce using rule 137
	With           reduce using rule 137
	Do             reduce using rule 137
	While          reduce using rule 137
	For            reduce using rule 137
	Null           reduce using rule 137
	varId          reduce using rule 137
	conId          reduce using rule 137
	opId           reduce using rule 137
	primId         reduce using rule 137
	integer        reduce using rule 137
	double         reduce using rule 137
	char           reduce using rule 137
	string         reduce using rule 137
	boolean        reduce using rule 137

	stmt_elif      goto state 535
	stmt_else      goto state 536

State 535

	stmt_elif -> Elif '(' exp ')' stmt stmt_elif .      (rule 138)

	backslash      reduce using rule 138
	';'            reduce using rule 138
	'='            reduce using rule 138
	'_'            reduce using rule 138
	'~'            reduce using rule 138
	'*'            reduce using rule 138
	'&'            reduce using rule 138
	'&&'           reduce using rule 138
	'('            reduce using rule 138
	'[]'           reduce using rule 138
	'['            reduce using rule 138
	'{'            reduce using rule 138
	'}'            reduce using rule 138
	'<.>'          reduce using rule 138
	'<.'           reduce using rule 138
	'<'            reduce using rule 138
	'>'            reduce using rule 138
	Static         reduce using rule 138
	New            reduce using rule 138
	Renew          reduce using rule 138
	Delete         reduce using rule 138
	Let            reduce using rule 138
	If             reduce using rule 138
	Else           reduce using rule 138
	Elif           reduce using rule 138
	Case           reduce using rule 138
	Try            reduce using rule 138
	Catch          reduce using rule 138
	Finally        reduce using rule 138
	Throw          reduce using rule 138
	Return         reduce using rule 138
	Break          reduce using rule 138
	Continue       reduce using rule 138
	With           reduce using rule 138
	Do             reduce using rule 138
	While          reduce using rule 138
	For            reduce using rule 138
	Null           reduce using rule 138
	varId          reduce using rule 138
	conId          reduce using rule 138
	opId           reduce using rule 138
	primId         reduce using rule 138
	integer        reduce using rule 138
	double         reduce using rule 138
	char           reduce using rule 138
	string         reduce using rule 138
	boolean        reduce using rule 138


State 536

	stmt_elif -> Elif '(' exp ')' stmt stmt_else .      (rule 139)

	backslash      reduce using rule 139
	';'            reduce using rule 139
	'='            reduce using rule 139
	'_'            reduce using rule 139
	'~'            reduce using rule 139
	'*'            reduce using rule 139
	'&'            reduce using rule 139
	'&&'           reduce using rule 139
	'('            reduce using rule 139
	'[]'           reduce using rule 139
	'['            reduce using rule 139
	'{'            reduce using rule 139
	'}'            reduce using rule 139
	'<.>'          reduce using rule 139
	'<.'           reduce using rule 139
	'<'            reduce using rule 139
	'>'            reduce using rule 139
	Static         reduce using rule 139
	New            reduce using rule 139
	Renew          reduce using rule 139
	Delete         reduce using rule 139
	Let            reduce using rule 139
	If             reduce using rule 139
	Else           reduce using rule 139
	Elif           reduce using rule 139
	Case           reduce using rule 139
	Try            reduce using rule 139
	Catch          reduce using rule 139
	Finally        reduce using rule 139
	Throw          reduce using rule 139
	Return         reduce using rule 139
	Break          reduce using rule 139
	Continue       reduce using rule 139
	With           reduce using rule 139
	Do             reduce using rule 139
	While          reduce using rule 139
	For            reduce using rule 139
	Null           reduce using rule 139
	varId          reduce using rule 139
	conId          reduce using rule 139
	opId           reduce using rule 139
	primId         reduce using rule 139
	integer        reduce using rule 139
	double         reduce using rule 139
	char           reduce using rule 139
	string         reduce using rule 139
	boolean        reduce using rule 139


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 352
Number of terminals: 85
Number of non-terminals: 197
Number of states: 537
