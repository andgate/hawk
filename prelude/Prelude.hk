-- Linear List

LList : (Nat, Loc) -> L 0
-- Nil
LList(0,   l) = [l |-> inl ()]
-- Cons
LList(n+1, l) = F l' : Loc . [l |-> inr l'] * LList(n, l')


type LList : (n:Nat) -> Loc -> L 0 where
  Nil : LList 0 l
  Nil : 


-- Regular
len : forall (n:Nat). (l:Loc) -> G([LList(n,l)] -o (F (m:Nat), (pf:m = n). [LList(n,l)]))

-- Hoare Triple44
len : forall (n:Nat). (l:Loc) -> {LList(n,l)} (pf: forall (m:Nat). m = n) {LList(n,l)}

len l = G (\c.
  let [c'] = *
  let [c1, c2] = c'
  let ((v,pf), c1') = get(l, c1)
  case v of
    inl () -> F (0, refl, *)
    inr l' -> let (F (m, pf, c'')) = G' (len l') *
              F (m + 1, refl, *)
  )